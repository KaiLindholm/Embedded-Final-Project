
Embedded-Final-Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010c  00800100  00000ff4  00001088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ff4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000090  0080020c  0080020c  00001194  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001194  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00001204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002646  00000000  00000000  000013f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010fc  00000000  00000000  00003a3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012b3  00000000  00000000  00004b36  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004f0  00000000  00000000  00005dec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000083c  00000000  00000000  000062dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015e2  00000000  00000000  00006b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  000080fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 a2 04 	jmp	0x944	; 0x944 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 96 04 	jmp	0x92c	; 0x92c <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 f6 04 	jmp	0x9ec	; 0x9ec <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 2c 05 	jmp	0xa58	; 0xa58 <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ef       	ldi	r30, 0xF4	; 244
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 39       	cpi	r26, 0x9C	; 156
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ce 01 	call	0x39c	; 0x39c <main>
  9e:	0c 94 f8 07 	jmp	0xff0	; 0xff0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init>:
	for(uint8_t byte = 0; byte < 4; ++byte) {
		printByte(uid[byte]);
		uart_send_byte(' ');
	}
	uart_send_byte('\n');
}
  a6:	0e 94 76 02 	call	0x4ec	; 0x4ec <lcd_init>
  aa:	0e 94 7d 04 	call	0x8fa	; 0x8fa <spi_init>
  ae:	0e 94 e7 02 	call	0x5ce	; 0x5ce <mfrc522_init>
  b2:	0e 94 ac 04 	call	0x958	; 0x958 <pwm_init>
  b6:	84 b1       	in	r24, 0x04	; 4
  b8:	8e 7f       	andi	r24, 0xFE	; 254
  ba:	84 b9       	out	0x04, r24	; 4
  bc:	84 b1       	in	r24, 0x04	; 4
  be:	8e 7f       	andi	r24, 0xFE	; 254
  c0:	84 b9       	out	0x04, r24	; 4
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	88 b9       	out	0x08, r24	; 8
  c6:	85 b9       	out	0x05, r24	; 5
  c8:	ee e0       	ldi	r30, 0x0E	; 14
  ca:	f2 e0       	ldi	r31, 0x02	; 2
  cc:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <cardTag>
  d0:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <cardTag+0x1>
  d4:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <cardTag+0x2>
  d8:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <cardTag+0x3>
  dc:	80 83       	st	Z, r24
  de:	91 83       	std	Z+1, r25	; 0x01
  e0:	a2 83       	std	Z+2, r26	; 0x02
  e2:	b3 83       	std	Z+3, r27	; 0x03
  e4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <keyTag>
  e8:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <keyTag+0x1>
  ec:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <keyTag+0x2>
  f0:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <keyTag+0x3>
  f4:	84 83       	std	Z+4, r24	; 0x04
  f6:	95 83       	std	Z+5, r25	; 0x05
  f8:	a6 83       	std	Z+6, r26	; 0x06
  fa:	b7 83       	std	Z+7, r27	; 0x07
  fc:	78 94       	sei
  fe:	64 eb       	ldi	r22, 0xB4	; 180
 100:	70 e0       	ldi	r23, 0x00	; 0
 102:	86 e9       	ldi	r24, 0x96	; 150
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 c5 04 	call	0x98a	; 0x98a <servo_set>
 10a:	08 95       	ret

0000010c <check_if_uid_in_memory>:

uint8_t check_if_uid_in_memory(uint8_t * scannedUid) 
{
 10c:	0f 93       	push	r16
 10e:	1f 93       	push	r17
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	8c 01       	movw	r16, r24
	
	for(int i = 0; i < sizeof(Uids); ++i){
 116:	c0 e0       	ldi	r28, 0x00	; 0
 118:	d0 e0       	ldi	r29, 0x00	; 0
 11a:	0f c0       	rjmp	.+30     	; 0x13a <check_if_uid_in_memory+0x2e>
		uint8_t * uid = Uids[i];
 11c:	be 01       	movw	r22, r28
 11e:	66 0f       	add	r22, r22
 120:	77 1f       	adc	r23, r23
 122:	66 0f       	add	r22, r22
 124:	77 1f       	adc	r23, r23
 126:	62 5f       	subi	r22, 0xF2	; 242
 128:	7d 4f       	sbci	r23, 0xFD	; 253
		if(memcmp(scannedUid, uid, 4) == 0){
 12a:	44 e0       	ldi	r20, 0x04	; 4
 12c:	50 e0       	ldi	r21, 0x00	; 0
 12e:	c8 01       	movw	r24, r16
 130:	0e 94 44 07 	call	0xe88	; 0xe88 <memcmp>
 134:	89 2b       	or	r24, r25
 136:	31 f0       	breq	.+12     	; 0x144 <check_if_uid_in_memory+0x38>
}

uint8_t check_if_uid_in_memory(uint8_t * scannedUid) 
{
	
	for(int i = 0; i < sizeof(Uids); ++i){
 138:	21 96       	adiw	r28, 0x01	; 1
 13a:	c8 30       	cpi	r28, 0x08	; 8
 13c:	d1 05       	cpc	r29, r1
 13e:	70 f3       	brcs	.-36     	; 0x11c <check_if_uid_in_memory+0x10>
		uint8_t * uid = Uids[i];
		if(memcmp(scannedUid, uid, 4) == 0){
			return 1;
		}
	}
	return 0; 
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	01 c0       	rjmp	.+2      	; 0x146 <check_if_uid_in_memory+0x3a>
{
	
	for(int i = 0; i < sizeof(Uids); ++i){
		uint8_t * uid = Uids[i];
		if(memcmp(scannedUid, uid, 4) == 0){
			return 1;
 144:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0; 
}
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	1f 91       	pop	r17
 14c:	0f 91       	pop	r16
 14e:	08 95       	ret

00000150 <read_card>:
			}
		}
	}
}

uint8_t read_card(){
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	cd b7       	in	r28, 0x3d	; 61
 156:	de b7       	in	r29, 0x3e	; 62
 158:	60 97       	sbiw	r28, 0x10	; 16
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	f8 94       	cli
 15e:	de bf       	out	0x3e, r29	; 62
 160:	0f be       	out	0x3f, r0	; 63
 162:	cd bf       	out	0x3d, r28	; 61
	uint8_t byte; 
	uint8_t str[MAX_LEN];
	
	byte = mfrc522_read(ComIEnReg);
 164:	82 e0       	ldi	r24, 0x02	; 2
 166:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <mfrc522_read>
	mfrc522_write(ComIEnReg,byte|0x20);
 16a:	68 2f       	mov	r22, r24
 16c:	60 62       	ori	r22, 0x20	; 32
 16e:	82 e0       	ldi	r24, 0x02	; 2
 170:	0e 94 be 02 	call	0x57c	; 0x57c <mfrc522_write>
	byte = mfrc522_read(DivIEnReg);
 174:	83 e0       	ldi	r24, 0x03	; 3
 176:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <mfrc522_read>
	mfrc522_write(DivIEnReg,byte|0x80);
 17a:	68 2f       	mov	r22, r24
 17c:	60 68       	ori	r22, 0x80	; 128
 17e:	83 e0       	ldi	r24, 0x03	; 3
 180:	0e 94 be 02 	call	0x57c	; 0x57c <mfrc522_write>
	
	while(1){
		byte = mfrc522_request(PICC_REQALL, str);
 184:	be 01       	movw	r22, r28
 186:	6f 5f       	subi	r22, 0xFF	; 255
 188:	7f 4f       	sbci	r23, 0xFF	; 255
 18a:	82 e5       	ldi	r24, 0x52	; 82
 18c:	0e 94 0c 04 	call	0x818	; 0x818 <mfrc522_request>
		if(byte == CARD_FOUND) {
 190:	81 30       	cpi	r24, 0x01	; 1
 192:	71 f4       	brne	.+28     	; 0x1b0 <read_card+0x60>
			byte = mfrc522_get_card_serial(str);
 194:	ce 01       	movw	r24, r28
 196:	01 96       	adiw	r24, 0x01	; 1
 198:	0e 94 41 04 	call	0x882	; 0x882 <mfrc522_get_card_serial>
			if(byte == CARD_FOUND) {
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	91 f4       	brne	.+36     	; 0x1c4 <read_card+0x74>
				if(check_if_uid_in_memory(str)){
 1a0:	ce 01       	movw	r24, r28
 1a2:	01 96       	adiw	r24, 0x01	; 1
 1a4:	0e 94 86 00 	call	0x10c	; 0x10c <check_if_uid_in_memory>
 1a8:	88 23       	and	r24, r24
 1aa:	69 f0       	breq	.+26     	; 0x1c6 <read_card+0x76>
					return 1; 
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	0b c0       	rjmp	.+22     	; 0x1c6 <read_card+0x76>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b0:	2f ef       	ldi	r18, 0xFF	; 255
 1b2:	83 ed       	ldi	r24, 0xD3	; 211
 1b4:	90 e3       	ldi	r25, 0x30	; 48
 1b6:	21 50       	subi	r18, 0x01	; 1
 1b8:	80 40       	sbci	r24, 0x00	; 0
 1ba:	90 40       	sbci	r25, 0x00	; 0
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <read_card+0x66>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <read_card+0x70>
 1c0:	00 00       	nop
 1c2:	e0 cf       	rjmp	.-64     	; 0x184 <read_card+0x34>
				} else {
					return 0; 
				}
			} else {
				return 0; 
 1c4:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
		
		_delay_ms(1000);
	}
}
 1c6:	60 96       	adiw	r28, 0x10	; 16
 1c8:	0f b6       	in	r0, 0x3f	; 63
 1ca:	f8 94       	cli
 1cc:	de bf       	out	0x3e, r29	; 62
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	cd bf       	out	0x3d, r28	; 61
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	08 95       	ret

000001d8 <dispenser>:
 
void dispenser(){
	int16_t count = 0;
	int16_t delay = 0;
	if(count == 0){
		fprintf(&lcd_str, "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaBaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaBaaaaaaaaaaaaaaaaaaaaaaaaa");
 1d8:	20 e0       	ldi	r18, 0x00	; 0
 1da:	31 e0       	ldi	r19, 0x01	; 1
 1dc:	40 e8       	ldi	r20, 0x80	; 128
 1de:	50 e0       	ldi	r21, 0x00	; 0
 1e0:	61 e0       	ldi	r22, 0x01	; 1
 1e2:	70 e0       	ldi	r23, 0x00	; 0
 1e4:	84 e4       	ldi	r24, 0x44	; 68
 1e6:	91 e0       	ldi	r25, 0x01	; 1
 1e8:	0e 94 8d 07 	call	0xf1a	; 0xf1a <fwrite>

		count++;
	}
	
	while(!read_card());
 1ec:	0e 94 a8 00 	call	0x150	; 0x150 <read_card>
 1f0:	88 23       	and	r24, r24
 1f2:	e1 f3       	breq	.-8      	; 0x1ec <dispenser+0x14>
 1f4:	2f ef       	ldi	r18, 0xFF	; 255
 1f6:	31 ee       	ldi	r19, 0xE1	; 225
 1f8:	84 e0       	ldi	r24, 0x04	; 4
 1fa:	21 50       	subi	r18, 0x01	; 1
 1fc:	30 40       	sbci	r19, 0x00	; 0
 1fe:	80 40       	sbci	r24, 0x00	; 0
 200:	e1 f7       	brne	.-8      	; 0x1fa <dispenser+0x22>
 202:	00 c0       	rjmp	.+0      	; 0x204 <dispenser+0x2c>
 204:	00 00       	nop
	
	_delay_ms(100);
	fprintf(&lcd_str, "your card.");
 206:	20 e0       	ldi	r18, 0x00	; 0
 208:	31 e0       	ldi	r19, 0x01	; 1
 20a:	4a e0       	ldi	r20, 0x0A	; 10
 20c:	50 e0       	ldi	r21, 0x00	; 0
 20e:	61 e0       	ldi	r22, 0x01	; 1
 210:	70 e0       	ldi	r23, 0x00	; 0
 212:	85 ec       	ldi	r24, 0xC5	; 197
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	0e 94 8d 07 	call	0xf1a	; 0xf1a <fwrite>
	fprintf(&lcd_str, "\n");
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	71 e0       	ldi	r23, 0x01	; 1
 21e:	8a e0       	ldi	r24, 0x0A	; 10
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 51 07 	call	0xea2	; 0xea2 <fputc>
	fprintf(&lcd_str, "Use the top button.");
 226:	20 e0       	ldi	r18, 0x00	; 0
 228:	31 e0       	ldi	r19, 0x01	; 1
 22a:	43 e1       	ldi	r20, 0x13	; 19
 22c:	50 e0       	ldi	r21, 0x00	; 0
 22e:	61 e0       	ldi	r22, 0x01	; 1
 230:	70 e0       	ldi	r23, 0x00	; 0
 232:	80 ed       	ldi	r24, 0xD0	; 208
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	0e 94 8d 07 	call	0xf1a	; 0xf1a <fwrite>
	dispenser();
}
 
void dispenser(){
	int16_t count = 0;
	int16_t delay = 0;
 23a:	00 e0       	ldi	r16, 0x00	; 0
 23c:	10 e0       	ldi	r17, 0x00	; 0
	while(!read_card());
	
	_delay_ms(100);
	fprintf(&lcd_str, "your card.");
	fprintf(&lcd_str, "\n");
	fprintf(&lcd_str, "Use the top button.");
 23e:	c1 e0       	ldi	r28, 0x01	; 1
 240:	d0 e0       	ldi	r29, 0x00	; 0
	
	while (1) {
		if((PINC & (1 << PINC0))== 0){
 242:	30 99       	sbic	0x06, 0	; 6
 244:	5f c0       	rjmp	.+190    	; 0x304 <dispenser+0x12c>
			if(count == 1){
 246:	c1 30       	cpi	r28, 0x01	; 1
 248:	d1 05       	cpc	r29, r1
 24a:	e1 f4       	brne	.+56     	; 0x284 <dispenser+0xac>
 24c:	9f ef       	ldi	r25, 0xFF	; 255
 24e:	23 ed       	ldi	r18, 0xD3	; 211
 250:	30 e3       	ldi	r19, 0x30	; 48
 252:	91 50       	subi	r25, 0x01	; 1
 254:	20 40       	sbci	r18, 0x00	; 0
 256:	30 40       	sbci	r19, 0x00	; 0
 258:	e1 f7       	brne	.-8      	; 0x252 <dispenser+0x7a>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <dispenser+0x84>
 25c:	00 00       	nop
				delay = 1600;
				_delay_ms(1000);
				fprintf(&lcd_str, "\n");
 25e:	60 e0       	ldi	r22, 0x00	; 0
 260:	71 e0       	ldi	r23, 0x01	; 1
 262:	8a e0       	ldi	r24, 0x0A	; 10
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 51 07 	call	0xea2	; 0xea2 <fputc>
				fprintf(&lcd_str, "Creatine: 1g");
 26a:	20 e0       	ldi	r18, 0x00	; 0
 26c:	31 e0       	ldi	r19, 0x01	; 1
 26e:	4c e0       	ldi	r20, 0x0C	; 12
 270:	50 e0       	ldi	r21, 0x00	; 0
 272:	61 e0       	ldi	r22, 0x01	; 1
 274:	70 e0       	ldi	r23, 0x00	; 0
 276:	84 ee       	ldi	r24, 0xE4	; 228
 278:	91 e0       	ldi	r25, 0x01	; 1
 27a:	0e 94 8d 07 	call	0xf1a	; 0xf1a <fwrite>
	fprintf(&lcd_str, "Use the top button.");
	
	while (1) {
		if((PINC & (1 << PINC0))== 0){
			if(count == 1){
				delay = 1600;
 27e:	00 e4       	ldi	r16, 0x40	; 64
 280:	16 e0       	ldi	r17, 0x06	; 6
 282:	3f c0       	rjmp	.+126    	; 0x302 <dispenser+0x12a>
				_delay_ms(1000);
				fprintf(&lcd_str, "\n");
				fprintf(&lcd_str, "Creatine: 1g");
				} else if(count == 2){
 284:	c2 30       	cpi	r28, 0x02	; 2
 286:	d1 05       	cpc	r29, r1
 288:	e1 f4       	brne	.+56     	; 0x2c2 <dispenser+0xea>
				fprintf(&lcd_str, "\n");
 28a:	60 e0       	ldi	r22, 0x00	; 0
 28c:	71 e0       	ldi	r23, 0x01	; 1
 28e:	8a e0       	ldi	r24, 0x0A	; 10
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 51 07 	call	0xea2	; 0xea2 <fputc>
				fprintf(&lcd_str, "Creatine: 5g");
 296:	20 e0       	ldi	r18, 0x00	; 0
 298:	31 e0       	ldi	r19, 0x01	; 1
 29a:	4c e0       	ldi	r20, 0x0C	; 12
 29c:	50 e0       	ldi	r21, 0x00	; 0
 29e:	61 e0       	ldi	r22, 0x01	; 1
 2a0:	70 e0       	ldi	r23, 0x00	; 0
 2a2:	81 ef       	ldi	r24, 0xF1	; 241
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	0e 94 8d 07 	call	0xf1a	; 0xf1a <fwrite>
 2aa:	8f ef       	ldi	r24, 0xFF	; 255
 2ac:	93 ed       	ldi	r25, 0xD3	; 211
 2ae:	20 e3       	ldi	r18, 0x30	; 48
 2b0:	81 50       	subi	r24, 0x01	; 1
 2b2:	90 40       	sbci	r25, 0x00	; 0
 2b4:	20 40       	sbci	r18, 0x00	; 0
 2b6:	e1 f7       	brne	.-8      	; 0x2b0 <dispenser+0xd8>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <dispenser+0xe2>
 2ba:	00 00       	nop
				delay = 8000;
 2bc:	00 e4       	ldi	r16, 0x40	; 64
 2be:	1f e1       	ldi	r17, 0x1F	; 31
 2c0:	20 c0       	rjmp	.+64     	; 0x302 <dispenser+0x12a>
				_delay_ms(1000);
				}else if(count == 3){
 2c2:	c3 30       	cpi	r28, 0x03	; 3
 2c4:	d1 05       	cpc	r29, r1
 2c6:	e9 f4       	brne	.+58     	; 0x302 <dispenser+0x12a>
				fprintf(&lcd_str, "\n");
 2c8:	60 e0       	ldi	r22, 0x00	; 0
 2ca:	71 e0       	ldi	r23, 0x01	; 1
 2cc:	8a e0       	ldi	r24, 0x0A	; 10
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 51 07 	call	0xea2	; 0xea2 <fputc>
				fprintf(&lcd_str, "Creatine: 10g");
 2d4:	20 e0       	ldi	r18, 0x00	; 0
 2d6:	31 e0       	ldi	r19, 0x01	; 1
 2d8:	4d e0       	ldi	r20, 0x0D	; 13
 2da:	50 e0       	ldi	r21, 0x00	; 0
 2dc:	61 e0       	ldi	r22, 0x01	; 1
 2de:	70 e0       	ldi	r23, 0x00	; 0
 2e0:	8e ef       	ldi	r24, 0xFE	; 254
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	0e 94 8d 07 	call	0xf1a	; 0xf1a <fwrite>
 2e8:	3f ef       	ldi	r19, 0xFF	; 255
 2ea:	83 ed       	ldi	r24, 0xD3	; 211
 2ec:	90 e3       	ldi	r25, 0x30	; 48
 2ee:	31 50       	subi	r19, 0x01	; 1
 2f0:	80 40       	sbci	r24, 0x00	; 0
 2f2:	90 40       	sbci	r25, 0x00	; 0
 2f4:	e1 f7       	brne	.-8      	; 0x2ee <dispenser+0x116>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <dispenser+0x120>
 2f8:	00 00       	nop
				delay = 16000;
 2fa:	00 e8       	ldi	r16, 0x80	; 128
 2fc:	1e e3       	ldi	r17, 0x3E	; 62
				_delay_ms(1000);
				count = 0;
 2fe:	c0 e0       	ldi	r28, 0x00	; 0
 300:	d0 e0       	ldi	r29, 0x00	; 0
			}
			
			count++;
 302:	21 96       	adiw	r28, 0x01	; 1
			
		}
		
	
		if( (PINB & (1 << PINB0)) == 0 ) {
 304:	18 99       	sbic	0x03, 0	; 3
 306:	9d cf       	rjmp	.-198    	; 0x242 <dispenser+0x6a>
			if((count != 0) && (delay != 0)){
 308:	20 97       	sbiw	r28, 0x00	; 0
 30a:	09 f4       	brne	.+2      	; 0x30e <dispenser+0x136>
 30c:	9a cf       	rjmp	.-204    	; 0x242 <dispenser+0x6a>
 30e:	01 15       	cp	r16, r1
 310:	11 05       	cpc	r17, r1
 312:	09 f4       	brne	.+2      	; 0x316 <dispenser+0x13e>
 314:	96 cf       	rjmp	.-212    	; 0x242 <dispenser+0x6a>
 316:	2f ef       	ldi	r18, 0xFF	; 255
 318:	33 ed       	ldi	r19, 0xD3	; 211
 31a:	80 e3       	ldi	r24, 0x30	; 48
 31c:	21 50       	subi	r18, 0x01	; 1
 31e:	30 40       	sbci	r19, 0x00	; 0
 320:	80 40       	sbci	r24, 0x00	; 0
 322:	e1 f7       	brne	.-8      	; 0x31c <dispenser+0x144>
 324:	00 c0       	rjmp	.+0      	; 0x326 <dispenser+0x14e>
 326:	00 00       	nop
				_delay_ms(1000);
				servo_set(105,150);
 328:	66 e9       	ldi	r22, 0x96	; 150
 32a:	70 e0       	ldi	r23, 0x00	; 0
 32c:	89 e6       	ldi	r24, 0x69	; 105
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 c5 04 	call	0x98a	; 0x98a <servo_set>
				if(delay == 1600) {
 334:	00 34       	cpi	r16, 0x40	; 64
 336:	96 e0       	ldi	r25, 0x06	; 6
 338:	19 07       	cpc	r17, r25
 33a:	51 f4       	brne	.+20     	; 0x350 <dispenser+0x178>
 33c:	2f ef       	ldi	r18, 0xFF	; 255
 33e:	3f e1       	ldi	r19, 0x1F	; 31
 340:	8e e4       	ldi	r24, 0x4E	; 78
 342:	21 50       	subi	r18, 0x01	; 1
 344:	30 40       	sbci	r19, 0x00	; 0
 346:	80 40       	sbci	r24, 0x00	; 0
 348:	e1 f7       	brne	.-8      	; 0x342 <dispenser+0x16a>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <dispenser+0x174>
 34c:	00 00       	nop
 34e:	1e c0       	rjmp	.+60     	; 0x38c <dispenser+0x1b4>
					_delay_ms(DELAY1);
					} else if(delay == 8000){
 350:	00 34       	cpi	r16, 0x40	; 64
 352:	9f e1       	ldi	r25, 0x1F	; 31
 354:	19 07       	cpc	r17, r25
 356:	69 f4       	brne	.+26     	; 0x372 <dispenser+0x19a>
 358:	24 e5       	ldi	r18, 0x54	; 84
 35a:	35 e8       	ldi	r19, 0x85	; 133
 35c:	85 e4       	ldi	r24, 0x45	; 69
 35e:	91 e0       	ldi	r25, 0x01	; 1
 360:	21 50       	subi	r18, 0x01	; 1
 362:	30 40       	sbci	r19, 0x00	; 0
 364:	80 40       	sbci	r24, 0x00	; 0
 366:	90 40       	sbci	r25, 0x00	; 0
 368:	d9 f7       	brne	.-10     	; 0x360 <dispenser+0x188>
 36a:	00 c0       	rjmp	.+0      	; 0x36c <dispenser+0x194>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <dispenser+0x196>
 36e:	00 00       	nop
 370:	0d c0       	rjmp	.+26     	; 0x38c <dispenser+0x1b4>
					_delay_ms(DELAY2);
					} else if(delay == 16000){
 372:	00 38       	cpi	r16, 0x80	; 128
 374:	1e 43       	sbci	r17, 0x3E	; 62
 376:	51 f4       	brne	.+20     	; 0x38c <dispenser+0x1b4>
 378:	3a ea       	ldi	r19, 0xAA	; 170
 37a:	8a e0       	ldi	r24, 0x0A	; 10
 37c:	9b e8       	ldi	r25, 0x8B	; 139
 37e:	22 e0       	ldi	r18, 0x02	; 2
 380:	31 50       	subi	r19, 0x01	; 1
 382:	80 40       	sbci	r24, 0x00	; 0
 384:	90 40       	sbci	r25, 0x00	; 0
 386:	20 40       	sbci	r18, 0x00	; 0
 388:	d9 f7       	brne	.-10     	; 0x380 <dispenser+0x1a8>
 38a:	00 00       	nop
					_delay_ms(DELAY3);
				}
				
				servo_set(150,180);
 38c:	64 eb       	ldi	r22, 0xB4	; 180
 38e:	70 e0       	ldi	r23, 0x00	; 0
 390:	86 e9       	ldi	r24, 0x96	; 150
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	0e 94 c5 04 	call	0x98a	; 0x98a <servo_set>
				dispenser();
 398:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <dispenser>

0000039c <main>:
		_delay_ms(1000);
	}
}

int main (void) {
	init();
 39c:	0e 94 53 00 	call	0xa6	; 0xa6 <init>
	dispenser();
 3a0:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <dispenser>

000003a4 <hd44780_outnibble>:
/*
 * Send one nibble out to the LCD controller.
 */
static void hd44780_outnibble(uint8_t n, uint8_t rs)
{
  CLR(PORT, HD44780_RW);
 3a4:	9b b1       	in	r25, 0x0b	; 11
 3a6:	9f 7b       	andi	r25, 0xBF	; 191
 3a8:	9b b9       	out	0x0b, r25	; 11
  if (rs)
 3aa:	66 23       	and	r22, r22
 3ac:	21 f0       	breq	.+8      	; 0x3b6 <hd44780_outnibble+0x12>
    SET(PORT, HD44780_RS);
 3ae:	9b b1       	in	r25, 0x0b	; 11
 3b0:	90 68       	ori	r25, 0x80	; 128
 3b2:	9b b9       	out	0x0b, r25	; 11
 3b4:	03 c0       	rjmp	.+6      	; 0x3bc <hd44780_outnibble+0x18>
  else
    CLR(PORT, HD44780_RS);
 3b6:	9b b1       	in	r25, 0x0b	; 11
 3b8:	9f 77       	andi	r25, 0x7F	; 127
 3ba:	9b b9       	out	0x0b, r25	; 11
  ASSIGN(PORT, HD44780_D4, n);
 3bc:	2b b1       	in	r18, 0x0b	; 11
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	88 0f       	add	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	92 2f       	mov	r25, r18
 3c6:	91 7e       	andi	r25, 0xE1	; 225
 3c8:	89 2b       	or	r24, r25
 3ca:	8b b9       	out	0x0b, r24	; 11
static inline uint8_t hd44780_pulse_e(bool readback) __attribute__((always_inline));

static inline uint8_t hd44780_pulse_e(bool readback) {
  uint8_t x;

  SET(PORT, HD44780_E);
 3cc:	8b b1       	in	r24, 0x0b	; 11
 3ce:	80 62       	ori	r24, 0x20	; 32
 3d0:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3d2:	82 e0       	ldi	r24, 0x02	; 2
 3d4:	8a 95       	dec	r24
 3d6:	f1 f7       	brne	.-4      	; 0x3d4 <hd44780_outnibble+0x30>
 3d8:	00 c0       	rjmp	.+0      	; 0x3da <hd44780_outnibble+0x36>
#endif
  if (readback)
    x = READ(PIN, HD44780_D4);
  else
    x = 0;
  CLR(PORT, HD44780_E);
 3da:	8b b1       	in	r24, 0x0b	; 11
 3dc:	8f 7d       	andi	r24, 0xDF	; 223
 3de:	8b b9       	out	0x0b, r24	; 11
 3e0:	08 95       	ret

000003e2 <hd44780_innibble>:
 */
static uint8_t hd44780_innibble(uint8_t rs)
{
  uint8_t x;

  SET(PORT, HD44780_RW);
 3e2:	9b b1       	in	r25, 0x0b	; 11
 3e4:	90 64       	ori	r25, 0x40	; 64
 3e6:	9b b9       	out	0x0b, r25	; 11
  ASSIGN(DDR, HD44780_D4, 0x00);
 3e8:	9a b1       	in	r25, 0x0a	; 10
 3ea:	91 7e       	andi	r25, 0xE1	; 225
 3ec:	9a b9       	out	0x0a, r25	; 10
  if (rs)
 3ee:	88 23       	and	r24, r24
 3f0:	21 f0       	breq	.+8      	; 0x3fa <hd44780_innibble+0x18>
    SET(PORT, HD44780_RS);
 3f2:	8b b1       	in	r24, 0x0b	; 11
 3f4:	80 68       	ori	r24, 0x80	; 128
 3f6:	8b b9       	out	0x0b, r24	; 11
 3f8:	03 c0       	rjmp	.+6      	; 0x400 <__EEPROM_REGION_LENGTH__>
  else
    CLR(PORT, HD44780_RS);
 3fa:	8b b1       	in	r24, 0x0b	; 11
 3fc:	8f 77       	andi	r24, 0x7F	; 127
 3fe:	8b b9       	out	0x0b, r24	; 11
static inline uint8_t hd44780_pulse_e(bool readback) __attribute__((always_inline));

static inline uint8_t hd44780_pulse_e(bool readback) {
  uint8_t x;

  SET(PORT, HD44780_E);
 400:	8b b1       	in	r24, 0x0b	; 11
 402:	80 62       	ori	r24, 0x20	; 32
 404:	8b b9       	out	0x0b, r24	; 11
 406:	82 e0       	ldi	r24, 0x02	; 2
 408:	8a 95       	dec	r24
 40a:	f1 f7       	brne	.-4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 40c:	00 c0       	rjmp	.+0      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
  __asm__ volatile("nop");
#    endif /* F_CPU > 2000000UL */
#  endif /* F_CPU > 1000000UL */
#endif
  if (readback)
    x = READ(PIN, HD44780_D4);
 40e:	89 b1       	in	r24, 0x09	; 9
 410:	8e 71       	andi	r24, 0x1E	; 30
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	95 95       	asr	r25
 416:	87 95       	ror	r24
  else
    x = 0;
  CLR(PORT, HD44780_E);
 418:	9b b1       	in	r25, 0x0b	; 11
 41a:	9f 7d       	andi	r25, 0xDF	; 223
 41c:	9b b9       	out	0x0b, r25	; 11
  if (rs)
    SET(PORT, HD44780_RS);
  else
    CLR(PORT, HD44780_RS);
  x = hd44780_pulse_e(true);
  ASSIGN(DDR, HD44780_D4, 0x0F);
 41e:	9a b1       	in	r25, 0x0a	; 10
 420:	9e 61       	ori	r25, 0x1E	; 30
 422:	9a b9       	out	0x0a, r25	; 10
  CLR(PORT, HD44780_RW);
 424:	9b b1       	in	r25, 0x0b	; 11
 426:	9f 7b       	andi	r25, 0xBF	; 191
 428:	9b b9       	out	0x0b, r25	; 11

  return x;
}
 42a:	08 95       	ret

0000042c <hd44780_outbyte>:
/*
 * Send one byte to the LCD controller.  As we are in 4-bit mode, we
 * have to send two nibbles.
 */
void hd44780_outbyte(uint8_t b, uint8_t rs)
{
 42c:	cf 93       	push	r28
 42e:	df 93       	push	r29
 430:	c8 2f       	mov	r28, r24
 432:	d6 2f       	mov	r29, r22
  hd44780_outnibble(b >> 4, rs);
 434:	82 95       	swap	r24
 436:	8f 70       	andi	r24, 0x0F	; 15
 438:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <hd44780_outnibble>
  hd44780_outnibble(b & 0xf, rs);
 43c:	6d 2f       	mov	r22, r29
 43e:	8c 2f       	mov	r24, r28
 440:	8f 70       	andi	r24, 0x0F	; 15
 442:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <hd44780_outnibble>
}
 446:	df 91       	pop	r29
 448:	cf 91       	pop	r28
 44a:	08 95       	ret

0000044c <hd44780_inbyte>:

/*
 * Read one byte (i.e. two nibbles) from the LCD controller.
 */
uint8_t hd44780_inbyte(uint8_t rs)
{
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29
 450:	c8 2f       	mov	r28, r24
  uint8_t x;

  x = hd44780_innibble(rs) << 4;
 452:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <hd44780_innibble>
 456:	d8 2f       	mov	r29, r24
 458:	d2 95       	swap	r29
 45a:	d0 7f       	andi	r29, 0xF0	; 240
  x |= hd44780_innibble(rs);
 45c:	8c 2f       	mov	r24, r28
 45e:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <hd44780_innibble>

  return x;
}
 462:	8d 2b       	or	r24, r29
 464:	df 91       	pop	r29
 466:	cf 91       	pop	r28
 468:	08 95       	ret

0000046a <hd44780_wait_ready>:
 * Wait until the busy flag is cleared.
 */
void hd44780_wait_ready(bool longwait)
{
#if USE_BUSY_BIT
  while (hd44780_incmd() & HD44780_BUSYFLAG) ;
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	0e 94 26 02 	call	0x44c	; 0x44c <hd44780_inbyte>
 470:	88 23       	and	r24, r24
 472:	dc f3       	brlt	.-10     	; 0x46a <hd44780_wait_ready>
  if (longwait)
    _delay_ms(1.52);
  else
    _delay_us(37);
#endif
}
 474:	08 95       	ret

00000476 <hd44780_init>:
{
  //SET(DDR, HD44780_RS);
  //SET(DDR, HD44780_RW);
  //SET(DDR, HD44780_E);
  //ASSIGN(DDR, HD44780_D4, 0x0F);
  DDRD |= 0b11111110;
 476:	8a b1       	in	r24, 0x0a	; 10
 478:	8e 6f       	ori	r24, 0xFE	; 254
 47a:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 47c:	8f e5       	ldi	r24, 0x5F	; 95
 47e:	9a ee       	ldi	r25, 0xEA	; 234
 480:	01 97       	sbiw	r24, 0x01	; 1
 482:	f1 f7       	brne	.-4      	; 0x480 <hd44780_init+0xa>
 484:	00 c0       	rjmp	.+0      	; 0x486 <hd44780_init+0x10>
 486:	00 00       	nop

  _delay_ms(15);		/* 40 ms needed for Vcc = 2.7 V */
  hd44780_outnibble(HD44780_FNSET(1, 0, 0) >> 4, 0);
 488:	60 e0       	ldi	r22, 0x00	; 0
 48a:	83 e0       	ldi	r24, 0x03	; 3
 48c:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <hd44780_outnibble>
 490:	8f e0       	ldi	r24, 0x0F	; 15
 492:	90 e4       	ldi	r25, 0x40	; 64
 494:	01 97       	sbiw	r24, 0x01	; 1
 496:	f1 f7       	brne	.-4      	; 0x494 <hd44780_init+0x1e>
 498:	00 c0       	rjmp	.+0      	; 0x49a <hd44780_init+0x24>
 49a:	00 00       	nop
  _delay_ms(4.1);
  hd44780_outnibble(HD44780_FNSET(1, 0, 0) >> 4, 0);
 49c:	60 e0       	ldi	r22, 0x00	; 0
 49e:	83 e0       	ldi	r24, 0x03	; 3
 4a0:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <hd44780_outnibble>
 4a4:	8f e8       	ldi	r24, 0x8F	; 143
 4a6:	91 e0       	ldi	r25, 0x01	; 1
 4a8:	01 97       	sbiw	r24, 0x01	; 1
 4aa:	f1 f7       	brne	.-4      	; 0x4a8 <hd44780_init+0x32>
 4ac:	00 c0       	rjmp	.+0      	; 0x4ae <hd44780_init+0x38>
 4ae:	00 00       	nop
  _delay_ms(0.1);
  hd44780_outnibble(HD44780_FNSET(1, 0, 0) >> 4, 0);
 4b0:	60 e0       	ldi	r22, 0x00	; 0
 4b2:	83 e0       	ldi	r24, 0x03	; 3
 4b4:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <hd44780_outnibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4b8:	95 ec       	ldi	r25, 0xC5	; 197
 4ba:	9a 95       	dec	r25
 4bc:	f1 f7       	brne	.-4      	; 0x4ba <hd44780_init+0x44>
 4be:	00 00       	nop
  _delay_us(37);

  hd44780_outnibble(HD44780_FNSET(0, 1, 0) >> 4, 0);
 4c0:	60 e0       	ldi	r22, 0x00	; 0
 4c2:	82 e0       	ldi	r24, 0x02	; 2
 4c4:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <hd44780_outnibble>
  hd44780_wait_ready(false);
 4c8:	80 e0       	ldi	r24, 0x00	; 0
 4ca:	0e 94 35 02 	call	0x46a	; 0x46a <hd44780_wait_ready>
  hd44780_outcmd(HD44780_FNSET(0, 1, 0));
 4ce:	60 e0       	ldi	r22, 0x00	; 0
 4d0:	88 e2       	ldi	r24, 0x28	; 40
 4d2:	0e 94 16 02 	call	0x42c	; 0x42c <hd44780_outbyte>
  hd44780_wait_ready(false);
 4d6:	80 e0       	ldi	r24, 0x00	; 0
 4d8:	0e 94 35 02 	call	0x46a	; 0x46a <hd44780_wait_ready>
  hd44780_outcmd(HD44780_DISPCTL(0, 0, 0));
 4dc:	60 e0       	ldi	r22, 0x00	; 0
 4de:	88 e0       	ldi	r24, 0x08	; 8
 4e0:	0e 94 16 02 	call	0x42c	; 0x42c <hd44780_outbyte>
  hd44780_wait_ready(false);
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	0e 94 35 02 	call	0x46a	; 0x46a <hd44780_wait_ready>
 4ea:	08 95       	ret

000004ec <lcd_init>:
 * Setup the LCD controller.  First, call the hardware initialization
 * function, then adjust the display attributes we want.
 */
void lcd_init(void) {

  hd44780_init();
 4ec:	0e 94 3b 02 	call	0x476	; 0x476 <hd44780_init>

  /*
   * Clear the display.
   */
  hd44780_outcmd(HD44780_CLR);
 4f0:	60 e0       	ldi	r22, 0x00	; 0
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	0e 94 16 02 	call	0x42c	; 0x42c <hd44780_outbyte>
  hd44780_wait_ready(true);
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	0e 94 35 02 	call	0x46a	; 0x46a <hd44780_wait_ready>

  /*
   * Entry mode: auto-increment address counter, no display shift in
   * effect.
   */
  hd44780_outcmd(HD44780_ENTMODE(1, 0));
 4fe:	60 e0       	ldi	r22, 0x00	; 0
 500:	86 e0       	ldi	r24, 0x06	; 6
 502:	0e 94 16 02 	call	0x42c	; 0x42c <hd44780_outbyte>
  hd44780_wait_ready(false);
 506:	80 e0       	ldi	r24, 0x00	; 0
 508:	0e 94 35 02 	call	0x46a	; 0x46a <hd44780_wait_ready>

  /*
   * Enable display, activate non-blinking cursor.
   */
  hd44780_outcmd(HD44780_DISPCTL(1, 1, 0));
 50c:	60 e0       	ldi	r22, 0x00	; 0
 50e:	8e e0       	ldi	r24, 0x0E	; 14
 510:	0e 94 16 02 	call	0x42c	; 0x42c <hd44780_outbyte>
  hd44780_wait_ready(false);
 514:	80 e0       	ldi	r24, 0x00	; 0
 516:	0e 94 35 02 	call	0x46a	; 0x46a <hd44780_wait_ready>
 51a:	08 95       	ret

0000051c <lcd_putchar>:

/*
 * Send character c to the LCD display.  After a '\n' has been seen,
 * the next character will first clear the display.
 */
int lcd_putchar(char c, FILE *unused){
 51c:	cf 93       	push	r28
 51e:	c8 2f       	mov	r28, r24
  static bool nl_seen;

  if (nl_seen && c != '\n')
 520:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
 524:	88 23       	and	r24, r24
 526:	c9 f0       	breq	.+50     	; 0x55a <lcd_putchar+0x3e>
 528:	ca 30       	cpi	r28, 0x0A	; 10
 52a:	b9 f0       	breq	.+46     	; 0x55a <lcd_putchar+0x3e>
    {
      /*
       * First character after newline, clear display and home cursor.
       */
      hd44780_wait_ready(false);
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	0e 94 35 02 	call	0x46a	; 0x46a <hd44780_wait_ready>
      hd44780_outcmd(HD44780_CLR);
 532:	60 e0       	ldi	r22, 0x00	; 0
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	0e 94 16 02 	call	0x42c	; 0x42c <hd44780_outbyte>
      hd44780_wait_ready(false);
 53a:	80 e0       	ldi	r24, 0x00	; 0
 53c:	0e 94 35 02 	call	0x46a	; 0x46a <hd44780_wait_ready>
      hd44780_outcmd(HD44780_HOME);
 540:	60 e0       	ldi	r22, 0x00	; 0
 542:	82 e0       	ldi	r24, 0x02	; 2
 544:	0e 94 16 02 	call	0x42c	; 0x42c <hd44780_outbyte>
      hd44780_wait_ready(true);
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	0e 94 35 02 	call	0x46a	; 0x46a <hd44780_wait_ready>
      hd44780_outcmd(HD44780_DDADDR(0));
 54e:	60 e0       	ldi	r22, 0x00	; 0
 550:	80 e8       	ldi	r24, 0x80	; 128
 552:	0e 94 16 02 	call	0x42c	; 0x42c <hd44780_outbyte>

      nl_seen = false;
 556:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <__data_end>
    }
  if (c == '\n')
 55a:	ca 30       	cpi	r28, 0x0A	; 10
 55c:	21 f4       	brne	.+8      	; 0x566 <lcd_putchar+0x4a>
    {
      nl_seen = true;
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
 564:	07 c0       	rjmp	.+14     	; 0x574 <lcd_putchar+0x58>
    }
  else
    {
      hd44780_wait_ready(false);
 566:	80 e0       	ldi	r24, 0x00	; 0
 568:	0e 94 35 02 	call	0x46a	; 0x46a <hd44780_wait_ready>
      hd44780_outdata(c);
 56c:	61 e0       	ldi	r22, 0x01	; 1
 56e:	8c 2f       	mov	r24, r28
 570:	0e 94 16 02 	call	0x42c	; 0x42c <hd44780_outbyte>
    }

  return 0;
 574:	80 e0       	ldi	r24, 0x00	; 0
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	cf 91       	pop	r28
 57a:	08 95       	ret

0000057c <mfrc522_write>:
		mfrc522_write(TxControlReg,byte|0x03);
	}
}

void mfrc522_write(uint8_t reg, uint8_t data)
{
 57c:	cf 93       	push	r28
 57e:	c6 2f       	mov	r28, r22
	ENABLE_CHIP();
 580:	95 b1       	in	r25, 0x05	; 5
 582:	9b 7f       	andi	r25, 0xFB	; 251
 584:	95 b9       	out	0x05, r25	; 5
	spi_transmit((reg<<1)&0x7E);
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	88 0f       	add	r24, r24
 58a:	99 1f       	adc	r25, r25
 58c:	8e 77       	andi	r24, 0x7E	; 126
 58e:	0e 94 84 04 	call	0x908	; 0x908 <spi_transmit>
	spi_transmit(data);
 592:	8c 2f       	mov	r24, r28
 594:	0e 94 84 04 	call	0x908	; 0x908 <spi_transmit>
	DISABLE_CHIP();
 598:	85 b1       	in	r24, 0x05	; 5
 59a:	84 60       	ori	r24, 0x04	; 4
 59c:	85 b9       	out	0x05, r24	; 5
}
 59e:	cf 91       	pop	r28
 5a0:	08 95       	ret

000005a2 <mfrc522_read>:

uint8_t mfrc522_read(uint8_t reg)
{
	uint8_t data;	
	ENABLE_CHIP();
 5a2:	95 b1       	in	r25, 0x05	; 5
 5a4:	9b 7f       	andi	r25, 0xFB	; 251
 5a6:	95 b9       	out	0x05, r25	; 5
	spi_transmit(((reg<<1)&0x7E)|0x80);
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	88 0f       	add	r24, r24
 5ac:	99 1f       	adc	r25, r25
 5ae:	8e 77       	andi	r24, 0x7E	; 126
 5b0:	80 68       	ori	r24, 0x80	; 128
 5b2:	0e 94 84 04 	call	0x908	; 0x908 <spi_transmit>
	data = spi_transmit(0x00);
 5b6:	80 e0       	ldi	r24, 0x00	; 0
 5b8:	0e 94 84 04 	call	0x908	; 0x908 <spi_transmit>
	DISABLE_CHIP();
 5bc:	95 b1       	in	r25, 0x05	; 5
 5be:	94 60       	ori	r25, 0x04	; 4
 5c0:	95 b9       	out	0x05, r25	; 5
	return data;
}
 5c2:	08 95       	ret

000005c4 <mfrc522_reset>:

void mfrc522_reset()
{
	mfrc522_write(CommandReg, SoftReset_CMD);
 5c4:	6f e0       	ldi	r22, 0x0F	; 15
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	0e 94 be 02 	call	0x57c	; 0x57c <mfrc522_write>
 5cc:	08 95       	ret

000005ce <mfrc522_init>:
#include "spi.h"

void mfrc522_init()
{
	uint8_t byte;
	mfrc522_reset();
 5ce:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <mfrc522_reset>
	
	mfrc522_write(TModeReg, 0x8D);
 5d2:	6d e8       	ldi	r22, 0x8D	; 141
 5d4:	8a e2       	ldi	r24, 0x2A	; 42
 5d6:	0e 94 be 02 	call	0x57c	; 0x57c <mfrc522_write>
    mfrc522_write(TPrescalerReg, 0x3E);
 5da:	6e e3       	ldi	r22, 0x3E	; 62
 5dc:	8b e2       	ldi	r24, 0x2B	; 43
 5de:	0e 94 be 02 	call	0x57c	; 0x57c <mfrc522_write>
    mfrc522_write(TReloadReg_1, 30);   
 5e2:	6e e1       	ldi	r22, 0x1E	; 30
 5e4:	8c e2       	ldi	r24, 0x2C	; 44
 5e6:	0e 94 be 02 	call	0x57c	; 0x57c <mfrc522_write>
    mfrc522_write(TReloadReg_2, 0);	
 5ea:	60 e0       	ldi	r22, 0x00	; 0
 5ec:	8d e2       	ldi	r24, 0x2D	; 45
 5ee:	0e 94 be 02 	call	0x57c	; 0x57c <mfrc522_write>
	mfrc522_write(TxASKReg, 0x40);	
 5f2:	60 e4       	ldi	r22, 0x40	; 64
 5f4:	85 e1       	ldi	r24, 0x15	; 21
 5f6:	0e 94 be 02 	call	0x57c	; 0x57c <mfrc522_write>
	mfrc522_write(ModeReg, 0x3D);
 5fa:	6d e3       	ldi	r22, 0x3D	; 61
 5fc:	81 e1       	ldi	r24, 0x11	; 17
 5fe:	0e 94 be 02 	call	0x57c	; 0x57c <mfrc522_write>
	
	byte = mfrc522_read(TxControlReg);
 602:	84 e1       	ldi	r24, 0x14	; 20
 604:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <mfrc522_read>
	if(!(byte&0x03))
 608:	98 2f       	mov	r25, r24
 60a:	93 70       	andi	r25, 0x03	; 3
 60c:	29 f4       	brne	.+10     	; 0x618 <mfrc522_init+0x4a>
	{
		mfrc522_write(TxControlReg,byte|0x03);
 60e:	68 2f       	mov	r22, r24
 610:	63 60       	ori	r22, 0x03	; 3
 612:	84 e1       	ldi	r24, 0x14	; 20
 614:	0e 94 be 02 	call	0x57c	; 0x57c <mfrc522_write>
 618:	08 95       	ret

0000061a <mfrc522_to_card>:
   
	return status;
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
 61a:	4f 92       	push	r4
 61c:	5f 92       	push	r5
 61e:	6f 92       	push	r6
 620:	7f 92       	push	r7
 622:	8f 92       	push	r8
 624:	9f 92       	push	r9
 626:	af 92       	push	r10
 628:	bf 92       	push	r11
 62a:	cf 92       	push	r12
 62c:	df 92       	push	r13
 62e:	ef 92       	push	r14
 630:	ff 92       	push	r15
 632:	0f 93       	push	r16
 634:	1f 93       	push	r17
 636:	cf 93       	push	r28
 638:	df 93       	push	r29
 63a:	d8 2f       	mov	r29, r24
 63c:	7b 01       	movw	r14, r22
 63e:	c4 2f       	mov	r28, r20
 640:	59 01       	movw	r10, r18
    uint8_t lastBits;
    uint8_t n;
    uint8_t	tmp;
    uint32_t i;

    switch (cmd)
 642:	8c 30       	cpi	r24, 0x0C	; 12
 644:	29 f0       	breq	.+10     	; 0x650 <mfrc522_to_card+0x36>
 646:	8e 30       	cpi	r24, 0x0E	; 14
 648:	61 f0       	breq	.+24     	; 0x662 <mfrc522_to_card+0x48>

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
    uint8_t irqEn = 0x00;
    uint8_t waitIRq = 0x00;
 64a:	91 2c       	mov	r9, r1
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
    uint8_t irqEn = 0x00;
 64c:	81 2c       	mov	r8, r1
 64e:	10 c0       	rjmp	.+32     	; 0x670 <mfrc522_to_card+0x56>
			break;
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
			waitIRq = 0x30;
 650:	0f 2e       	mov	r0, r31
 652:	f0 e3       	ldi	r31, 0x30	; 48
 654:	9f 2e       	mov	r9, r31
 656:	f0 2d       	mov	r31, r0
			waitIRq = 0x10;
			break;
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
 658:	0f 2e       	mov	r0, r31
 65a:	f7 e7       	ldi	r31, 0x77	; 119
 65c:	8f 2e       	mov	r8, r31
 65e:	f0 2d       	mov	r31, r0
			waitIRq = 0x30;
			break;
 660:	07 c0       	rjmp	.+14     	; 0x670 <mfrc522_to_card+0x56>
    switch (cmd)
    {
        case MFAuthent_CMD:		//Certification cards close
		{
			irqEn = 0x12;
			waitIRq = 0x10;
 662:	68 94       	set
 664:	99 24       	eor	r9, r9
 666:	94 f8       	bld	r9, 4

    switch (cmd)
    {
        case MFAuthent_CMD:		//Certification cards close
		{
			irqEn = 0x12;
 668:	0f 2e       	mov	r0, r31
 66a:	f2 e1       	ldi	r31, 0x12	; 18
 66c:	8f 2e       	mov	r8, r31
 66e:	f0 2d       	mov	r31, r0
		default:
			break;
    }
   
    //mfrc522_write(ComIEnReg, irqEn|0x80);	//Interrupt request
    n=mfrc522_read(ComIrqReg);
 670:	84 e0       	ldi	r24, 0x04	; 4
 672:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <mfrc522_read>
    mfrc522_write(ComIrqReg,n&(~0x80));//clear all interrupt bits
 676:	68 2f       	mov	r22, r24
 678:	6f 77       	andi	r22, 0x7F	; 127
 67a:	84 e0       	ldi	r24, 0x04	; 4
 67c:	0e 94 be 02 	call	0x57c	; 0x57c <mfrc522_write>
    n=mfrc522_read(FIFOLevelReg);
 680:	8a e0       	ldi	r24, 0x0A	; 10
 682:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <mfrc522_read>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
 686:	68 2f       	mov	r22, r24
 688:	60 68       	ori	r22, 0x80	; 128
 68a:	8a e0       	ldi	r24, 0x0A	; 10
 68c:	0e 94 be 02 	call	0x57c	; 0x57c <mfrc522_write>
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???
 690:	60 e0       	ldi	r22, 0x00	; 0
 692:	81 e0       	ldi	r24, 0x01	; 1
 694:	0e 94 be 02 	call	0x57c	; 0x57c <mfrc522_write>

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
 698:	41 2c       	mov	r4, r1
 69a:	51 2c       	mov	r5, r1
 69c:	32 01       	movw	r6, r4
 69e:	0c c0       	rjmp	.+24     	; 0x6b8 <mfrc522_to_card+0x9e>
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
 6a0:	f7 01       	movw	r30, r14
 6a2:	e4 0d       	add	r30, r4
 6a4:	f5 1d       	adc	r31, r5
 6a6:	60 81       	ld	r22, Z
 6a8:	89 e0       	ldi	r24, 0x09	; 9
 6aa:	0e 94 be 02 	call	0x57c	; 0x57c <mfrc522_write>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
 6ae:	8f ef       	ldi	r24, 0xFF	; 255
 6b0:	48 1a       	sub	r4, r24
 6b2:	58 0a       	sbc	r5, r24
 6b4:	68 0a       	sbc	r6, r24
 6b6:	78 0a       	sbc	r7, r24
 6b8:	8c 2f       	mov	r24, r28
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	a0 e0       	ldi	r26, 0x00	; 0
 6be:	b0 e0       	ldi	r27, 0x00	; 0
 6c0:	48 16       	cp	r4, r24
 6c2:	59 06       	cpc	r5, r25
 6c4:	6a 06       	cpc	r6, r26
 6c6:	7b 06       	cpc	r7, r27
 6c8:	58 f3       	brcs	.-42     	; 0x6a0 <mfrc522_to_card+0x86>
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
	}

	//Execute the cmd
	mfrc522_write(CommandReg, cmd);
 6ca:	6d 2f       	mov	r22, r29
 6cc:	81 e0       	ldi	r24, 0x01	; 1
 6ce:	0e 94 be 02 	call	0x57c	; 0x57c <mfrc522_write>
    if (cmd == Transceive_CMD)
 6d2:	dc 30       	cpi	r29, 0x0C	; 12
 6d4:	41 f4       	brne	.+16     	; 0x6e6 <mfrc522_to_card+0xcc>
    {    
		n=mfrc522_read(BitFramingReg);
 6d6:	8d e0       	ldi	r24, 0x0D	; 13
 6d8:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <mfrc522_read>
		mfrc522_write(BitFramingReg,n|0x80);  
 6dc:	68 2f       	mov	r22, r24
 6de:	60 68       	ori	r22, 0x80	; 128
 6e0:	8d e0       	ldi	r24, 0x0D	; 13
 6e2:	0e 94 be 02 	call	0x57c	; 0x57c <mfrc522_write>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
 6e6:	0f 2e       	mov	r0, r31
 6e8:	f0 ed       	ldi	r31, 0xD0	; 208
 6ea:	cf 2e       	mov	r12, r31
 6ec:	f7 e0       	ldi	r31, 0x07	; 7
 6ee:	df 2e       	mov	r13, r31
 6f0:	e1 2c       	mov	r14, r1
 6f2:	f1 2c       	mov	r15, r1
 6f4:	f0 2d       	mov	r31, r0
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = mfrc522_read(ComIrqReg);
 6f6:	84 e0       	ldi	r24, 0x04	; 4
 6f8:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <mfrc522_read>
 6fc:	c8 2f       	mov	r28, r24
        i--;
 6fe:	e1 e0       	ldi	r30, 0x01	; 1
 700:	ce 1a       	sub	r12, r30
 702:	d1 08       	sbc	r13, r1
 704:	e1 08       	sbc	r14, r1
 706:	f1 08       	sbc	r15, r1
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 708:	29 f0       	breq	.+10     	; 0x714 <mfrc522_to_card+0xfa>
 70a:	80 fd       	sbrc	r24, 0
 70c:	03 c0       	rjmp	.+6      	; 0x714 <mfrc522_to_card+0xfa>
 70e:	89 2d       	mov	r24, r9
 710:	8c 23       	and	r24, r28
 712:	89 f3       	breq	.-30     	; 0x6f6 <mfrc522_to_card+0xdc>

	tmp=mfrc522_read(BitFramingReg);
 714:	8d e0       	ldi	r24, 0x0D	; 13
 716:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <mfrc522_read>
	mfrc522_write(BitFramingReg,tmp&(~0x80));
 71a:	68 2f       	mov	r22, r24
 71c:	6f 77       	andi	r22, 0x7F	; 127
 71e:	8d e0       	ldi	r24, 0x0D	; 13
 720:	0e 94 be 02 	call	0x57c	; 0x57c <mfrc522_write>
	
    if (i != 0)
 724:	cd 28       	or	r12, r13
 726:	ce 28       	or	r12, r14
 728:	cf 28       	or	r12, r15
 72a:	09 f4       	brne	.+2      	; 0x72e <mfrc522_to_card+0x114>
 72c:	60 c0       	rjmp	.+192    	; 0x7ee <mfrc522_to_card+0x1d4>
    {    
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 72e:	86 e0       	ldi	r24, 0x06	; 6
 730:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <mfrc522_read>
 734:	8b 71       	andi	r24, 0x1B	; 27
 736:	09 f0       	breq	.+2      	; 0x73a <mfrc522_to_card+0x120>
 738:	5c c0       	rjmp	.+184    	; 0x7f2 <mfrc522_to_card+0x1d8>
        {
            status = CARD_FOUND;
            if (n & irqEn & 0x01)
 73a:	c8 21       	and	r28, r8
 73c:	c0 fd       	sbrc	r28, 0
 73e:	02 c0       	rjmp	.+4      	; 0x744 <mfrc522_to_card+0x12a>
	
    if (i != 0)
    {    
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
        {
            status = CARD_FOUND;
 740:	c1 e0       	ldi	r28, 0x01	; 1
 742:	01 c0       	rjmp	.+2      	; 0x746 <mfrc522_to_card+0x12c>
            if (n & irqEn & 0x01)
            {   
				status = CARD_NOT_FOUND;			//??   
 744:	c2 e0       	ldi	r28, 0x02	; 2
			}

            if (cmd == Transceive_CMD)
 746:	dc 30       	cpi	r29, 0x0C	; 12
 748:	09 f0       	breq	.+2      	; 0x74c <mfrc522_to_card+0x132>
 74a:	54 c0       	rjmp	.+168    	; 0x7f4 <mfrc522_to_card+0x1da>
            {
               	n = mfrc522_read(FIFOLevelReg);
 74c:	8a e0       	ldi	r24, 0x0A	; 10
 74e:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <mfrc522_read>
 752:	d8 2f       	mov	r29, r24
              	lastBits = mfrc522_read(ControlReg) & 0x07;
 754:	8c e0       	ldi	r24, 0x0C	; 12
 756:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <mfrc522_read>
 75a:	28 2f       	mov	r18, r24
 75c:	27 70       	andi	r18, 0x07	; 7
                if (lastBits)
 75e:	a9 f0       	breq	.+42     	; 0x78a <mfrc522_to_card+0x170>
                {   
					*back_data_len = (n-1)*8 + lastBits;   
 760:	8d 2f       	mov	r24, r29
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	01 97       	sbiw	r24, 0x01	; 1
 766:	88 0f       	add	r24, r24
 768:	99 1f       	adc	r25, r25
 76a:	88 0f       	add	r24, r24
 76c:	99 1f       	adc	r25, r25
 76e:	88 0f       	add	r24, r24
 770:	99 1f       	adc	r25, r25
 772:	82 0f       	add	r24, r18
 774:	91 1d       	adc	r25, r1
 776:	09 2e       	mov	r0, r25
 778:	00 0c       	add	r0, r0
 77a:	aa 0b       	sbc	r26, r26
 77c:	bb 0b       	sbc	r27, r27
 77e:	f8 01       	movw	r30, r16
 780:	80 83       	st	Z, r24
 782:	91 83       	std	Z+1, r25	; 0x01
 784:	a2 83       	std	Z+2, r26	; 0x02
 786:	b3 83       	std	Z+3, r27	; 0x03
 788:	11 c0       	rjmp	.+34     	; 0x7ac <mfrc522_to_card+0x192>
				}
                else
                {   
					*back_data_len = n*8;   
 78a:	8d 2f       	mov	r24, r29
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	88 0f       	add	r24, r24
 790:	99 1f       	adc	r25, r25
 792:	88 0f       	add	r24, r24
 794:	99 1f       	adc	r25, r25
 796:	88 0f       	add	r24, r24
 798:	99 1f       	adc	r25, r25
 79a:	09 2e       	mov	r0, r25
 79c:	00 0c       	add	r0, r0
 79e:	aa 0b       	sbc	r26, r26
 7a0:	bb 0b       	sbc	r27, r27
 7a2:	f8 01       	movw	r30, r16
 7a4:	80 83       	st	Z, r24
 7a6:	91 83       	std	Z+1, r25	; 0x01
 7a8:	a2 83       	std	Z+2, r26	; 0x02
 7aa:	b3 83       	std	Z+3, r27	; 0x03
				}

                if (n == 0)
 7ac:	d1 11       	cpse	r29, r1
 7ae:	01 c0       	rjmp	.+2      	; 0x7b2 <mfrc522_to_card+0x198>
                {   
					n = 1;    
 7b0:	d1 e0       	ldi	r29, 0x01	; 1
				}
                if (n > MAX_LEN)
 7b2:	d1 31       	cpi	r29, 0x11	; 17
 7b4:	08 f0       	brcs	.+2      	; 0x7b8 <mfrc522_to_card+0x19e>
                {   
					n = MAX_LEN;   
 7b6:	d0 e1       	ldi	r29, 0x10	; 16
				}
				
				//Reading the received data in FIFO
                for (i=0; i<n; i++)
 7b8:	c1 2c       	mov	r12, r1
 7ba:	d1 2c       	mov	r13, r1
 7bc:	76 01       	movw	r14, r12
 7be:	0d c0       	rjmp	.+26     	; 0x7da <mfrc522_to_card+0x1c0>
                {   
					back_data[i] = mfrc522_read(FIFODataReg);    
 7c0:	85 01       	movw	r16, r10
 7c2:	0c 0d       	add	r16, r12
 7c4:	1d 1d       	adc	r17, r13
 7c6:	89 e0       	ldi	r24, 0x09	; 9
 7c8:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <mfrc522_read>
 7cc:	f8 01       	movw	r30, r16
 7ce:	80 83       	st	Z, r24
                {   
					n = MAX_LEN;   
				}
				
				//Reading the received data in FIFO
                for (i=0; i<n; i++)
 7d0:	ff ef       	ldi	r31, 0xFF	; 255
 7d2:	cf 1a       	sub	r12, r31
 7d4:	df 0a       	sbc	r13, r31
 7d6:	ef 0a       	sbc	r14, r31
 7d8:	ff 0a       	sbc	r15, r31
 7da:	8d 2f       	mov	r24, r29
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	a0 e0       	ldi	r26, 0x00	; 0
 7e0:	b0 e0       	ldi	r27, 0x00	; 0
 7e2:	c8 16       	cp	r12, r24
 7e4:	d9 06       	cpc	r13, r25
 7e6:	ea 06       	cpc	r14, r26
 7e8:	fb 06       	cpc	r15, r27
 7ea:	50 f3       	brcs	.-44     	; 0x7c0 <mfrc522_to_card+0x1a6>
 7ec:	03 c0       	rjmp	.+6      	; 0x7f4 <mfrc522_to_card+0x1da>
	return status;
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
 7ee:	c3 e0       	ldi	r28, 0x03	; 3
 7f0:	01 c0       	rjmp	.+2      	; 0x7f4 <mfrc522_to_card+0x1da>
				}
            }
        }
        else
        {   
			status = ERROR;  
 7f2:	c3 e0       	ldi	r28, 0x03	; 3
	
    //SetBitMask(ControlReg,0x80);           //timer stops
    //mfrc522_write(cmdReg, PCD_IDLE); 

    return status;
}
 7f4:	8c 2f       	mov	r24, r28
 7f6:	df 91       	pop	r29
 7f8:	cf 91       	pop	r28
 7fa:	1f 91       	pop	r17
 7fc:	0f 91       	pop	r16
 7fe:	ff 90       	pop	r15
 800:	ef 90       	pop	r14
 802:	df 90       	pop	r13
 804:	cf 90       	pop	r12
 806:	bf 90       	pop	r11
 808:	af 90       	pop	r10
 80a:	9f 90       	pop	r9
 80c:	8f 90       	pop	r8
 80e:	7f 90       	pop	r7
 810:	6f 90       	pop	r6
 812:	5f 90       	pop	r5
 814:	4f 90       	pop	r4
 816:	08 95       	ret

00000818 <mfrc522_request>:
{
	mfrc522_write(CommandReg, SoftReset_CMD);
}

uint8_t	mfrc522_request(uint8_t req_mode, uint8_t * tag_type)
{
 818:	ef 92       	push	r14
 81a:	ff 92       	push	r15
 81c:	0f 93       	push	r16
 81e:	1f 93       	push	r17
 820:	cf 93       	push	r28
 822:	df 93       	push	r29
 824:	00 d0       	rcall	.+0      	; 0x826 <mfrc522_request+0xe>
 826:	00 d0       	rcall	.+0      	; 0x828 <mfrc522_request+0x10>
 828:	cd b7       	in	r28, 0x3d	; 61
 82a:	de b7       	in	r29, 0x3e	; 62
 82c:	18 2f       	mov	r17, r24
 82e:	7b 01       	movw	r14, r22
	uint8_t  status;  
	uint32_t backBits;//The received data bits

	mfrc522_write(BitFramingReg, 0x07);//TxLastBists = BitFramingReg[2..0]	???
 830:	67 e0       	ldi	r22, 0x07	; 7
 832:	8d e0       	ldi	r24, 0x0D	; 13
 834:	0e 94 be 02 	call	0x57c	; 0x57c <mfrc522_write>
	
	tag_type[0] = req_mode;
 838:	f7 01       	movw	r30, r14
 83a:	10 83       	st	Z, r17
	status = mfrc522_to_card(Transceive_CMD, tag_type, 1, tag_type, &backBits);
 83c:	8e 01       	movw	r16, r28
 83e:	0f 5f       	subi	r16, 0xFF	; 255
 840:	1f 4f       	sbci	r17, 0xFF	; 255
 842:	97 01       	movw	r18, r14
 844:	41 e0       	ldi	r20, 0x01	; 1
 846:	b7 01       	movw	r22, r14
 848:	8c e0       	ldi	r24, 0x0C	; 12
 84a:	0e 94 0d 03 	call	0x61a	; 0x61a <mfrc522_to_card>

	if ((status != CARD_FOUND) || (backBits != 0x10))
 84e:	81 30       	cpi	r24, 0x01	; 1
 850:	51 f4       	brne	.+20     	; 0x866 <mfrc522_request+0x4e>
 852:	49 81       	ldd	r20, Y+1	; 0x01
 854:	5a 81       	ldd	r21, Y+2	; 0x02
 856:	6b 81       	ldd	r22, Y+3	; 0x03
 858:	7c 81       	ldd	r23, Y+4	; 0x04
 85a:	40 31       	cpi	r20, 0x10	; 16
 85c:	51 05       	cpc	r21, r1
 85e:	61 05       	cpc	r22, r1
 860:	71 05       	cpc	r23, r1
 862:	19 f4       	brne	.+6      	; 0x86a <mfrc522_request+0x52>
 864:	03 c0       	rjmp	.+6      	; 0x86c <mfrc522_request+0x54>
	{    
		status = ERROR;
 866:	83 e0       	ldi	r24, 0x03	; 3
 868:	01 c0       	rjmp	.+2      	; 0x86c <mfrc522_request+0x54>
 86a:	83 e0       	ldi	r24, 0x03	; 3
	}
   
	return status;
}
 86c:	0f 90       	pop	r0
 86e:	0f 90       	pop	r0
 870:	0f 90       	pop	r0
 872:	0f 90       	pop	r0
 874:	df 91       	pop	r29
 876:	cf 91       	pop	r28
 878:	1f 91       	pop	r17
 87a:	0f 91       	pop	r16
 87c:	ff 90       	pop	r15
 87e:	ef 90       	pop	r14
 880:	08 95       	ret

00000882 <mfrc522_get_card_serial>:
    return status;
}


uint8_t mfrc522_get_card_serial(uint8_t * serial_out)
{
 882:	ef 92       	push	r14
 884:	ff 92       	push	r15
 886:	0f 93       	push	r16
 888:	1f 93       	push	r17
 88a:	cf 93       	push	r28
 88c:	df 93       	push	r29
 88e:	00 d0       	rcall	.+0      	; 0x890 <mfrc522_get_card_serial+0xe>
 890:	00 d0       	rcall	.+0      	; 0x892 <mfrc522_get_card_serial+0x10>
 892:	cd b7       	in	r28, 0x3d	; 61
 894:	de b7       	in	r29, 0x3e	; 62
 896:	7c 01       	movw	r14, r24
	uint8_t status;
    uint8_t i;
	uint8_t serNumCheck=0;
    uint32_t unLen;
    
	mfrc522_write(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 898:	60 e0       	ldi	r22, 0x00	; 0
 89a:	8d e0       	ldi	r24, 0x0D	; 13
 89c:	0e 94 be 02 	call	0x57c	; 0x57c <mfrc522_write>
 
    serial_out[0] = PICC_ANTICOLL;
 8a0:	83 e9       	ldi	r24, 0x93	; 147
 8a2:	f7 01       	movw	r30, r14
 8a4:	80 83       	st	Z, r24
    serial_out[1] = 0x20;
 8a6:	80 e2       	ldi	r24, 0x20	; 32
 8a8:	81 83       	std	Z+1, r24	; 0x01
    status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);
 8aa:	8e 01       	movw	r16, r28
 8ac:	0f 5f       	subi	r16, 0xFF	; 255
 8ae:	1f 4f       	sbci	r17, 0xFF	; 255
 8b0:	97 01       	movw	r18, r14
 8b2:	42 e0       	ldi	r20, 0x02	; 2
 8b4:	b7 01       	movw	r22, r14
 8b6:	8c e0       	ldi	r24, 0x0C	; 12
 8b8:	0e 94 0d 03 	call	0x61a	; 0x61a <mfrc522_to_card>

    if (status == CARD_FOUND)
 8bc:	81 30       	cpi	r24, 0x01	; 1
 8be:	91 f4       	brne	.+36     	; 0x8e4 <mfrc522_get_card_serial+0x62>
 8c0:	07 c0       	rjmp	.+14     	; 0x8d0 <mfrc522_get_card_serial+0x4e>
	{
		//Check card serial number
		for (i=0; i<4; i++)
		{   
		 	serNumCheck ^= serial_out[i];
 8c2:	f7 01       	movw	r30, r14
 8c4:	e9 0f       	add	r30, r25
 8c6:	f1 1d       	adc	r31, r1
 8c8:	30 81       	ld	r19, Z
 8ca:	23 27       	eor	r18, r19
    status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);

    if (status == CARD_FOUND)
	{
		//Check card serial number
		for (i=0; i<4; i++)
 8cc:	9f 5f       	subi	r25, 0xFF	; 255
 8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <mfrc522_get_card_serial+0x52>
 8d0:	20 e0       	ldi	r18, 0x00	; 0
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	94 30       	cpi	r25, 0x04	; 4
 8d6:	a8 f3       	brcs	.-22     	; 0x8c2 <mfrc522_get_card_serial+0x40>
		{   
		 	serNumCheck ^= serial_out[i];
		}
		if (serNumCheck != serial_out[i])
 8d8:	f7 01       	movw	r30, r14
 8da:	e9 0f       	add	r30, r25
 8dc:	f1 1d       	adc	r31, r1
 8de:	90 81       	ld	r25, Z
 8e0:	29 13       	cpse	r18, r25
		{   
			status = ERROR;    
 8e2:	83 e0       	ldi	r24, 0x03	; 3
		}
    }
    return status;
}
 8e4:	0f 90       	pop	r0
 8e6:	0f 90       	pop	r0
 8e8:	0f 90       	pop	r0
 8ea:	0f 90       	pop	r0
 8ec:	df 91       	pop	r29
 8ee:	cf 91       	pop	r28
 8f0:	1f 91       	pop	r17
 8f2:	0f 91       	pop	r16
 8f4:	ff 90       	pop	r15
 8f6:	ef 90       	pop	r14
 8f8:	08 95       	ret

000008fa <spi_init>:
#include "spi.h"

#if SPI_CONFIG_AS_MASTER
void spi_init()
{
	SPI_DDR |= (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS);
 8fa:	84 b1       	in	r24, 0x04	; 4
 8fc:	8c 62       	ori	r24, 0x2C	; 44
 8fe:	84 b9       	out	0x04, r24	; 4
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0); //prescaler 16
 900:	8c b5       	in	r24, 0x2c	; 44
 902:	81 65       	ori	r24, 0x51	; 81
 904:	8c bd       	out	0x2c, r24	; 44
 906:	08 95       	ret

00000908 <spi_transmit>:
}


uint8_t spi_transmit(uint8_t data)
{
	SPDR = data;
 908:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
 90a:	0d b4       	in	r0, 0x2d	; 45
 90c:	07 fe       	sbrs	r0, 7
 90e:	fd cf       	rjmp	.-6      	; 0x90a <spi_transmit+0x2>
	
	return SPDR;
 910:	8e b5       	in	r24, 0x2e	; 46
}
 912:	08 95       	ret

00000914 <update_pwm>:
	OCR1AL = (i & 0x00FF);
}

void pwm_sweep(void){
	uint16_t i = 0;
	for(i = SERVO_MIN; i <= SERVO_MAX;i=+50){
 914:	21 e0       	ldi	r18, 0x01	; 1
 916:	20 93 0d 02 	sts	0x020D, r18	; 0x80020d <update_pwm_ready>
 91a:	20 91 0d 02 	lds	r18, 0x020D	; 0x80020d <update_pwm_ready>
 91e:	21 11       	cpse	r18, r1
 920:	fc cf       	rjmp	.-8      	; 0x91a <update_pwm+0x6>
 922:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 926:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 92a:	08 95       	ret

0000092c <__vector_13>:
 92c:	1f 92       	push	r1
 92e:	0f 92       	push	r0
 930:	0f b6       	in	r0, 0x3f	; 63
 932:	0f 92       	push	r0
 934:	11 24       	eor	r1, r1
 936:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <update_pwm_ready>
 93a:	0f 90       	pop	r0
 93c:	0f be       	out	0x3f, r0	; 63
 93e:	0f 90       	pop	r0
 940:	1f 90       	pop	r1
 942:	18 95       	reti

00000944 <__vector_11>:
 944:	1f 92       	push	r1
 946:	0f 92       	push	r0
 948:	0f b6       	in	r0, 0x3f	; 63
 94a:	0f 92       	push	r0
 94c:	11 24       	eor	r1, r1
 94e:	0f 90       	pop	r0
 950:	0f be       	out	0x3f, r0	; 63
 952:	0f 90       	pop	r0
 954:	1f 90       	pop	r1
 956:	18 95       	reti

00000958 <pwm_init>:
 958:	84 b1       	in	r24, 0x04	; 4
 95a:	82 60       	ori	r24, 0x02	; 2
 95c:	84 b9       	out	0x04, r24	; 4
 95e:	83 e0       	ldi	r24, 0x03	; 3
 960:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 964:	8c e9       	ldi	r24, 0x9C	; 156
 966:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 96a:	8f e3       	ldi	r24, 0x3F	; 63
 96c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 970:	87 e0       	ldi	r24, 0x07	; 7
 972:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 976:	8f ec       	ldi	r24, 0xCF	; 207
 978:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 97c:	82 e8       	ldi	r24, 0x82	; 130
 97e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 982:	8a e1       	ldi	r24, 0x1A	; 26
 984:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 988:	08 95       	ret

0000098a <servo_set>:
		_delay_ms(40);
	}
}


void servo_set(uint16_t deg,uint16_t max_deg){
 98a:	cf 92       	push	r12
 98c:	df 92       	push	r13
 98e:	ef 92       	push	r14
 990:	ff 92       	push	r15
 992:	cf 93       	push	r28
 994:	df 93       	push	r29
 996:	eb 01       	movw	r28, r22
	
	float set = (float)deg / (float)max_deg;
 998:	bc 01       	movw	r22, r24
 99a:	80 e0       	ldi	r24, 0x00	; 0
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	0e 94 49 06 	call	0xc92	; 0xc92 <__floatunsisf>
 9a2:	6b 01       	movw	r12, r22
 9a4:	7c 01       	movw	r14, r24
 9a6:	be 01       	movw	r22, r28
 9a8:	80 e0       	ldi	r24, 0x00	; 0
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	0e 94 49 06 	call	0xc92	; 0xc92 <__floatunsisf>
 9b0:	9b 01       	movw	r18, r22
 9b2:	ac 01       	movw	r20, r24
 9b4:	c7 01       	movw	r24, r14
 9b6:	b6 01       	movw	r22, r12
 9b8:	0e 94 a8 05 	call	0xb50	; 0xb50 <__divsf3>
	
	set = (((float)SERVO_MAX-(float)SERVO_MIN)*set) + (float)SERVO_MIN;
 9bc:	20 e0       	ldi	r18, 0x00	; 0
 9be:	30 e8       	ldi	r19, 0x80	; 128
 9c0:	4b e3       	ldi	r20, 0x3B	; 59
 9c2:	55 e4       	ldi	r21, 0x45	; 69
 9c4:	0e 94 d7 06 	call	0xdae	; 0xdae <__mulsf3>
 9c8:	20 e0       	ldi	r18, 0x00	; 0
 9ca:	30 ee       	ldi	r19, 0xE0	; 224
 9cc:	49 ef       	ldi	r20, 0xF9	; 249
 9ce:	54 e4       	ldi	r21, 0x44	; 68
 9d0:	0e 94 3c 05 	call	0xa78	; 0xa78 <__addsf3>
	
	uint16_t point = (uint16_t)set;
 9d4:	0e 94 1a 06 	call	0xc34	; 0xc34 <__fixunssfsi>
	
	update_pwm(point);
 9d8:	cb 01       	movw	r24, r22
 9da:	0e 94 8a 04 	call	0x914	; 0x914 <update_pwm>
	
}
 9de:	df 91       	pop	r29
 9e0:	cf 91       	pop	r28
 9e2:	ff 90       	pop	r15
 9e4:	ef 90       	pop	r14
 9e6:	df 90       	pop	r13
 9e8:	cf 90       	pop	r12
 9ea:	08 95       	ret

000009ec <__vector_18>:

volatile static uint8_t uart_tx_busy = 1;
volatile static uint8_t uart_fetch_complete = 0;		// when the buffer has reached a '\n' char flag set to 1. once the string has been read from flag set to 0. 
UARTBuffer uart_buffer; 

ISR(USART_RX_vect){
 9ec:	1f 92       	push	r1
 9ee:	0f 92       	push	r0
 9f0:	0f b6       	in	r0, 0x3f	; 63
 9f2:	0f 92       	push	r0
 9f4:	11 24       	eor	r1, r1
 9f6:	2f 93       	push	r18
 9f8:	3f 93       	push	r19
 9fa:	8f 93       	push	r24
 9fc:	9f 93       	push	r25
 9fe:	af 93       	push	r26
 a00:	bf 93       	push	r27
 a02:	ef 93       	push	r30
 a04:	ff 93       	push	r31
	uart_buffer.buffer[uart_buffer.head] = UDR0;			 // read in the UDR0 register
 a06:	e8 e9       	ldi	r30, 0x98	; 152
 a08:	f2 e0       	ldi	r31, 0x02	; 2
 a0a:	80 81       	ld	r24, Z
 a0c:	91 81       	ldd	r25, Z+1	; 0x01
 a0e:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 a12:	dc 01       	movw	r26, r24
 a14:	aa 5e       	subi	r26, 0xEA	; 234
 a16:	bd 4f       	sbci	r27, 0xFD	; 253
 a18:	2c 93       	st	X, r18
	uart_buffer.head++;
 a1a:	01 96       	adiw	r24, 0x01	; 1
 a1c:	91 83       	std	Z+1, r25	; 0x01
 a1e:	80 83       	st	Z, r24
	uart_buffer.size++;
 a20:	e6 e9       	ldi	r30, 0x96	; 150
 a22:	f2 e0       	ldi	r31, 0x02	; 2
 a24:	20 81       	ld	r18, Z
 a26:	31 81       	ldd	r19, Z+1	; 0x01
 a28:	2f 5f       	subi	r18, 0xFF	; 255
 a2a:	3f 4f       	sbci	r19, 0xFF	; 255
 a2c:	31 83       	std	Z+1, r19	; 0x01
 a2e:	20 83       	st	Z, r18
	
	if (uart_buffer.head >= MAX_BUFFER_SIZE){		// if the rx position overruns the rx max buffer size. return rx pos to 0. "Circular FIFO data structure as stated in the datasheet"
 a30:	80 38       	cpi	r24, 0x80	; 128
 a32:	91 05       	cpc	r25, r1
 a34:	20 f0       	brcs	.+8      	; 0xa3e <__vector_18+0x52>
		uart_buffer.head = 0;
 a36:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <uart_buffer+0x83>
 a3a:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <uart_buffer+0x82>
	}
	
}
 a3e:	ff 91       	pop	r31
 a40:	ef 91       	pop	r30
 a42:	bf 91       	pop	r27
 a44:	af 91       	pop	r26
 a46:	9f 91       	pop	r25
 a48:	8f 91       	pop	r24
 a4a:	3f 91       	pop	r19
 a4c:	2f 91       	pop	r18
 a4e:	0f 90       	pop	r0
 a50:	0f be       	out	0x3f, r0	; 63
 a52:	0f 90       	pop	r0
 a54:	1f 90       	pop	r1
 a56:	18 95       	reti

00000a58 <__vector_20>:

ISR(USART_TX_vect){
 a58:	1f 92       	push	r1
 a5a:	0f 92       	push	r0
 a5c:	0f b6       	in	r0, 0x3f	; 63
 a5e:	0f 92       	push	r0
 a60:	11 24       	eor	r1, r1
 a62:	8f 93       	push	r24
	uart_tx_busy = 1;
 a64:	81 e0       	ldi	r24, 0x01	; 1
 a66:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <uart_tx_busy>
}
 a6a:	8f 91       	pop	r24
 a6c:	0f 90       	pop	r0
 a6e:	0f be       	out	0x3f, r0	; 63
 a70:	0f 90       	pop	r0
 a72:	1f 90       	pop	r1
 a74:	18 95       	reti

00000a76 <__subsf3>:
 a76:	50 58       	subi	r21, 0x80	; 128

00000a78 <__addsf3>:
 a78:	bb 27       	eor	r27, r27
 a7a:	aa 27       	eor	r26, r26
 a7c:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__addsf3x>
 a80:	0c 94 9d 06 	jmp	0xd3a	; 0xd3a <__fp_round>
 a84:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__fp_pscA>
 a88:	38 f0       	brcs	.+14     	; 0xa98 <__addsf3+0x20>
 a8a:	0e 94 96 06 	call	0xd2c	; 0xd2c <__fp_pscB>
 a8e:	20 f0       	brcs	.+8      	; 0xa98 <__addsf3+0x20>
 a90:	39 f4       	brne	.+14     	; 0xaa0 <__addsf3+0x28>
 a92:	9f 3f       	cpi	r25, 0xFF	; 255
 a94:	19 f4       	brne	.+6      	; 0xa9c <__addsf3+0x24>
 a96:	26 f4       	brtc	.+8      	; 0xaa0 <__addsf3+0x28>
 a98:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__fp_nan>
 a9c:	0e f4       	brtc	.+2      	; 0xaa0 <__addsf3+0x28>
 a9e:	e0 95       	com	r30
 aa0:	e7 fb       	bst	r30, 7
 aa2:	0c 94 86 06 	jmp	0xd0c	; 0xd0c <__fp_inf>

00000aa6 <__addsf3x>:
 aa6:	e9 2f       	mov	r30, r25
 aa8:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__fp_split3>
 aac:	58 f3       	brcs	.-42     	; 0xa84 <__addsf3+0xc>
 aae:	ba 17       	cp	r27, r26
 ab0:	62 07       	cpc	r22, r18
 ab2:	73 07       	cpc	r23, r19
 ab4:	84 07       	cpc	r24, r20
 ab6:	95 07       	cpc	r25, r21
 ab8:	20 f0       	brcs	.+8      	; 0xac2 <__addsf3x+0x1c>
 aba:	79 f4       	brne	.+30     	; 0xada <__addsf3x+0x34>
 abc:	a6 f5       	brtc	.+104    	; 0xb26 <__addsf3x+0x80>
 abe:	0c 94 d0 06 	jmp	0xda0	; 0xda0 <__fp_zero>
 ac2:	0e f4       	brtc	.+2      	; 0xac6 <__addsf3x+0x20>
 ac4:	e0 95       	com	r30
 ac6:	0b 2e       	mov	r0, r27
 ac8:	ba 2f       	mov	r27, r26
 aca:	a0 2d       	mov	r26, r0
 acc:	0b 01       	movw	r0, r22
 ace:	b9 01       	movw	r22, r18
 ad0:	90 01       	movw	r18, r0
 ad2:	0c 01       	movw	r0, r24
 ad4:	ca 01       	movw	r24, r20
 ad6:	a0 01       	movw	r20, r0
 ad8:	11 24       	eor	r1, r1
 ada:	ff 27       	eor	r31, r31
 adc:	59 1b       	sub	r21, r25
 ade:	99 f0       	breq	.+38     	; 0xb06 <__addsf3x+0x60>
 ae0:	59 3f       	cpi	r21, 0xF9	; 249
 ae2:	50 f4       	brcc	.+20     	; 0xaf8 <__addsf3x+0x52>
 ae4:	50 3e       	cpi	r21, 0xE0	; 224
 ae6:	68 f1       	brcs	.+90     	; 0xb42 <__addsf3x+0x9c>
 ae8:	1a 16       	cp	r1, r26
 aea:	f0 40       	sbci	r31, 0x00	; 0
 aec:	a2 2f       	mov	r26, r18
 aee:	23 2f       	mov	r18, r19
 af0:	34 2f       	mov	r19, r20
 af2:	44 27       	eor	r20, r20
 af4:	58 5f       	subi	r21, 0xF8	; 248
 af6:	f3 cf       	rjmp	.-26     	; 0xade <__addsf3x+0x38>
 af8:	46 95       	lsr	r20
 afa:	37 95       	ror	r19
 afc:	27 95       	ror	r18
 afe:	a7 95       	ror	r26
 b00:	f0 40       	sbci	r31, 0x00	; 0
 b02:	53 95       	inc	r21
 b04:	c9 f7       	brne	.-14     	; 0xaf8 <__addsf3x+0x52>
 b06:	7e f4       	brtc	.+30     	; 0xb26 <__addsf3x+0x80>
 b08:	1f 16       	cp	r1, r31
 b0a:	ba 0b       	sbc	r27, r26
 b0c:	62 0b       	sbc	r22, r18
 b0e:	73 0b       	sbc	r23, r19
 b10:	84 0b       	sbc	r24, r20
 b12:	ba f0       	brmi	.+46     	; 0xb42 <__addsf3x+0x9c>
 b14:	91 50       	subi	r25, 0x01	; 1
 b16:	a1 f0       	breq	.+40     	; 0xb40 <__addsf3x+0x9a>
 b18:	ff 0f       	add	r31, r31
 b1a:	bb 1f       	adc	r27, r27
 b1c:	66 1f       	adc	r22, r22
 b1e:	77 1f       	adc	r23, r23
 b20:	88 1f       	adc	r24, r24
 b22:	c2 f7       	brpl	.-16     	; 0xb14 <__addsf3x+0x6e>
 b24:	0e c0       	rjmp	.+28     	; 0xb42 <__addsf3x+0x9c>
 b26:	ba 0f       	add	r27, r26
 b28:	62 1f       	adc	r22, r18
 b2a:	73 1f       	adc	r23, r19
 b2c:	84 1f       	adc	r24, r20
 b2e:	48 f4       	brcc	.+18     	; 0xb42 <__addsf3x+0x9c>
 b30:	87 95       	ror	r24
 b32:	77 95       	ror	r23
 b34:	67 95       	ror	r22
 b36:	b7 95       	ror	r27
 b38:	f7 95       	ror	r31
 b3a:	9e 3f       	cpi	r25, 0xFE	; 254
 b3c:	08 f0       	brcs	.+2      	; 0xb40 <__addsf3x+0x9a>
 b3e:	b0 cf       	rjmp	.-160    	; 0xaa0 <__addsf3+0x28>
 b40:	93 95       	inc	r25
 b42:	88 0f       	add	r24, r24
 b44:	08 f0       	brcs	.+2      	; 0xb48 <__addsf3x+0xa2>
 b46:	99 27       	eor	r25, r25
 b48:	ee 0f       	add	r30, r30
 b4a:	97 95       	ror	r25
 b4c:	87 95       	ror	r24
 b4e:	08 95       	ret

00000b50 <__divsf3>:
 b50:	0e 94 bc 05 	call	0xb78	; 0xb78 <__divsf3x>
 b54:	0c 94 9d 06 	jmp	0xd3a	; 0xd3a <__fp_round>
 b58:	0e 94 96 06 	call	0xd2c	; 0xd2c <__fp_pscB>
 b5c:	58 f0       	brcs	.+22     	; 0xb74 <__divsf3+0x24>
 b5e:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__fp_pscA>
 b62:	40 f0       	brcs	.+16     	; 0xb74 <__divsf3+0x24>
 b64:	29 f4       	brne	.+10     	; 0xb70 <__divsf3+0x20>
 b66:	5f 3f       	cpi	r21, 0xFF	; 255
 b68:	29 f0       	breq	.+10     	; 0xb74 <__divsf3+0x24>
 b6a:	0c 94 86 06 	jmp	0xd0c	; 0xd0c <__fp_inf>
 b6e:	51 11       	cpse	r21, r1
 b70:	0c 94 d1 06 	jmp	0xda2	; 0xda2 <__fp_szero>
 b74:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__fp_nan>

00000b78 <__divsf3x>:
 b78:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__fp_split3>
 b7c:	68 f3       	brcs	.-38     	; 0xb58 <__divsf3+0x8>

00000b7e <__divsf3_pse>:
 b7e:	99 23       	and	r25, r25
 b80:	b1 f3       	breq	.-20     	; 0xb6e <__divsf3+0x1e>
 b82:	55 23       	and	r21, r21
 b84:	91 f3       	breq	.-28     	; 0xb6a <__divsf3+0x1a>
 b86:	95 1b       	sub	r25, r21
 b88:	55 0b       	sbc	r21, r21
 b8a:	bb 27       	eor	r27, r27
 b8c:	aa 27       	eor	r26, r26
 b8e:	62 17       	cp	r22, r18
 b90:	73 07       	cpc	r23, r19
 b92:	84 07       	cpc	r24, r20
 b94:	38 f0       	brcs	.+14     	; 0xba4 <__divsf3_pse+0x26>
 b96:	9f 5f       	subi	r25, 0xFF	; 255
 b98:	5f 4f       	sbci	r21, 0xFF	; 255
 b9a:	22 0f       	add	r18, r18
 b9c:	33 1f       	adc	r19, r19
 b9e:	44 1f       	adc	r20, r20
 ba0:	aa 1f       	adc	r26, r26
 ba2:	a9 f3       	breq	.-22     	; 0xb8e <__divsf3_pse+0x10>
 ba4:	35 d0       	rcall	.+106    	; 0xc10 <__divsf3_pse+0x92>
 ba6:	0e 2e       	mov	r0, r30
 ba8:	3a f0       	brmi	.+14     	; 0xbb8 <__divsf3_pse+0x3a>
 baa:	e0 e8       	ldi	r30, 0x80	; 128
 bac:	32 d0       	rcall	.+100    	; 0xc12 <__divsf3_pse+0x94>
 bae:	91 50       	subi	r25, 0x01	; 1
 bb0:	50 40       	sbci	r21, 0x00	; 0
 bb2:	e6 95       	lsr	r30
 bb4:	00 1c       	adc	r0, r0
 bb6:	ca f7       	brpl	.-14     	; 0xbaa <__divsf3_pse+0x2c>
 bb8:	2b d0       	rcall	.+86     	; 0xc10 <__divsf3_pse+0x92>
 bba:	fe 2f       	mov	r31, r30
 bbc:	29 d0       	rcall	.+82     	; 0xc10 <__divsf3_pse+0x92>
 bbe:	66 0f       	add	r22, r22
 bc0:	77 1f       	adc	r23, r23
 bc2:	88 1f       	adc	r24, r24
 bc4:	bb 1f       	adc	r27, r27
 bc6:	26 17       	cp	r18, r22
 bc8:	37 07       	cpc	r19, r23
 bca:	48 07       	cpc	r20, r24
 bcc:	ab 07       	cpc	r26, r27
 bce:	b0 e8       	ldi	r27, 0x80	; 128
 bd0:	09 f0       	breq	.+2      	; 0xbd4 <__divsf3_pse+0x56>
 bd2:	bb 0b       	sbc	r27, r27
 bd4:	80 2d       	mov	r24, r0
 bd6:	bf 01       	movw	r22, r30
 bd8:	ff 27       	eor	r31, r31
 bda:	93 58       	subi	r25, 0x83	; 131
 bdc:	5f 4f       	sbci	r21, 0xFF	; 255
 bde:	3a f0       	brmi	.+14     	; 0xbee <__divsf3_pse+0x70>
 be0:	9e 3f       	cpi	r25, 0xFE	; 254
 be2:	51 05       	cpc	r21, r1
 be4:	78 f0       	brcs	.+30     	; 0xc04 <__divsf3_pse+0x86>
 be6:	0c 94 86 06 	jmp	0xd0c	; 0xd0c <__fp_inf>
 bea:	0c 94 d1 06 	jmp	0xda2	; 0xda2 <__fp_szero>
 bee:	5f 3f       	cpi	r21, 0xFF	; 255
 bf0:	e4 f3       	brlt	.-8      	; 0xbea <__divsf3_pse+0x6c>
 bf2:	98 3e       	cpi	r25, 0xE8	; 232
 bf4:	d4 f3       	brlt	.-12     	; 0xbea <__divsf3_pse+0x6c>
 bf6:	86 95       	lsr	r24
 bf8:	77 95       	ror	r23
 bfa:	67 95       	ror	r22
 bfc:	b7 95       	ror	r27
 bfe:	f7 95       	ror	r31
 c00:	9f 5f       	subi	r25, 0xFF	; 255
 c02:	c9 f7       	brne	.-14     	; 0xbf6 <__divsf3_pse+0x78>
 c04:	88 0f       	add	r24, r24
 c06:	91 1d       	adc	r25, r1
 c08:	96 95       	lsr	r25
 c0a:	87 95       	ror	r24
 c0c:	97 f9       	bld	r25, 7
 c0e:	08 95       	ret
 c10:	e1 e0       	ldi	r30, 0x01	; 1
 c12:	66 0f       	add	r22, r22
 c14:	77 1f       	adc	r23, r23
 c16:	88 1f       	adc	r24, r24
 c18:	bb 1f       	adc	r27, r27
 c1a:	62 17       	cp	r22, r18
 c1c:	73 07       	cpc	r23, r19
 c1e:	84 07       	cpc	r24, r20
 c20:	ba 07       	cpc	r27, r26
 c22:	20 f0       	brcs	.+8      	; 0xc2c <__divsf3_pse+0xae>
 c24:	62 1b       	sub	r22, r18
 c26:	73 0b       	sbc	r23, r19
 c28:	84 0b       	sbc	r24, r20
 c2a:	ba 0b       	sbc	r27, r26
 c2c:	ee 1f       	adc	r30, r30
 c2e:	88 f7       	brcc	.-30     	; 0xc12 <__divsf3_pse+0x94>
 c30:	e0 95       	com	r30
 c32:	08 95       	ret

00000c34 <__fixunssfsi>:
 c34:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fp_splitA>
 c38:	88 f0       	brcs	.+34     	; 0xc5c <__fixunssfsi+0x28>
 c3a:	9f 57       	subi	r25, 0x7F	; 127
 c3c:	98 f0       	brcs	.+38     	; 0xc64 <__fixunssfsi+0x30>
 c3e:	b9 2f       	mov	r27, r25
 c40:	99 27       	eor	r25, r25
 c42:	b7 51       	subi	r27, 0x17	; 23
 c44:	b0 f0       	brcs	.+44     	; 0xc72 <__fixunssfsi+0x3e>
 c46:	e1 f0       	breq	.+56     	; 0xc80 <__fixunssfsi+0x4c>
 c48:	66 0f       	add	r22, r22
 c4a:	77 1f       	adc	r23, r23
 c4c:	88 1f       	adc	r24, r24
 c4e:	99 1f       	adc	r25, r25
 c50:	1a f0       	brmi	.+6      	; 0xc58 <__fixunssfsi+0x24>
 c52:	ba 95       	dec	r27
 c54:	c9 f7       	brne	.-14     	; 0xc48 <__fixunssfsi+0x14>
 c56:	14 c0       	rjmp	.+40     	; 0xc80 <__fixunssfsi+0x4c>
 c58:	b1 30       	cpi	r27, 0x01	; 1
 c5a:	91 f0       	breq	.+36     	; 0xc80 <__fixunssfsi+0x4c>
 c5c:	0e 94 d0 06 	call	0xda0	; 0xda0 <__fp_zero>
 c60:	b1 e0       	ldi	r27, 0x01	; 1
 c62:	08 95       	ret
 c64:	0c 94 d0 06 	jmp	0xda0	; 0xda0 <__fp_zero>
 c68:	67 2f       	mov	r22, r23
 c6a:	78 2f       	mov	r23, r24
 c6c:	88 27       	eor	r24, r24
 c6e:	b8 5f       	subi	r27, 0xF8	; 248
 c70:	39 f0       	breq	.+14     	; 0xc80 <__fixunssfsi+0x4c>
 c72:	b9 3f       	cpi	r27, 0xF9	; 249
 c74:	cc f3       	brlt	.-14     	; 0xc68 <__fixunssfsi+0x34>
 c76:	86 95       	lsr	r24
 c78:	77 95       	ror	r23
 c7a:	67 95       	ror	r22
 c7c:	b3 95       	inc	r27
 c7e:	d9 f7       	brne	.-10     	; 0xc76 <__fixunssfsi+0x42>
 c80:	3e f4       	brtc	.+14     	; 0xc90 <__fixunssfsi+0x5c>
 c82:	90 95       	com	r25
 c84:	80 95       	com	r24
 c86:	70 95       	com	r23
 c88:	61 95       	neg	r22
 c8a:	7f 4f       	sbci	r23, 0xFF	; 255
 c8c:	8f 4f       	sbci	r24, 0xFF	; 255
 c8e:	9f 4f       	sbci	r25, 0xFF	; 255
 c90:	08 95       	ret

00000c92 <__floatunsisf>:
 c92:	e8 94       	clt
 c94:	09 c0       	rjmp	.+18     	; 0xca8 <__floatsisf+0x12>

00000c96 <__floatsisf>:
 c96:	97 fb       	bst	r25, 7
 c98:	3e f4       	brtc	.+14     	; 0xca8 <__floatsisf+0x12>
 c9a:	90 95       	com	r25
 c9c:	80 95       	com	r24
 c9e:	70 95       	com	r23
 ca0:	61 95       	neg	r22
 ca2:	7f 4f       	sbci	r23, 0xFF	; 255
 ca4:	8f 4f       	sbci	r24, 0xFF	; 255
 ca6:	9f 4f       	sbci	r25, 0xFF	; 255
 ca8:	99 23       	and	r25, r25
 caa:	a9 f0       	breq	.+42     	; 0xcd6 <__floatsisf+0x40>
 cac:	f9 2f       	mov	r31, r25
 cae:	96 e9       	ldi	r25, 0x96	; 150
 cb0:	bb 27       	eor	r27, r27
 cb2:	93 95       	inc	r25
 cb4:	f6 95       	lsr	r31
 cb6:	87 95       	ror	r24
 cb8:	77 95       	ror	r23
 cba:	67 95       	ror	r22
 cbc:	b7 95       	ror	r27
 cbe:	f1 11       	cpse	r31, r1
 cc0:	f8 cf       	rjmp	.-16     	; 0xcb2 <__floatsisf+0x1c>
 cc2:	fa f4       	brpl	.+62     	; 0xd02 <__floatsisf+0x6c>
 cc4:	bb 0f       	add	r27, r27
 cc6:	11 f4       	brne	.+4      	; 0xccc <__floatsisf+0x36>
 cc8:	60 ff       	sbrs	r22, 0
 cca:	1b c0       	rjmp	.+54     	; 0xd02 <__floatsisf+0x6c>
 ccc:	6f 5f       	subi	r22, 0xFF	; 255
 cce:	7f 4f       	sbci	r23, 0xFF	; 255
 cd0:	8f 4f       	sbci	r24, 0xFF	; 255
 cd2:	9f 4f       	sbci	r25, 0xFF	; 255
 cd4:	16 c0       	rjmp	.+44     	; 0xd02 <__floatsisf+0x6c>
 cd6:	88 23       	and	r24, r24
 cd8:	11 f0       	breq	.+4      	; 0xcde <__floatsisf+0x48>
 cda:	96 e9       	ldi	r25, 0x96	; 150
 cdc:	11 c0       	rjmp	.+34     	; 0xd00 <__floatsisf+0x6a>
 cde:	77 23       	and	r23, r23
 ce0:	21 f0       	breq	.+8      	; 0xcea <__floatsisf+0x54>
 ce2:	9e e8       	ldi	r25, 0x8E	; 142
 ce4:	87 2f       	mov	r24, r23
 ce6:	76 2f       	mov	r23, r22
 ce8:	05 c0       	rjmp	.+10     	; 0xcf4 <__floatsisf+0x5e>
 cea:	66 23       	and	r22, r22
 cec:	71 f0       	breq	.+28     	; 0xd0a <__floatsisf+0x74>
 cee:	96 e8       	ldi	r25, 0x86	; 134
 cf0:	86 2f       	mov	r24, r22
 cf2:	70 e0       	ldi	r23, 0x00	; 0
 cf4:	60 e0       	ldi	r22, 0x00	; 0
 cf6:	2a f0       	brmi	.+10     	; 0xd02 <__floatsisf+0x6c>
 cf8:	9a 95       	dec	r25
 cfa:	66 0f       	add	r22, r22
 cfc:	77 1f       	adc	r23, r23
 cfe:	88 1f       	adc	r24, r24
 d00:	da f7       	brpl	.-10     	; 0xcf8 <__floatsisf+0x62>
 d02:	88 0f       	add	r24, r24
 d04:	96 95       	lsr	r25
 d06:	87 95       	ror	r24
 d08:	97 f9       	bld	r25, 7
 d0a:	08 95       	ret

00000d0c <__fp_inf>:
 d0c:	97 f9       	bld	r25, 7
 d0e:	9f 67       	ori	r25, 0x7F	; 127
 d10:	80 e8       	ldi	r24, 0x80	; 128
 d12:	70 e0       	ldi	r23, 0x00	; 0
 d14:	60 e0       	ldi	r22, 0x00	; 0
 d16:	08 95       	ret

00000d18 <__fp_nan>:
 d18:	9f ef       	ldi	r25, 0xFF	; 255
 d1a:	80 ec       	ldi	r24, 0xC0	; 192
 d1c:	08 95       	ret

00000d1e <__fp_pscA>:
 d1e:	00 24       	eor	r0, r0
 d20:	0a 94       	dec	r0
 d22:	16 16       	cp	r1, r22
 d24:	17 06       	cpc	r1, r23
 d26:	18 06       	cpc	r1, r24
 d28:	09 06       	cpc	r0, r25
 d2a:	08 95       	ret

00000d2c <__fp_pscB>:
 d2c:	00 24       	eor	r0, r0
 d2e:	0a 94       	dec	r0
 d30:	12 16       	cp	r1, r18
 d32:	13 06       	cpc	r1, r19
 d34:	14 06       	cpc	r1, r20
 d36:	05 06       	cpc	r0, r21
 d38:	08 95       	ret

00000d3a <__fp_round>:
 d3a:	09 2e       	mov	r0, r25
 d3c:	03 94       	inc	r0
 d3e:	00 0c       	add	r0, r0
 d40:	11 f4       	brne	.+4      	; 0xd46 <__fp_round+0xc>
 d42:	88 23       	and	r24, r24
 d44:	52 f0       	brmi	.+20     	; 0xd5a <__fp_round+0x20>
 d46:	bb 0f       	add	r27, r27
 d48:	40 f4       	brcc	.+16     	; 0xd5a <__fp_round+0x20>
 d4a:	bf 2b       	or	r27, r31
 d4c:	11 f4       	brne	.+4      	; 0xd52 <__fp_round+0x18>
 d4e:	60 ff       	sbrs	r22, 0
 d50:	04 c0       	rjmp	.+8      	; 0xd5a <__fp_round+0x20>
 d52:	6f 5f       	subi	r22, 0xFF	; 255
 d54:	7f 4f       	sbci	r23, 0xFF	; 255
 d56:	8f 4f       	sbci	r24, 0xFF	; 255
 d58:	9f 4f       	sbci	r25, 0xFF	; 255
 d5a:	08 95       	ret

00000d5c <__fp_split3>:
 d5c:	57 fd       	sbrc	r21, 7
 d5e:	90 58       	subi	r25, 0x80	; 128
 d60:	44 0f       	add	r20, r20
 d62:	55 1f       	adc	r21, r21
 d64:	59 f0       	breq	.+22     	; 0xd7c <__fp_splitA+0x10>
 d66:	5f 3f       	cpi	r21, 0xFF	; 255
 d68:	71 f0       	breq	.+28     	; 0xd86 <__fp_splitA+0x1a>
 d6a:	47 95       	ror	r20

00000d6c <__fp_splitA>:
 d6c:	88 0f       	add	r24, r24
 d6e:	97 fb       	bst	r25, 7
 d70:	99 1f       	adc	r25, r25
 d72:	61 f0       	breq	.+24     	; 0xd8c <__fp_splitA+0x20>
 d74:	9f 3f       	cpi	r25, 0xFF	; 255
 d76:	79 f0       	breq	.+30     	; 0xd96 <__fp_splitA+0x2a>
 d78:	87 95       	ror	r24
 d7a:	08 95       	ret
 d7c:	12 16       	cp	r1, r18
 d7e:	13 06       	cpc	r1, r19
 d80:	14 06       	cpc	r1, r20
 d82:	55 1f       	adc	r21, r21
 d84:	f2 cf       	rjmp	.-28     	; 0xd6a <__fp_split3+0xe>
 d86:	46 95       	lsr	r20
 d88:	f1 df       	rcall	.-30     	; 0xd6c <__fp_splitA>
 d8a:	08 c0       	rjmp	.+16     	; 0xd9c <__fp_splitA+0x30>
 d8c:	16 16       	cp	r1, r22
 d8e:	17 06       	cpc	r1, r23
 d90:	18 06       	cpc	r1, r24
 d92:	99 1f       	adc	r25, r25
 d94:	f1 cf       	rjmp	.-30     	; 0xd78 <__fp_splitA+0xc>
 d96:	86 95       	lsr	r24
 d98:	71 05       	cpc	r23, r1
 d9a:	61 05       	cpc	r22, r1
 d9c:	08 94       	sec
 d9e:	08 95       	ret

00000da0 <__fp_zero>:
 da0:	e8 94       	clt

00000da2 <__fp_szero>:
 da2:	bb 27       	eor	r27, r27
 da4:	66 27       	eor	r22, r22
 da6:	77 27       	eor	r23, r23
 da8:	cb 01       	movw	r24, r22
 daa:	97 f9       	bld	r25, 7
 dac:	08 95       	ret

00000dae <__mulsf3>:
 dae:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__mulsf3x>
 db2:	0c 94 9d 06 	jmp	0xd3a	; 0xd3a <__fp_round>
 db6:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__fp_pscA>
 dba:	38 f0       	brcs	.+14     	; 0xdca <__mulsf3+0x1c>
 dbc:	0e 94 96 06 	call	0xd2c	; 0xd2c <__fp_pscB>
 dc0:	20 f0       	brcs	.+8      	; 0xdca <__mulsf3+0x1c>
 dc2:	95 23       	and	r25, r21
 dc4:	11 f0       	breq	.+4      	; 0xdca <__mulsf3+0x1c>
 dc6:	0c 94 86 06 	jmp	0xd0c	; 0xd0c <__fp_inf>
 dca:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__fp_nan>
 dce:	11 24       	eor	r1, r1
 dd0:	0c 94 d1 06 	jmp	0xda2	; 0xda2 <__fp_szero>

00000dd4 <__mulsf3x>:
 dd4:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__fp_split3>
 dd8:	70 f3       	brcs	.-36     	; 0xdb6 <__mulsf3+0x8>

00000dda <__mulsf3_pse>:
 dda:	95 9f       	mul	r25, r21
 ddc:	c1 f3       	breq	.-16     	; 0xdce <__mulsf3+0x20>
 dde:	95 0f       	add	r25, r21
 de0:	50 e0       	ldi	r21, 0x00	; 0
 de2:	55 1f       	adc	r21, r21
 de4:	62 9f       	mul	r22, r18
 de6:	f0 01       	movw	r30, r0
 de8:	72 9f       	mul	r23, r18
 dea:	bb 27       	eor	r27, r27
 dec:	f0 0d       	add	r31, r0
 dee:	b1 1d       	adc	r27, r1
 df0:	63 9f       	mul	r22, r19
 df2:	aa 27       	eor	r26, r26
 df4:	f0 0d       	add	r31, r0
 df6:	b1 1d       	adc	r27, r1
 df8:	aa 1f       	adc	r26, r26
 dfa:	64 9f       	mul	r22, r20
 dfc:	66 27       	eor	r22, r22
 dfe:	b0 0d       	add	r27, r0
 e00:	a1 1d       	adc	r26, r1
 e02:	66 1f       	adc	r22, r22
 e04:	82 9f       	mul	r24, r18
 e06:	22 27       	eor	r18, r18
 e08:	b0 0d       	add	r27, r0
 e0a:	a1 1d       	adc	r26, r1
 e0c:	62 1f       	adc	r22, r18
 e0e:	73 9f       	mul	r23, r19
 e10:	b0 0d       	add	r27, r0
 e12:	a1 1d       	adc	r26, r1
 e14:	62 1f       	adc	r22, r18
 e16:	83 9f       	mul	r24, r19
 e18:	a0 0d       	add	r26, r0
 e1a:	61 1d       	adc	r22, r1
 e1c:	22 1f       	adc	r18, r18
 e1e:	74 9f       	mul	r23, r20
 e20:	33 27       	eor	r19, r19
 e22:	a0 0d       	add	r26, r0
 e24:	61 1d       	adc	r22, r1
 e26:	23 1f       	adc	r18, r19
 e28:	84 9f       	mul	r24, r20
 e2a:	60 0d       	add	r22, r0
 e2c:	21 1d       	adc	r18, r1
 e2e:	82 2f       	mov	r24, r18
 e30:	76 2f       	mov	r23, r22
 e32:	6a 2f       	mov	r22, r26
 e34:	11 24       	eor	r1, r1
 e36:	9f 57       	subi	r25, 0x7F	; 127
 e38:	50 40       	sbci	r21, 0x00	; 0
 e3a:	9a f0       	brmi	.+38     	; 0xe62 <__mulsf3_pse+0x88>
 e3c:	f1 f0       	breq	.+60     	; 0xe7a <__mulsf3_pse+0xa0>
 e3e:	88 23       	and	r24, r24
 e40:	4a f0       	brmi	.+18     	; 0xe54 <__mulsf3_pse+0x7a>
 e42:	ee 0f       	add	r30, r30
 e44:	ff 1f       	adc	r31, r31
 e46:	bb 1f       	adc	r27, r27
 e48:	66 1f       	adc	r22, r22
 e4a:	77 1f       	adc	r23, r23
 e4c:	88 1f       	adc	r24, r24
 e4e:	91 50       	subi	r25, 0x01	; 1
 e50:	50 40       	sbci	r21, 0x00	; 0
 e52:	a9 f7       	brne	.-22     	; 0xe3e <__mulsf3_pse+0x64>
 e54:	9e 3f       	cpi	r25, 0xFE	; 254
 e56:	51 05       	cpc	r21, r1
 e58:	80 f0       	brcs	.+32     	; 0xe7a <__mulsf3_pse+0xa0>
 e5a:	0c 94 86 06 	jmp	0xd0c	; 0xd0c <__fp_inf>
 e5e:	0c 94 d1 06 	jmp	0xda2	; 0xda2 <__fp_szero>
 e62:	5f 3f       	cpi	r21, 0xFF	; 255
 e64:	e4 f3       	brlt	.-8      	; 0xe5e <__mulsf3_pse+0x84>
 e66:	98 3e       	cpi	r25, 0xE8	; 232
 e68:	d4 f3       	brlt	.-12     	; 0xe5e <__mulsf3_pse+0x84>
 e6a:	86 95       	lsr	r24
 e6c:	77 95       	ror	r23
 e6e:	67 95       	ror	r22
 e70:	b7 95       	ror	r27
 e72:	f7 95       	ror	r31
 e74:	e7 95       	ror	r30
 e76:	9f 5f       	subi	r25, 0xFF	; 255
 e78:	c1 f7       	brne	.-16     	; 0xe6a <__mulsf3_pse+0x90>
 e7a:	fe 2b       	or	r31, r30
 e7c:	88 0f       	add	r24, r24
 e7e:	91 1d       	adc	r25, r1
 e80:	96 95       	lsr	r25
 e82:	87 95       	ror	r24
 e84:	97 f9       	bld	r25, 7
 e86:	08 95       	ret

00000e88 <memcmp>:
 e88:	fb 01       	movw	r30, r22
 e8a:	dc 01       	movw	r26, r24
 e8c:	04 c0       	rjmp	.+8      	; 0xe96 <memcmp+0xe>
 e8e:	8d 91       	ld	r24, X+
 e90:	01 90       	ld	r0, Z+
 e92:	80 19       	sub	r24, r0
 e94:	21 f4       	brne	.+8      	; 0xe9e <memcmp+0x16>
 e96:	41 50       	subi	r20, 0x01	; 1
 e98:	50 40       	sbci	r21, 0x00	; 0
 e9a:	c8 f7       	brcc	.-14     	; 0xe8e <memcmp+0x6>
 e9c:	88 1b       	sub	r24, r24
 e9e:	99 0b       	sbc	r25, r25
 ea0:	08 95       	ret

00000ea2 <fputc>:
 ea2:	0f 93       	push	r16
 ea4:	1f 93       	push	r17
 ea6:	cf 93       	push	r28
 ea8:	df 93       	push	r29
 eaa:	fb 01       	movw	r30, r22
 eac:	23 81       	ldd	r18, Z+3	; 0x03
 eae:	21 fd       	sbrc	r18, 1
 eb0:	03 c0       	rjmp	.+6      	; 0xeb8 <fputc+0x16>
 eb2:	8f ef       	ldi	r24, 0xFF	; 255
 eb4:	9f ef       	ldi	r25, 0xFF	; 255
 eb6:	2c c0       	rjmp	.+88     	; 0xf10 <fputc+0x6e>
 eb8:	22 ff       	sbrs	r18, 2
 eba:	16 c0       	rjmp	.+44     	; 0xee8 <fputc+0x46>
 ebc:	46 81       	ldd	r20, Z+6	; 0x06
 ebe:	57 81       	ldd	r21, Z+7	; 0x07
 ec0:	24 81       	ldd	r18, Z+4	; 0x04
 ec2:	35 81       	ldd	r19, Z+5	; 0x05
 ec4:	42 17       	cp	r20, r18
 ec6:	53 07       	cpc	r21, r19
 ec8:	44 f4       	brge	.+16     	; 0xeda <fputc+0x38>
 eca:	a0 81       	ld	r26, Z
 ecc:	b1 81       	ldd	r27, Z+1	; 0x01
 ece:	9d 01       	movw	r18, r26
 ed0:	2f 5f       	subi	r18, 0xFF	; 255
 ed2:	3f 4f       	sbci	r19, 0xFF	; 255
 ed4:	31 83       	std	Z+1, r19	; 0x01
 ed6:	20 83       	st	Z, r18
 ed8:	8c 93       	st	X, r24
 eda:	26 81       	ldd	r18, Z+6	; 0x06
 edc:	37 81       	ldd	r19, Z+7	; 0x07
 ede:	2f 5f       	subi	r18, 0xFF	; 255
 ee0:	3f 4f       	sbci	r19, 0xFF	; 255
 ee2:	37 83       	std	Z+7, r19	; 0x07
 ee4:	26 83       	std	Z+6, r18	; 0x06
 ee6:	14 c0       	rjmp	.+40     	; 0xf10 <fputc+0x6e>
 ee8:	8b 01       	movw	r16, r22
 eea:	ec 01       	movw	r28, r24
 eec:	fb 01       	movw	r30, r22
 eee:	00 84       	ldd	r0, Z+8	; 0x08
 ef0:	f1 85       	ldd	r31, Z+9	; 0x09
 ef2:	e0 2d       	mov	r30, r0
 ef4:	09 95       	icall
 ef6:	89 2b       	or	r24, r25
 ef8:	e1 f6       	brne	.-72     	; 0xeb2 <fputc+0x10>
 efa:	d8 01       	movw	r26, r16
 efc:	16 96       	adiw	r26, 0x06	; 6
 efe:	8d 91       	ld	r24, X+
 f00:	9c 91       	ld	r25, X
 f02:	17 97       	sbiw	r26, 0x07	; 7
 f04:	01 96       	adiw	r24, 0x01	; 1
 f06:	17 96       	adiw	r26, 0x07	; 7
 f08:	9c 93       	st	X, r25
 f0a:	8e 93       	st	-X, r24
 f0c:	16 97       	sbiw	r26, 0x06	; 6
 f0e:	ce 01       	movw	r24, r28
 f10:	df 91       	pop	r29
 f12:	cf 91       	pop	r28
 f14:	1f 91       	pop	r17
 f16:	0f 91       	pop	r16
 f18:	08 95       	ret

00000f1a <fwrite>:
 f1a:	a0 e0       	ldi	r26, 0x00	; 0
 f1c:	b0 e0       	ldi	r27, 0x00	; 0
 f1e:	e3 e9       	ldi	r30, 0x93	; 147
 f20:	f7 e0       	ldi	r31, 0x07	; 7
 f22:	0c 94 c7 07 	jmp	0xf8e	; 0xf8e <__prologue_saves__+0xc>
 f26:	5b 01       	movw	r10, r22
 f28:	4a 01       	movw	r8, r20
 f2a:	79 01       	movw	r14, r18
 f2c:	d9 01       	movw	r26, r18
 f2e:	13 96       	adiw	r26, 0x03	; 3
 f30:	2c 91       	ld	r18, X
 f32:	21 ff       	sbrs	r18, 1
 f34:	1d c0       	rjmp	.+58     	; 0xf70 <fwrite+0x56>
 f36:	c0 e0       	ldi	r28, 0x00	; 0
 f38:	d0 e0       	ldi	r29, 0x00	; 0
 f3a:	c8 15       	cp	r28, r8
 f3c:	d9 05       	cpc	r29, r9
 f3e:	d9 f0       	breq	.+54     	; 0xf76 <fwrite+0x5c>
 f40:	8c 01       	movw	r16, r24
 f42:	6c 01       	movw	r12, r24
 f44:	ca 0c       	add	r12, r10
 f46:	db 1c       	adc	r13, r11
 f48:	c8 01       	movw	r24, r16
 f4a:	0c 15       	cp	r16, r12
 f4c:	1d 05       	cpc	r17, r13
 f4e:	71 f0       	breq	.+28     	; 0xf6c <fwrite+0x52>
 f50:	0f 5f       	subi	r16, 0xFF	; 255
 f52:	1f 4f       	sbci	r17, 0xFF	; 255
 f54:	d7 01       	movw	r26, r14
 f56:	18 96       	adiw	r26, 0x08	; 8
 f58:	ed 91       	ld	r30, X+
 f5a:	fc 91       	ld	r31, X
 f5c:	19 97       	sbiw	r26, 0x09	; 9
 f5e:	b7 01       	movw	r22, r14
 f60:	dc 01       	movw	r26, r24
 f62:	8c 91       	ld	r24, X
 f64:	09 95       	icall
 f66:	89 2b       	or	r24, r25
 f68:	79 f3       	breq	.-34     	; 0xf48 <fwrite+0x2e>
 f6a:	05 c0       	rjmp	.+10     	; 0xf76 <fwrite+0x5c>
 f6c:	21 96       	adiw	r28, 0x01	; 1
 f6e:	e5 cf       	rjmp	.-54     	; 0xf3a <fwrite+0x20>
 f70:	80 e0       	ldi	r24, 0x00	; 0
 f72:	90 e0       	ldi	r25, 0x00	; 0
 f74:	01 c0       	rjmp	.+2      	; 0xf78 <fwrite+0x5e>
 f76:	ce 01       	movw	r24, r28
 f78:	cd b7       	in	r28, 0x3d	; 61
 f7a:	de b7       	in	r29, 0x3e	; 62
 f7c:	ec e0       	ldi	r30, 0x0C	; 12
 f7e:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <__epilogue_restores__+0xc>

00000f82 <__prologue_saves__>:
 f82:	2f 92       	push	r2
 f84:	3f 92       	push	r3
 f86:	4f 92       	push	r4
 f88:	5f 92       	push	r5
 f8a:	6f 92       	push	r6
 f8c:	7f 92       	push	r7
 f8e:	8f 92       	push	r8
 f90:	9f 92       	push	r9
 f92:	af 92       	push	r10
 f94:	bf 92       	push	r11
 f96:	cf 92       	push	r12
 f98:	df 92       	push	r13
 f9a:	ef 92       	push	r14
 f9c:	ff 92       	push	r15
 f9e:	0f 93       	push	r16
 fa0:	1f 93       	push	r17
 fa2:	cf 93       	push	r28
 fa4:	df 93       	push	r29
 fa6:	cd b7       	in	r28, 0x3d	; 61
 fa8:	de b7       	in	r29, 0x3e	; 62
 faa:	ca 1b       	sub	r28, r26
 fac:	db 0b       	sbc	r29, r27
 fae:	0f b6       	in	r0, 0x3f	; 63
 fb0:	f8 94       	cli
 fb2:	de bf       	out	0x3e, r29	; 62
 fb4:	0f be       	out	0x3f, r0	; 63
 fb6:	cd bf       	out	0x3d, r28	; 61
 fb8:	09 94       	ijmp

00000fba <__epilogue_restores__>:
 fba:	2a 88       	ldd	r2, Y+18	; 0x12
 fbc:	39 88       	ldd	r3, Y+17	; 0x11
 fbe:	48 88       	ldd	r4, Y+16	; 0x10
 fc0:	5f 84       	ldd	r5, Y+15	; 0x0f
 fc2:	6e 84       	ldd	r6, Y+14	; 0x0e
 fc4:	7d 84       	ldd	r7, Y+13	; 0x0d
 fc6:	8c 84       	ldd	r8, Y+12	; 0x0c
 fc8:	9b 84       	ldd	r9, Y+11	; 0x0b
 fca:	aa 84       	ldd	r10, Y+10	; 0x0a
 fcc:	b9 84       	ldd	r11, Y+9	; 0x09
 fce:	c8 84       	ldd	r12, Y+8	; 0x08
 fd0:	df 80       	ldd	r13, Y+7	; 0x07
 fd2:	ee 80       	ldd	r14, Y+6	; 0x06
 fd4:	fd 80       	ldd	r15, Y+5	; 0x05
 fd6:	0c 81       	ldd	r16, Y+4	; 0x04
 fd8:	1b 81       	ldd	r17, Y+3	; 0x03
 fda:	aa 81       	ldd	r26, Y+2	; 0x02
 fdc:	b9 81       	ldd	r27, Y+1	; 0x01
 fde:	ce 0f       	add	r28, r30
 fe0:	d1 1d       	adc	r29, r1
 fe2:	0f b6       	in	r0, 0x3f	; 63
 fe4:	f8 94       	cli
 fe6:	de bf       	out	0x3e, r29	; 62
 fe8:	0f be       	out	0x3f, r0	; 63
 fea:	cd bf       	out	0x3d, r28	; 61
 fec:	ed 01       	movw	r28, r26
 fee:	08 95       	ret

00000ff0 <_exit>:
 ff0:	f8 94       	cli

00000ff2 <__stop_program>:
 ff2:	ff cf       	rjmp	.-2      	; 0xff2 <__stop_program>
