
Embedded-Final-Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000066  00800100  000008b0  00000944  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008e  00800166  00800166  000009aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00000a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002078  00000000  00000000  00000bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ec6  00000000  00000000  00002c34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f7d  00000000  00000000  00003afa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000434  00000000  00000000  00004a78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000078c  00000000  00000000  00004eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001169  00000000  00000000  00005638  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  000067a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 85 03 	jmp	0x70a	; 0x70a <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 bb 03 	jmp	0x776	; 0x776 <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 eb       	ldi	r30, 0xB0	; 176
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 36       	cpi	r26, 0x66	; 102
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e6       	ldi	r26, 0x66	; 102
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 3f       	cpi	r26, 0xF4	; 244
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <main>
  9e:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init>:
		printByte(uid[byte]);
		uart_send_byte(' ');
	}
	uart_send_byte('\n');
	_delay_ms(2500);
}
  a6:	0e 94 a1 01 	call	0x342	; 0x342 <lcd_init>
  aa:	0e 94 78 03 	call	0x6f0	; 0x6f0 <spi_init>
  ae:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <mfrc522_init>
  b2:	60 e0       	ldi	r22, 0x00	; 0
  b4:	7b e4       	ldi	r23, 0x4B	; 75
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 ca 03 	call	0x794	; 0x794 <uart_init>
  be:	2f ef       	ldi	r18, 0xFF	; 255
  c0:	89 e6       	ldi	r24, 0x69	; 105
  c2:	98 e1       	ldi	r25, 0x18	; 24
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	80 40       	sbci	r24, 0x00	; 0
  c8:	90 40       	sbci	r25, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <init+0x1e>
  cc:	00 c0       	rjmp	.+0      	; 0xce <init+0x28>
  ce:	00 00       	nop
  d0:	e6 e6       	ldi	r30, 0x66	; 102
  d2:	f1 e0       	ldi	r31, 0x01	; 1
  d4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <cardTag>
  d8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <cardTag+0x1>
  dc:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <cardTag+0x2>
  e0:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <cardTag+0x3>
  e4:	80 83       	st	Z, r24
  e6:	91 83       	std	Z+1, r25	; 0x01
  e8:	a2 83       	std	Z+2, r26	; 0x02
  ea:	b3 83       	std	Z+3, r27	; 0x03
  ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  f4:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
  f8:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
  fc:	84 83       	std	Z+4, r24	; 0x04
  fe:	95 83       	std	Z+5, r25	; 0x05
 100:	a6 83       	std	Z+6, r26	; 0x06
 102:	b7 83       	std	Z+7, r27	; 0x07
 104:	08 95       	ret

00000106 <check_if_uid_in_memory>:

uint8_t check_if_uid_in_memory(uint8_t * scannedUid) {
 106:	0f 93       	push	r16
 108:	1f 93       	push	r17
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	8c 01       	movw	r16, r24
	for(int i = 0; i < sizeof(Uids); ++i){
 110:	c0 e0       	ldi	r28, 0x00	; 0
 112:	d0 e0       	ldi	r29, 0x00	; 0
 114:	0f c0       	rjmp	.+30     	; 0x134 <check_if_uid_in_memory+0x2e>
		uint8_t * uid = Uids[i];
 116:	be 01       	movw	r22, r28
 118:	66 0f       	add	r22, r22
 11a:	77 1f       	adc	r23, r23
 11c:	66 0f       	add	r22, r22
 11e:	77 1f       	adc	r23, r23
 120:	6a 59       	subi	r22, 0x9A	; 154
 122:	7e 4f       	sbci	r23, 0xFE	; 254
		if(memcmp(scannedUid, uid, 4) == 0){
 124:	44 e0       	ldi	r20, 0x04	; 4
 126:	50 e0       	ldi	r21, 0x00	; 0
 128:	c8 01       	movw	r24, r16
 12a:	0e 94 49 04 	call	0x892	; 0x892 <memcmp>
 12e:	89 2b       	or	r24, r25
 130:	31 f0       	breq	.+12     	; 0x13e <check_if_uid_in_memory+0x38>
	uart_send_byte('\n');
	_delay_ms(2500);
}

uint8_t check_if_uid_in_memory(uint8_t * scannedUid) {
	for(int i = 0; i < sizeof(Uids); ++i){
 132:	21 96       	adiw	r28, 0x01	; 1
 134:	c8 30       	cpi	r28, 0x08	; 8
 136:	d1 05       	cpc	r29, r1
 138:	70 f3       	brcs	.-36     	; 0x116 <check_if_uid_in_memory+0x10>
		uint8_t * uid = Uids[i];
		if(memcmp(scannedUid, uid, 4) == 0){
			return 1;
		}
	}
	return 0; 
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	01 c0       	rjmp	.+2      	; 0x140 <check_if_uid_in_memory+0x3a>

uint8_t check_if_uid_in_memory(uint8_t * scannedUid) {
	for(int i = 0; i < sizeof(Uids); ++i){
		uint8_t * uid = Uids[i];
		if(memcmp(scannedUid, uid, 4) == 0){
			return 1;
 13e:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0; 

 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	1f 91       	pop	r17
 146:	0f 91       	pop	r16
 148:	08 95       	ret

0000014a <read_card>:
		_delay_ms(1000);

	}
}

void read_card(){
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	cd b7       	in	r28, 0x3d	; 61
 150:	de b7       	in	r29, 0x3e	; 62
 152:	60 97       	sbiw	r28, 0x10	; 16
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	f8 94       	cli
 158:	de bf       	out	0x3e, r29	; 62
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	cd bf       	out	0x3d, r28	; 61
	uint8_t byte; 
	uint8_t str[MAX_LEN];
	
	byte = mfrc522_read(ComIEnReg);
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	0e 94 cc 01 	call	0x398	; 0x398 <mfrc522_read>
	mfrc522_write(ComIEnReg,byte|0x20);
 164:	68 2f       	mov	r22, r24
 166:	60 62       	ori	r22, 0x20	; 32
 168:	82 e0       	ldi	r24, 0x02	; 2
 16a:	0e 94 b9 01 	call	0x372	; 0x372 <mfrc522_write>
	byte = mfrc522_read(DivIEnReg);
 16e:	83 e0       	ldi	r24, 0x03	; 3
 170:	0e 94 cc 01 	call	0x398	; 0x398 <mfrc522_read>
	mfrc522_write(DivIEnReg,byte|0x80);
 174:	68 2f       	mov	r22, r24
 176:	60 68       	ori	r22, 0x80	; 128
 178:	83 e0       	ldi	r24, 0x03	; 3
 17a:	0e 94 b9 01 	call	0x372	; 0x372 <mfrc522_write>
	
	while(1){
		byte = mfrc522_request(PICC_REQALL, str);
 17e:	be 01       	movw	r22, r28
 180:	6f 5f       	subi	r22, 0xFF	; 255
 182:	7f 4f       	sbci	r23, 0xFF	; 255
 184:	82 e5       	ldi	r24, 0x52	; 82
 186:	0e 94 07 03 	call	0x60e	; 0x60e <mfrc522_request>
		
		if(byte == CARD_FOUND) {
 18a:	81 30       	cpi	r24, 0x01	; 1
 18c:	d1 f4       	brne	.+52     	; 0x1c2 <read_card+0x78>
			byte = mfrc522_get_card_serial(str);
 18e:	ce 01       	movw	r24, r28
 190:	01 96       	adiw	r24, 0x01	; 1
 192:	0e 94 3c 03 	call	0x678	; 0x678 <mfrc522_get_card_serial>
			if(byte == CARD_FOUND) {
 196:	81 30       	cpi	r24, 0x01	; 1
 198:	81 f4       	brne	.+32     	; 0x1ba <read_card+0x70>
				if(check_if_uid_in_memory(str)){
 19a:	ce 01       	movw	r24, r28
 19c:	01 96       	adiw	r24, 0x01	; 1
 19e:	0e 94 83 00 	call	0x106	; 0x106 <check_if_uid_in_memory>
 1a2:	88 23       	and	r24, r24
 1a4:	29 f0       	breq	.+10     	; 0x1b0 <read_card+0x66>
					uart_send_string("Access Granted");
 1a6:	86 e3       	ldi	r24, 0x36	; 54
 1a8:	91 e0       	ldi	r25, 0x01	; 1
 1aa:	0e 94 0e 04 	call	0x81c	; 0x81c <uart_send_string>
 1ae:	09 c0       	rjmp	.+18     	; 0x1c2 <read_card+0x78>
				} else {
					uart_send_string("Access Denied");
 1b0:	85 e4       	ldi	r24, 0x45	; 69
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	0e 94 0e 04 	call	0x81c	; 0x81c <uart_send_string>
 1b8:	04 c0       	rjmp	.+8      	; 0x1c2 <read_card+0x78>
				}
			} else {
				uart_send_string("error");
 1ba:	83 e5       	ldi	r24, 0x53	; 83
 1bc:	91 e0       	ldi	r25, 0x01	; 1
 1be:	0e 94 0e 04 	call	0x81c	; 0x81c <uart_send_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c2:	2f ef       	ldi	r18, 0xFF	; 255
 1c4:	83 ed       	ldi	r24, 0xD3	; 211
 1c6:	90 e3       	ldi	r25, 0x30	; 48
 1c8:	21 50       	subi	r18, 0x01	; 1
 1ca:	80 40       	sbci	r24, 0x00	; 0
 1cc:	90 40       	sbci	r25, 0x00	; 0
 1ce:	e1 f7       	brne	.-8      	; 0x1c8 <read_card+0x7e>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <read_card+0x88>
 1d2:	00 00       	nop
 1d4:	d4 cf       	rjmp	.-88     	; 0x17e <read_card+0x34>

000001d6 <main>:
 1d6:	2f ef       	ldi	r18, 0xFF	; 255
 1d8:	80 e7       	ldi	r24, 0x70	; 112
 1da:	92 e0       	ldi	r25, 0x02	; 2
 1dc:	21 50       	subi	r18, 0x01	; 1
 1de:	80 40       	sbci	r24, 0x00	; 0
 1e0:	90 40       	sbci	r25, 0x00	; 0
 1e2:	e1 f7       	brne	.-8      	; 0x1dc <main+0x6>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <main+0x10>
 1e6:	00 00       	nop
}

int main()
{
	_delay_ms(50);
	init();
 1e8:	0e 94 53 00 	call	0xa6	; 0xa6 <init>
	sei();
 1ec:	78 94       	sei
	
	uart_send_string("RFID Reader\n");
 1ee:	89 e5       	ldi	r24, 0x59	; 89
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	0e 94 0e 04 	call	0x81c	; 0x81c <uart_send_string>

	//selfTest();
	
	read_card();
 1f6:	0e 94 a5 00 	call	0x14a	; 0x14a <read_card>

000001fa <hd44780_outnibble>:
/*
 * Send one nibble out to the LCD controller.
 */
static void hd44780_outnibble(uint8_t n, uint8_t rs)
{
  CLR(PORT, HD44780_RW);
 1fa:	9b b1       	in	r25, 0x0b	; 11
 1fc:	9f 7b       	andi	r25, 0xBF	; 191
 1fe:	9b b9       	out	0x0b, r25	; 11
  if (rs)
 200:	66 23       	and	r22, r22
 202:	21 f0       	breq	.+8      	; 0x20c <hd44780_outnibble+0x12>
    SET(PORT, HD44780_RS);
 204:	9b b1       	in	r25, 0x0b	; 11
 206:	90 68       	ori	r25, 0x80	; 128
 208:	9b b9       	out	0x0b, r25	; 11
 20a:	03 c0       	rjmp	.+6      	; 0x212 <hd44780_outnibble+0x18>
  else
    CLR(PORT, HD44780_RS);
 20c:	9b b1       	in	r25, 0x0b	; 11
 20e:	9f 77       	andi	r25, 0x7F	; 127
 210:	9b b9       	out	0x0b, r25	; 11
  ASSIGN(PORT, HD44780_D4, n);
 212:	2b b1       	in	r18, 0x0b	; 11
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	92 2f       	mov	r25, r18
 21c:	91 7e       	andi	r25, 0xE1	; 225
 21e:	89 2b       	or	r24, r25
 220:	8b b9       	out	0x0b, r24	; 11
static inline uint8_t hd44780_pulse_e(bool readback) __attribute__((always_inline));

static inline uint8_t hd44780_pulse_e(bool readback) {
  uint8_t x;

  SET(PORT, HD44780_E);
 222:	8b b1       	in	r24, 0x0b	; 11
 224:	80 62       	ori	r24, 0x20	; 32
 226:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 228:	82 e0       	ldi	r24, 0x02	; 2
 22a:	8a 95       	dec	r24
 22c:	f1 f7       	brne	.-4      	; 0x22a <hd44780_outnibble+0x30>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <hd44780_outnibble+0x36>
#endif
  if (readback)
    x = READ(PIN, HD44780_D4);
  else
    x = 0;
  CLR(PORT, HD44780_E);
 230:	8b b1       	in	r24, 0x0b	; 11
 232:	8f 7d       	andi	r24, 0xDF	; 223
 234:	8b b9       	out	0x0b, r24	; 11
 236:	08 95       	ret

00000238 <hd44780_innibble>:
 */
static uint8_t hd44780_innibble(uint8_t rs)
{
  uint8_t x;

  SET(PORT, HD44780_RW);
 238:	9b b1       	in	r25, 0x0b	; 11
 23a:	90 64       	ori	r25, 0x40	; 64
 23c:	9b b9       	out	0x0b, r25	; 11
  ASSIGN(DDR, HD44780_D4, 0x00);
 23e:	9a b1       	in	r25, 0x0a	; 10
 240:	91 7e       	andi	r25, 0xE1	; 225
 242:	9a b9       	out	0x0a, r25	; 10
  if (rs)
 244:	88 23       	and	r24, r24
 246:	21 f0       	breq	.+8      	; 0x250 <hd44780_innibble+0x18>
    SET(PORT, HD44780_RS);
 248:	8b b1       	in	r24, 0x0b	; 11
 24a:	80 68       	ori	r24, 0x80	; 128
 24c:	8b b9       	out	0x0b, r24	; 11
 24e:	03 c0       	rjmp	.+6      	; 0x256 <hd44780_innibble+0x1e>
  else
    CLR(PORT, HD44780_RS);
 250:	8b b1       	in	r24, 0x0b	; 11
 252:	8f 77       	andi	r24, 0x7F	; 127
 254:	8b b9       	out	0x0b, r24	; 11
static inline uint8_t hd44780_pulse_e(bool readback) __attribute__((always_inline));

static inline uint8_t hd44780_pulse_e(bool readback) {
  uint8_t x;

  SET(PORT, HD44780_E);
 256:	8b b1       	in	r24, 0x0b	; 11
 258:	80 62       	ori	r24, 0x20	; 32
 25a:	8b b9       	out	0x0b, r24	; 11
 25c:	82 e0       	ldi	r24, 0x02	; 2
 25e:	8a 95       	dec	r24
 260:	f1 f7       	brne	.-4      	; 0x25e <hd44780_innibble+0x26>
 262:	00 c0       	rjmp	.+0      	; 0x264 <hd44780_innibble+0x2c>
  __asm__ volatile("nop");
#    endif /* F_CPU > 2000000UL */
#  endif /* F_CPU > 1000000UL */
#endif
  if (readback)
    x = READ(PIN, HD44780_D4);
 264:	89 b1       	in	r24, 0x09	; 9
 266:	8e 71       	andi	r24, 0x1E	; 30
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	95 95       	asr	r25
 26c:	87 95       	ror	r24
  else
    x = 0;
  CLR(PORT, HD44780_E);
 26e:	9b b1       	in	r25, 0x0b	; 11
 270:	9f 7d       	andi	r25, 0xDF	; 223
 272:	9b b9       	out	0x0b, r25	; 11
  if (rs)
    SET(PORT, HD44780_RS);
  else
    CLR(PORT, HD44780_RS);
  x = hd44780_pulse_e(true);
  ASSIGN(DDR, HD44780_D4, 0x0F);
 274:	9a b1       	in	r25, 0x0a	; 10
 276:	9e 61       	ori	r25, 0x1E	; 30
 278:	9a b9       	out	0x0a, r25	; 10
  CLR(PORT, HD44780_RW);
 27a:	9b b1       	in	r25, 0x0b	; 11
 27c:	9f 7b       	andi	r25, 0xBF	; 191
 27e:	9b b9       	out	0x0b, r25	; 11

  return x;
}
 280:	08 95       	ret

00000282 <hd44780_outbyte>:
/*
 * Send one byte to the LCD controller.  As we are in 4-bit mode, we
 * have to send two nibbles.
 */
void hd44780_outbyte(uint8_t b, uint8_t rs)
{
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	c8 2f       	mov	r28, r24
 288:	d6 2f       	mov	r29, r22
  hd44780_outnibble(b >> 4, rs);
 28a:	82 95       	swap	r24
 28c:	8f 70       	andi	r24, 0x0F	; 15
 28e:	0e 94 fd 00 	call	0x1fa	; 0x1fa <hd44780_outnibble>
  hd44780_outnibble(b & 0xf, rs);
 292:	6d 2f       	mov	r22, r29
 294:	8c 2f       	mov	r24, r28
 296:	8f 70       	andi	r24, 0x0F	; 15
 298:	0e 94 fd 00 	call	0x1fa	; 0x1fa <hd44780_outnibble>
}
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	08 95       	ret

000002a2 <hd44780_inbyte>:

/*
 * Read one byte (i.e. two nibbles) from the LCD controller.
 */
uint8_t hd44780_inbyte(uint8_t rs)
{
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
 2a6:	c8 2f       	mov	r28, r24
  uint8_t x;

  x = hd44780_innibble(rs) << 4;
 2a8:	0e 94 1c 01 	call	0x238	; 0x238 <hd44780_innibble>
 2ac:	d8 2f       	mov	r29, r24
 2ae:	d2 95       	swap	r29
 2b0:	d0 7f       	andi	r29, 0xF0	; 240
  x |= hd44780_innibble(rs);
 2b2:	8c 2f       	mov	r24, r28
 2b4:	0e 94 1c 01 	call	0x238	; 0x238 <hd44780_innibble>

  return x;
}
 2b8:	8d 2b       	or	r24, r29
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	08 95       	ret

000002c0 <hd44780_wait_ready>:
 * Wait until the busy flag is cleared.
 */
void hd44780_wait_ready(bool longwait)
{
#if USE_BUSY_BIT
  while (hd44780_incmd() & HD44780_BUSYFLAG) ;
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	0e 94 51 01 	call	0x2a2	; 0x2a2 <hd44780_inbyte>
 2c6:	88 23       	and	r24, r24
 2c8:	dc f3       	brlt	.-10     	; 0x2c0 <hd44780_wait_ready>
  if (longwait)
    _delay_ms(1.52);
  else
    _delay_us(37);
#endif
}
 2ca:	08 95       	ret

000002cc <hd44780_init>:
{
  //SET(DDR, HD44780_RS);
  //SET(DDR, HD44780_RW);
  //SET(DDR, HD44780_E);
  //ASSIGN(DDR, HD44780_D4, 0x0F);
  DDRD |= 0b11111110;
 2cc:	8a b1       	in	r24, 0x0a	; 10
 2ce:	8e 6f       	ori	r24, 0xFE	; 254
 2d0:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d2:	8f e5       	ldi	r24, 0x5F	; 95
 2d4:	9a ee       	ldi	r25, 0xEA	; 234
 2d6:	01 97       	sbiw	r24, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <hd44780_init+0xa>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <hd44780_init+0x10>
 2dc:	00 00       	nop

  _delay_ms(15);		/* 40 ms needed for Vcc = 2.7 V */
  hd44780_outnibble(HD44780_FNSET(1, 0, 0) >> 4, 0);
 2de:	60 e0       	ldi	r22, 0x00	; 0
 2e0:	83 e0       	ldi	r24, 0x03	; 3
 2e2:	0e 94 fd 00 	call	0x1fa	; 0x1fa <hd44780_outnibble>
 2e6:	8f e0       	ldi	r24, 0x0F	; 15
 2e8:	90 e4       	ldi	r25, 0x40	; 64
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <hd44780_init+0x1e>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <hd44780_init+0x24>
 2f0:	00 00       	nop
  _delay_ms(4.1);
  hd44780_outnibble(HD44780_FNSET(1, 0, 0) >> 4, 0);
 2f2:	60 e0       	ldi	r22, 0x00	; 0
 2f4:	83 e0       	ldi	r24, 0x03	; 3
 2f6:	0e 94 fd 00 	call	0x1fa	; 0x1fa <hd44780_outnibble>
 2fa:	8f e8       	ldi	r24, 0x8F	; 143
 2fc:	91 e0       	ldi	r25, 0x01	; 1
 2fe:	01 97       	sbiw	r24, 0x01	; 1
 300:	f1 f7       	brne	.-4      	; 0x2fe <hd44780_init+0x32>
 302:	00 c0       	rjmp	.+0      	; 0x304 <hd44780_init+0x38>
 304:	00 00       	nop
  _delay_ms(0.1);
  hd44780_outnibble(HD44780_FNSET(1, 0, 0) >> 4, 0);
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	83 e0       	ldi	r24, 0x03	; 3
 30a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <hd44780_outnibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 30e:	95 ec       	ldi	r25, 0xC5	; 197
 310:	9a 95       	dec	r25
 312:	f1 f7       	brne	.-4      	; 0x310 <hd44780_init+0x44>
 314:	00 00       	nop
  _delay_us(37);

  hd44780_outnibble(HD44780_FNSET(0, 1, 0) >> 4, 0);
 316:	60 e0       	ldi	r22, 0x00	; 0
 318:	82 e0       	ldi	r24, 0x02	; 2
 31a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <hd44780_outnibble>
  hd44780_wait_ready(false);
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	0e 94 60 01 	call	0x2c0	; 0x2c0 <hd44780_wait_ready>
  hd44780_outcmd(HD44780_FNSET(0, 1, 0));
 324:	60 e0       	ldi	r22, 0x00	; 0
 326:	88 e2       	ldi	r24, 0x28	; 40
 328:	0e 94 41 01 	call	0x282	; 0x282 <hd44780_outbyte>
  hd44780_wait_ready(false);
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	0e 94 60 01 	call	0x2c0	; 0x2c0 <hd44780_wait_ready>
  hd44780_outcmd(HD44780_DISPCTL(0, 0, 0));
 332:	60 e0       	ldi	r22, 0x00	; 0
 334:	88 e0       	ldi	r24, 0x08	; 8
 336:	0e 94 41 01 	call	0x282	; 0x282 <hd44780_outbyte>
  hd44780_wait_ready(false);
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	0e 94 60 01 	call	0x2c0	; 0x2c0 <hd44780_wait_ready>
 340:	08 95       	ret

00000342 <lcd_init>:
 * Setup the LCD controller.  First, call the hardware initialization
 * function, then adjust the display attributes we want.
 */
void lcd_init(void) {

  hd44780_init();
 342:	0e 94 66 01 	call	0x2cc	; 0x2cc <hd44780_init>

  /*
   * Clear the display.
   */
  hd44780_outcmd(HD44780_CLR);
 346:	60 e0       	ldi	r22, 0x00	; 0
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	0e 94 41 01 	call	0x282	; 0x282 <hd44780_outbyte>
  hd44780_wait_ready(true);
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	0e 94 60 01 	call	0x2c0	; 0x2c0 <hd44780_wait_ready>

  /*
   * Entry mode: auto-increment address counter, no display shift in
   * effect.
   */
  hd44780_outcmd(HD44780_ENTMODE(1, 0));
 354:	60 e0       	ldi	r22, 0x00	; 0
 356:	86 e0       	ldi	r24, 0x06	; 6
 358:	0e 94 41 01 	call	0x282	; 0x282 <hd44780_outbyte>
  hd44780_wait_ready(false);
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	0e 94 60 01 	call	0x2c0	; 0x2c0 <hd44780_wait_ready>

  /*
   * Enable display, activate non-blinking cursor.
   */
  hd44780_outcmd(HD44780_DISPCTL(1, 1, 0));
 362:	60 e0       	ldi	r22, 0x00	; 0
 364:	8e e0       	ldi	r24, 0x0E	; 14
 366:	0e 94 41 01 	call	0x282	; 0x282 <hd44780_outbyte>
  hd44780_wait_ready(false);
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	0e 94 60 01 	call	0x2c0	; 0x2c0 <hd44780_wait_ready>
 370:	08 95       	ret

00000372 <mfrc522_write>:
		mfrc522_write(TxControlReg,byte|0x03);
	}
}

void mfrc522_write(uint8_t reg, uint8_t data)
{
 372:	cf 93       	push	r28
 374:	c6 2f       	mov	r28, r22
	ENABLE_CHIP();
 376:	95 b1       	in	r25, 0x05	; 5
 378:	9b 7f       	andi	r25, 0xFB	; 251
 37a:	95 b9       	out	0x05, r25	; 5
	spi_transmit((reg<<1)&0x7E);
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	88 0f       	add	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	8e 77       	andi	r24, 0x7E	; 126
 384:	0e 94 7f 03 	call	0x6fe	; 0x6fe <spi_transmit>
	spi_transmit(data);
 388:	8c 2f       	mov	r24, r28
 38a:	0e 94 7f 03 	call	0x6fe	; 0x6fe <spi_transmit>
	DISABLE_CHIP();
 38e:	85 b1       	in	r24, 0x05	; 5
 390:	84 60       	ori	r24, 0x04	; 4
 392:	85 b9       	out	0x05, r24	; 5
}
 394:	cf 91       	pop	r28
 396:	08 95       	ret

00000398 <mfrc522_read>:

uint8_t mfrc522_read(uint8_t reg)
{
	uint8_t data;	
	ENABLE_CHIP();
 398:	95 b1       	in	r25, 0x05	; 5
 39a:	9b 7f       	andi	r25, 0xFB	; 251
 39c:	95 b9       	out	0x05, r25	; 5
	spi_transmit(((reg<<1)&0x7E)|0x80);
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	88 0f       	add	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	8e 77       	andi	r24, 0x7E	; 126
 3a6:	80 68       	ori	r24, 0x80	; 128
 3a8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <spi_transmit>
	data = spi_transmit(0x00);
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	0e 94 7f 03 	call	0x6fe	; 0x6fe <spi_transmit>
	DISABLE_CHIP();
 3b2:	95 b1       	in	r25, 0x05	; 5
 3b4:	94 60       	ori	r25, 0x04	; 4
 3b6:	95 b9       	out	0x05, r25	; 5
	return data;
}
 3b8:	08 95       	ret

000003ba <mfrc522_reset>:

void mfrc522_reset()
{
	mfrc522_write(CommandReg, SoftReset_CMD);
 3ba:	6f e0       	ldi	r22, 0x0F	; 15
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	0e 94 b9 01 	call	0x372	; 0x372 <mfrc522_write>
 3c2:	08 95       	ret

000003c4 <mfrc522_init>:
#include "spi.h"

void mfrc522_init()
{
	uint8_t byte;
	mfrc522_reset();
 3c4:	0e 94 dd 01 	call	0x3ba	; 0x3ba <mfrc522_reset>
	
	mfrc522_write(TModeReg, 0x8D);
 3c8:	6d e8       	ldi	r22, 0x8D	; 141
 3ca:	8a e2       	ldi	r24, 0x2A	; 42
 3cc:	0e 94 b9 01 	call	0x372	; 0x372 <mfrc522_write>
    mfrc522_write(TPrescalerReg, 0x3E);
 3d0:	6e e3       	ldi	r22, 0x3E	; 62
 3d2:	8b e2       	ldi	r24, 0x2B	; 43
 3d4:	0e 94 b9 01 	call	0x372	; 0x372 <mfrc522_write>
    mfrc522_write(TReloadReg_1, 30);   
 3d8:	6e e1       	ldi	r22, 0x1E	; 30
 3da:	8c e2       	ldi	r24, 0x2C	; 44
 3dc:	0e 94 b9 01 	call	0x372	; 0x372 <mfrc522_write>
    mfrc522_write(TReloadReg_2, 0);	
 3e0:	60 e0       	ldi	r22, 0x00	; 0
 3e2:	8d e2       	ldi	r24, 0x2D	; 45
 3e4:	0e 94 b9 01 	call	0x372	; 0x372 <mfrc522_write>
	mfrc522_write(TxASKReg, 0x40);	
 3e8:	60 e4       	ldi	r22, 0x40	; 64
 3ea:	85 e1       	ldi	r24, 0x15	; 21
 3ec:	0e 94 b9 01 	call	0x372	; 0x372 <mfrc522_write>
	mfrc522_write(ModeReg, 0x3D);
 3f0:	6d e3       	ldi	r22, 0x3D	; 61
 3f2:	81 e1       	ldi	r24, 0x11	; 17
 3f4:	0e 94 b9 01 	call	0x372	; 0x372 <mfrc522_write>
	
	byte = mfrc522_read(TxControlReg);
 3f8:	84 e1       	ldi	r24, 0x14	; 20
 3fa:	0e 94 cc 01 	call	0x398	; 0x398 <mfrc522_read>
	if(!(byte&0x03))
 3fe:	98 2f       	mov	r25, r24
 400:	93 70       	andi	r25, 0x03	; 3
 402:	29 f4       	brne	.+10     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
	{
		mfrc522_write(TxControlReg,byte|0x03);
 404:	68 2f       	mov	r22, r24
 406:	63 60       	ori	r22, 0x03	; 3
 408:	84 e1       	ldi	r24, 0x14	; 20
 40a:	0e 94 b9 01 	call	0x372	; 0x372 <mfrc522_write>
 40e:	08 95       	ret

00000410 <mfrc522_to_card>:
   
	return status;
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
 410:	4f 92       	push	r4
 412:	5f 92       	push	r5
 414:	6f 92       	push	r6
 416:	7f 92       	push	r7
 418:	8f 92       	push	r8
 41a:	9f 92       	push	r9
 41c:	af 92       	push	r10
 41e:	bf 92       	push	r11
 420:	cf 92       	push	r12
 422:	df 92       	push	r13
 424:	ef 92       	push	r14
 426:	ff 92       	push	r15
 428:	0f 93       	push	r16
 42a:	1f 93       	push	r17
 42c:	cf 93       	push	r28
 42e:	df 93       	push	r29
 430:	d8 2f       	mov	r29, r24
 432:	7b 01       	movw	r14, r22
 434:	c4 2f       	mov	r28, r20
 436:	59 01       	movw	r10, r18
    uint8_t lastBits;
    uint8_t n;
    uint8_t	tmp;
    uint32_t i;

    switch (cmd)
 438:	8c 30       	cpi	r24, 0x0C	; 12
 43a:	29 f0       	breq	.+10     	; 0x446 <mfrc522_to_card+0x36>
 43c:	8e 30       	cpi	r24, 0x0E	; 14
 43e:	61 f0       	breq	.+24     	; 0x458 <mfrc522_to_card+0x48>

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
    uint8_t irqEn = 0x00;
    uint8_t waitIRq = 0x00;
 440:	91 2c       	mov	r9, r1
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
    uint8_t irqEn = 0x00;
 442:	81 2c       	mov	r8, r1
 444:	10 c0       	rjmp	.+32     	; 0x466 <mfrc522_to_card+0x56>
			break;
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
			waitIRq = 0x30;
 446:	0f 2e       	mov	r0, r31
 448:	f0 e3       	ldi	r31, 0x30	; 48
 44a:	9f 2e       	mov	r9, r31
 44c:	f0 2d       	mov	r31, r0
			waitIRq = 0x10;
			break;
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
 44e:	0f 2e       	mov	r0, r31
 450:	f7 e7       	ldi	r31, 0x77	; 119
 452:	8f 2e       	mov	r8, r31
 454:	f0 2d       	mov	r31, r0
			waitIRq = 0x30;
			break;
 456:	07 c0       	rjmp	.+14     	; 0x466 <mfrc522_to_card+0x56>
    switch (cmd)
    {
        case MFAuthent_CMD:		//Certification cards close
		{
			irqEn = 0x12;
			waitIRq = 0x10;
 458:	68 94       	set
 45a:	99 24       	eor	r9, r9
 45c:	94 f8       	bld	r9, 4

    switch (cmd)
    {
        case MFAuthent_CMD:		//Certification cards close
		{
			irqEn = 0x12;
 45e:	0f 2e       	mov	r0, r31
 460:	f2 e1       	ldi	r31, 0x12	; 18
 462:	8f 2e       	mov	r8, r31
 464:	f0 2d       	mov	r31, r0
		default:
			break;
    }
   
    //mfrc522_write(ComIEnReg, irqEn|0x80);	//Interrupt request
    n=mfrc522_read(ComIrqReg);
 466:	84 e0       	ldi	r24, 0x04	; 4
 468:	0e 94 cc 01 	call	0x398	; 0x398 <mfrc522_read>
    mfrc522_write(ComIrqReg,n&(~0x80));//clear all interrupt bits
 46c:	68 2f       	mov	r22, r24
 46e:	6f 77       	andi	r22, 0x7F	; 127
 470:	84 e0       	ldi	r24, 0x04	; 4
 472:	0e 94 b9 01 	call	0x372	; 0x372 <mfrc522_write>
    n=mfrc522_read(FIFOLevelReg);
 476:	8a e0       	ldi	r24, 0x0A	; 10
 478:	0e 94 cc 01 	call	0x398	; 0x398 <mfrc522_read>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
 47c:	68 2f       	mov	r22, r24
 47e:	60 68       	ori	r22, 0x80	; 128
 480:	8a e0       	ldi	r24, 0x0A	; 10
 482:	0e 94 b9 01 	call	0x372	; 0x372 <mfrc522_write>
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???
 486:	60 e0       	ldi	r22, 0x00	; 0
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	0e 94 b9 01 	call	0x372	; 0x372 <mfrc522_write>

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
 48e:	41 2c       	mov	r4, r1
 490:	51 2c       	mov	r5, r1
 492:	32 01       	movw	r6, r4
 494:	0c c0       	rjmp	.+24     	; 0x4ae <mfrc522_to_card+0x9e>
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
 496:	f7 01       	movw	r30, r14
 498:	e4 0d       	add	r30, r4
 49a:	f5 1d       	adc	r31, r5
 49c:	60 81       	ld	r22, Z
 49e:	89 e0       	ldi	r24, 0x09	; 9
 4a0:	0e 94 b9 01 	call	0x372	; 0x372 <mfrc522_write>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
 4a4:	8f ef       	ldi	r24, 0xFF	; 255
 4a6:	48 1a       	sub	r4, r24
 4a8:	58 0a       	sbc	r5, r24
 4aa:	68 0a       	sbc	r6, r24
 4ac:	78 0a       	sbc	r7, r24
 4ae:	8c 2f       	mov	r24, r28
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	a0 e0       	ldi	r26, 0x00	; 0
 4b4:	b0 e0       	ldi	r27, 0x00	; 0
 4b6:	48 16       	cp	r4, r24
 4b8:	59 06       	cpc	r5, r25
 4ba:	6a 06       	cpc	r6, r26
 4bc:	7b 06       	cpc	r7, r27
 4be:	58 f3       	brcs	.-42     	; 0x496 <mfrc522_to_card+0x86>
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
	}

	//Execute the cmd
	mfrc522_write(CommandReg, cmd);
 4c0:	6d 2f       	mov	r22, r29
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	0e 94 b9 01 	call	0x372	; 0x372 <mfrc522_write>
    if (cmd == Transceive_CMD)
 4c8:	dc 30       	cpi	r29, 0x0C	; 12
 4ca:	41 f4       	brne	.+16     	; 0x4dc <mfrc522_to_card+0xcc>
    {    
		n=mfrc522_read(BitFramingReg);
 4cc:	8d e0       	ldi	r24, 0x0D	; 13
 4ce:	0e 94 cc 01 	call	0x398	; 0x398 <mfrc522_read>
		mfrc522_write(BitFramingReg,n|0x80);  
 4d2:	68 2f       	mov	r22, r24
 4d4:	60 68       	ori	r22, 0x80	; 128
 4d6:	8d e0       	ldi	r24, 0x0D	; 13
 4d8:	0e 94 b9 01 	call	0x372	; 0x372 <mfrc522_write>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
 4dc:	0f 2e       	mov	r0, r31
 4de:	f0 ed       	ldi	r31, 0xD0	; 208
 4e0:	cf 2e       	mov	r12, r31
 4e2:	f7 e0       	ldi	r31, 0x07	; 7
 4e4:	df 2e       	mov	r13, r31
 4e6:	e1 2c       	mov	r14, r1
 4e8:	f1 2c       	mov	r15, r1
 4ea:	f0 2d       	mov	r31, r0
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = mfrc522_read(ComIrqReg);
 4ec:	84 e0       	ldi	r24, 0x04	; 4
 4ee:	0e 94 cc 01 	call	0x398	; 0x398 <mfrc522_read>
 4f2:	c8 2f       	mov	r28, r24
        i--;
 4f4:	e1 e0       	ldi	r30, 0x01	; 1
 4f6:	ce 1a       	sub	r12, r30
 4f8:	d1 08       	sbc	r13, r1
 4fa:	e1 08       	sbc	r14, r1
 4fc:	f1 08       	sbc	r15, r1
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 4fe:	29 f0       	breq	.+10     	; 0x50a <mfrc522_to_card+0xfa>
 500:	80 fd       	sbrc	r24, 0
 502:	03 c0       	rjmp	.+6      	; 0x50a <mfrc522_to_card+0xfa>
 504:	89 2d       	mov	r24, r9
 506:	8c 23       	and	r24, r28
 508:	89 f3       	breq	.-30     	; 0x4ec <mfrc522_to_card+0xdc>

	tmp=mfrc522_read(BitFramingReg);
 50a:	8d e0       	ldi	r24, 0x0D	; 13
 50c:	0e 94 cc 01 	call	0x398	; 0x398 <mfrc522_read>
	mfrc522_write(BitFramingReg,tmp&(~0x80));
 510:	68 2f       	mov	r22, r24
 512:	6f 77       	andi	r22, 0x7F	; 127
 514:	8d e0       	ldi	r24, 0x0D	; 13
 516:	0e 94 b9 01 	call	0x372	; 0x372 <mfrc522_write>
	
    if (i != 0)
 51a:	cd 28       	or	r12, r13
 51c:	ce 28       	or	r12, r14
 51e:	cf 28       	or	r12, r15
 520:	09 f4       	brne	.+2      	; 0x524 <mfrc522_to_card+0x114>
 522:	60 c0       	rjmp	.+192    	; 0x5e4 <mfrc522_to_card+0x1d4>
    {    
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 524:	86 e0       	ldi	r24, 0x06	; 6
 526:	0e 94 cc 01 	call	0x398	; 0x398 <mfrc522_read>
 52a:	8b 71       	andi	r24, 0x1B	; 27
 52c:	09 f0       	breq	.+2      	; 0x530 <mfrc522_to_card+0x120>
 52e:	5c c0       	rjmp	.+184    	; 0x5e8 <mfrc522_to_card+0x1d8>
        {
            status = CARD_FOUND;
            if (n & irqEn & 0x01)
 530:	c8 21       	and	r28, r8
 532:	c0 fd       	sbrc	r28, 0
 534:	02 c0       	rjmp	.+4      	; 0x53a <mfrc522_to_card+0x12a>
	
    if (i != 0)
    {    
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
        {
            status = CARD_FOUND;
 536:	c1 e0       	ldi	r28, 0x01	; 1
 538:	01 c0       	rjmp	.+2      	; 0x53c <mfrc522_to_card+0x12c>
            if (n & irqEn & 0x01)
            {   
				status = CARD_NOT_FOUND;			//??   
 53a:	c2 e0       	ldi	r28, 0x02	; 2
			}

            if (cmd == Transceive_CMD)
 53c:	dc 30       	cpi	r29, 0x0C	; 12
 53e:	09 f0       	breq	.+2      	; 0x542 <mfrc522_to_card+0x132>
 540:	54 c0       	rjmp	.+168    	; 0x5ea <mfrc522_to_card+0x1da>
            {
               	n = mfrc522_read(FIFOLevelReg);
 542:	8a e0       	ldi	r24, 0x0A	; 10
 544:	0e 94 cc 01 	call	0x398	; 0x398 <mfrc522_read>
 548:	d8 2f       	mov	r29, r24
              	lastBits = mfrc522_read(ControlReg) & 0x07;
 54a:	8c e0       	ldi	r24, 0x0C	; 12
 54c:	0e 94 cc 01 	call	0x398	; 0x398 <mfrc522_read>
 550:	28 2f       	mov	r18, r24
 552:	27 70       	andi	r18, 0x07	; 7
                if (lastBits)
 554:	a9 f0       	breq	.+42     	; 0x580 <mfrc522_to_card+0x170>
                {   
					*back_data_len = (n-1)*8 + lastBits;   
 556:	8d 2f       	mov	r24, r29
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	01 97       	sbiw	r24, 0x01	; 1
 55c:	88 0f       	add	r24, r24
 55e:	99 1f       	adc	r25, r25
 560:	88 0f       	add	r24, r24
 562:	99 1f       	adc	r25, r25
 564:	88 0f       	add	r24, r24
 566:	99 1f       	adc	r25, r25
 568:	82 0f       	add	r24, r18
 56a:	91 1d       	adc	r25, r1
 56c:	09 2e       	mov	r0, r25
 56e:	00 0c       	add	r0, r0
 570:	aa 0b       	sbc	r26, r26
 572:	bb 0b       	sbc	r27, r27
 574:	f8 01       	movw	r30, r16
 576:	80 83       	st	Z, r24
 578:	91 83       	std	Z+1, r25	; 0x01
 57a:	a2 83       	std	Z+2, r26	; 0x02
 57c:	b3 83       	std	Z+3, r27	; 0x03
 57e:	11 c0       	rjmp	.+34     	; 0x5a2 <mfrc522_to_card+0x192>
				}
                else
                {   
					*back_data_len = n*8;   
 580:	8d 2f       	mov	r24, r29
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	88 0f       	add	r24, r24
 586:	99 1f       	adc	r25, r25
 588:	88 0f       	add	r24, r24
 58a:	99 1f       	adc	r25, r25
 58c:	88 0f       	add	r24, r24
 58e:	99 1f       	adc	r25, r25
 590:	09 2e       	mov	r0, r25
 592:	00 0c       	add	r0, r0
 594:	aa 0b       	sbc	r26, r26
 596:	bb 0b       	sbc	r27, r27
 598:	f8 01       	movw	r30, r16
 59a:	80 83       	st	Z, r24
 59c:	91 83       	std	Z+1, r25	; 0x01
 59e:	a2 83       	std	Z+2, r26	; 0x02
 5a0:	b3 83       	std	Z+3, r27	; 0x03
				}

                if (n == 0)
 5a2:	d1 11       	cpse	r29, r1
 5a4:	01 c0       	rjmp	.+2      	; 0x5a8 <mfrc522_to_card+0x198>
                {   
					n = 1;    
 5a6:	d1 e0       	ldi	r29, 0x01	; 1
				}
                if (n > MAX_LEN)
 5a8:	d1 31       	cpi	r29, 0x11	; 17
 5aa:	08 f0       	brcs	.+2      	; 0x5ae <mfrc522_to_card+0x19e>
                {   
					n = MAX_LEN;   
 5ac:	d0 e1       	ldi	r29, 0x10	; 16
				}
				
				//Reading the received data in FIFO
                for (i=0; i<n; i++)
 5ae:	c1 2c       	mov	r12, r1
 5b0:	d1 2c       	mov	r13, r1
 5b2:	76 01       	movw	r14, r12
 5b4:	0d c0       	rjmp	.+26     	; 0x5d0 <mfrc522_to_card+0x1c0>
                {   
					back_data[i] = mfrc522_read(FIFODataReg);    
 5b6:	85 01       	movw	r16, r10
 5b8:	0c 0d       	add	r16, r12
 5ba:	1d 1d       	adc	r17, r13
 5bc:	89 e0       	ldi	r24, 0x09	; 9
 5be:	0e 94 cc 01 	call	0x398	; 0x398 <mfrc522_read>
 5c2:	f8 01       	movw	r30, r16
 5c4:	80 83       	st	Z, r24
                {   
					n = MAX_LEN;   
				}
				
				//Reading the received data in FIFO
                for (i=0; i<n; i++)
 5c6:	ff ef       	ldi	r31, 0xFF	; 255
 5c8:	cf 1a       	sub	r12, r31
 5ca:	df 0a       	sbc	r13, r31
 5cc:	ef 0a       	sbc	r14, r31
 5ce:	ff 0a       	sbc	r15, r31
 5d0:	8d 2f       	mov	r24, r29
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	a0 e0       	ldi	r26, 0x00	; 0
 5d6:	b0 e0       	ldi	r27, 0x00	; 0
 5d8:	c8 16       	cp	r12, r24
 5da:	d9 06       	cpc	r13, r25
 5dc:	ea 06       	cpc	r14, r26
 5de:	fb 06       	cpc	r15, r27
 5e0:	50 f3       	brcs	.-44     	; 0x5b6 <mfrc522_to_card+0x1a6>
 5e2:	03 c0       	rjmp	.+6      	; 0x5ea <mfrc522_to_card+0x1da>
	return status;
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
 5e4:	c3 e0       	ldi	r28, 0x03	; 3
 5e6:	01 c0       	rjmp	.+2      	; 0x5ea <mfrc522_to_card+0x1da>
				}
            }
        }
        else
        {   
			status = ERROR;  
 5e8:	c3 e0       	ldi	r28, 0x03	; 3
	
    //SetBitMask(ControlReg,0x80);           //timer stops
    //mfrc522_write(cmdReg, PCD_IDLE); 

    return status;
}
 5ea:	8c 2f       	mov	r24, r28
 5ec:	df 91       	pop	r29
 5ee:	cf 91       	pop	r28
 5f0:	1f 91       	pop	r17
 5f2:	0f 91       	pop	r16
 5f4:	ff 90       	pop	r15
 5f6:	ef 90       	pop	r14
 5f8:	df 90       	pop	r13
 5fa:	cf 90       	pop	r12
 5fc:	bf 90       	pop	r11
 5fe:	af 90       	pop	r10
 600:	9f 90       	pop	r9
 602:	8f 90       	pop	r8
 604:	7f 90       	pop	r7
 606:	6f 90       	pop	r6
 608:	5f 90       	pop	r5
 60a:	4f 90       	pop	r4
 60c:	08 95       	ret

0000060e <mfrc522_request>:
{
	mfrc522_write(CommandReg, SoftReset_CMD);
}

uint8_t	mfrc522_request(uint8_t req_mode, uint8_t * tag_type)
{
 60e:	ef 92       	push	r14
 610:	ff 92       	push	r15
 612:	0f 93       	push	r16
 614:	1f 93       	push	r17
 616:	cf 93       	push	r28
 618:	df 93       	push	r29
 61a:	00 d0       	rcall	.+0      	; 0x61c <mfrc522_request+0xe>
 61c:	00 d0       	rcall	.+0      	; 0x61e <mfrc522_request+0x10>
 61e:	cd b7       	in	r28, 0x3d	; 61
 620:	de b7       	in	r29, 0x3e	; 62
 622:	18 2f       	mov	r17, r24
 624:	7b 01       	movw	r14, r22
	uint8_t  status;  
	uint32_t backBits;//The received data bits

	mfrc522_write(BitFramingReg, 0x07);//TxLastBists = BitFramingReg[2..0]	???
 626:	67 e0       	ldi	r22, 0x07	; 7
 628:	8d e0       	ldi	r24, 0x0D	; 13
 62a:	0e 94 b9 01 	call	0x372	; 0x372 <mfrc522_write>
	
	tag_type[0] = req_mode;
 62e:	f7 01       	movw	r30, r14
 630:	10 83       	st	Z, r17
	status = mfrc522_to_card(Transceive_CMD, tag_type, 1, tag_type, &backBits);
 632:	8e 01       	movw	r16, r28
 634:	0f 5f       	subi	r16, 0xFF	; 255
 636:	1f 4f       	sbci	r17, 0xFF	; 255
 638:	97 01       	movw	r18, r14
 63a:	41 e0       	ldi	r20, 0x01	; 1
 63c:	b7 01       	movw	r22, r14
 63e:	8c e0       	ldi	r24, 0x0C	; 12
 640:	0e 94 08 02 	call	0x410	; 0x410 <mfrc522_to_card>

	if ((status != CARD_FOUND) || (backBits != 0x10))
 644:	81 30       	cpi	r24, 0x01	; 1
 646:	51 f4       	brne	.+20     	; 0x65c <mfrc522_request+0x4e>
 648:	49 81       	ldd	r20, Y+1	; 0x01
 64a:	5a 81       	ldd	r21, Y+2	; 0x02
 64c:	6b 81       	ldd	r22, Y+3	; 0x03
 64e:	7c 81       	ldd	r23, Y+4	; 0x04
 650:	40 31       	cpi	r20, 0x10	; 16
 652:	51 05       	cpc	r21, r1
 654:	61 05       	cpc	r22, r1
 656:	71 05       	cpc	r23, r1
 658:	19 f4       	brne	.+6      	; 0x660 <mfrc522_request+0x52>
 65a:	03 c0       	rjmp	.+6      	; 0x662 <mfrc522_request+0x54>
	{    
		status = ERROR;
 65c:	83 e0       	ldi	r24, 0x03	; 3
 65e:	01 c0       	rjmp	.+2      	; 0x662 <mfrc522_request+0x54>
 660:	83 e0       	ldi	r24, 0x03	; 3
	}
   
	return status;
}
 662:	0f 90       	pop	r0
 664:	0f 90       	pop	r0
 666:	0f 90       	pop	r0
 668:	0f 90       	pop	r0
 66a:	df 91       	pop	r29
 66c:	cf 91       	pop	r28
 66e:	1f 91       	pop	r17
 670:	0f 91       	pop	r16
 672:	ff 90       	pop	r15
 674:	ef 90       	pop	r14
 676:	08 95       	ret

00000678 <mfrc522_get_card_serial>:
    return status;
}


uint8_t mfrc522_get_card_serial(uint8_t * serial_out)
{
 678:	ef 92       	push	r14
 67a:	ff 92       	push	r15
 67c:	0f 93       	push	r16
 67e:	1f 93       	push	r17
 680:	cf 93       	push	r28
 682:	df 93       	push	r29
 684:	00 d0       	rcall	.+0      	; 0x686 <mfrc522_get_card_serial+0xe>
 686:	00 d0       	rcall	.+0      	; 0x688 <mfrc522_get_card_serial+0x10>
 688:	cd b7       	in	r28, 0x3d	; 61
 68a:	de b7       	in	r29, 0x3e	; 62
 68c:	7c 01       	movw	r14, r24
	uint8_t status;
    uint8_t i;
	uint8_t serNumCheck=0;
    uint32_t unLen;
    
	mfrc522_write(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 68e:	60 e0       	ldi	r22, 0x00	; 0
 690:	8d e0       	ldi	r24, 0x0D	; 13
 692:	0e 94 b9 01 	call	0x372	; 0x372 <mfrc522_write>
 
    serial_out[0] = PICC_ANTICOLL;
 696:	83 e9       	ldi	r24, 0x93	; 147
 698:	f7 01       	movw	r30, r14
 69a:	80 83       	st	Z, r24
    serial_out[1] = 0x20;
 69c:	80 e2       	ldi	r24, 0x20	; 32
 69e:	81 83       	std	Z+1, r24	; 0x01
    status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);
 6a0:	8e 01       	movw	r16, r28
 6a2:	0f 5f       	subi	r16, 0xFF	; 255
 6a4:	1f 4f       	sbci	r17, 0xFF	; 255
 6a6:	97 01       	movw	r18, r14
 6a8:	42 e0       	ldi	r20, 0x02	; 2
 6aa:	b7 01       	movw	r22, r14
 6ac:	8c e0       	ldi	r24, 0x0C	; 12
 6ae:	0e 94 08 02 	call	0x410	; 0x410 <mfrc522_to_card>

    if (status == CARD_FOUND)
 6b2:	81 30       	cpi	r24, 0x01	; 1
 6b4:	91 f4       	brne	.+36     	; 0x6da <mfrc522_get_card_serial+0x62>
 6b6:	07 c0       	rjmp	.+14     	; 0x6c6 <mfrc522_get_card_serial+0x4e>
	{
		//Check card serial number
		for (i=0; i<4; i++)
		{   
		 	serNumCheck ^= serial_out[i];
 6b8:	f7 01       	movw	r30, r14
 6ba:	e9 0f       	add	r30, r25
 6bc:	f1 1d       	adc	r31, r1
 6be:	30 81       	ld	r19, Z
 6c0:	23 27       	eor	r18, r19
    status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);

    if (status == CARD_FOUND)
	{
		//Check card serial number
		for (i=0; i<4; i++)
 6c2:	9f 5f       	subi	r25, 0xFF	; 255
 6c4:	02 c0       	rjmp	.+4      	; 0x6ca <mfrc522_get_card_serial+0x52>
 6c6:	20 e0       	ldi	r18, 0x00	; 0
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	94 30       	cpi	r25, 0x04	; 4
 6cc:	a8 f3       	brcs	.-22     	; 0x6b8 <mfrc522_get_card_serial+0x40>
		{   
		 	serNumCheck ^= serial_out[i];
		}
		if (serNumCheck != serial_out[i])
 6ce:	f7 01       	movw	r30, r14
 6d0:	e9 0f       	add	r30, r25
 6d2:	f1 1d       	adc	r31, r1
 6d4:	90 81       	ld	r25, Z
 6d6:	29 13       	cpse	r18, r25
		{   
			status = ERROR;    
 6d8:	83 e0       	ldi	r24, 0x03	; 3
		}
    }
    return status;
}
 6da:	0f 90       	pop	r0
 6dc:	0f 90       	pop	r0
 6de:	0f 90       	pop	r0
 6e0:	0f 90       	pop	r0
 6e2:	df 91       	pop	r29
 6e4:	cf 91       	pop	r28
 6e6:	1f 91       	pop	r17
 6e8:	0f 91       	pop	r16
 6ea:	ff 90       	pop	r15
 6ec:	ef 90       	pop	r14
 6ee:	08 95       	ret

000006f0 <spi_init>:
#include "spi.h"

#if SPI_CONFIG_AS_MASTER
void spi_init()
{
	SPI_DDR |= (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS);
 6f0:	84 b1       	in	r24, 0x04	; 4
 6f2:	8c 62       	ori	r24, 0x2C	; 44
 6f4:	84 b9       	out	0x04, r24	; 4
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0); //prescaler 16
 6f6:	8c b5       	in	r24, 0x2c	; 44
 6f8:	81 65       	ori	r24, 0x51	; 81
 6fa:	8c bd       	out	0x2c, r24	; 44
 6fc:	08 95       	ret

000006fe <spi_transmit>:
}


uint8_t spi_transmit(uint8_t data)
{
	SPDR = data;
 6fe:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
 700:	0d b4       	in	r0, 0x2d	; 45
 702:	07 fe       	sbrs	r0, 7
 704:	fd cf       	rjmp	.-6      	; 0x700 <spi_transmit+0x2>
	
	return SPDR;
 706:	8e b5       	in	r24, 0x2e	; 46
}
 708:	08 95       	ret

0000070a <__vector_18>:
	uart_tx_busy = 1;
}

uint8_t uart_string_complete(){
	return uart_fetch_complete;
}
 70a:	1f 92       	push	r1
 70c:	0f 92       	push	r0
 70e:	0f b6       	in	r0, 0x3f	; 63
 710:	0f 92       	push	r0
 712:	11 24       	eor	r1, r1
 714:	2f 93       	push	r18
 716:	3f 93       	push	r19
 718:	8f 93       	push	r24
 71a:	9f 93       	push	r25
 71c:	af 93       	push	r26
 71e:	bf 93       	push	r27
 720:	ef 93       	push	r30
 722:	ff 93       	push	r31
 724:	e0 ef       	ldi	r30, 0xF0	; 240
 726:	f1 e0       	ldi	r31, 0x01	; 1
 728:	80 81       	ld	r24, Z
 72a:	91 81       	ldd	r25, Z+1	; 0x01
 72c:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 730:	dc 01       	movw	r26, r24
 732:	a2 59       	subi	r26, 0x92	; 146
 734:	be 4f       	sbci	r27, 0xFE	; 254
 736:	2c 93       	st	X, r18
 738:	01 96       	adiw	r24, 0x01	; 1
 73a:	91 83       	std	Z+1, r25	; 0x01
 73c:	80 83       	st	Z, r24
 73e:	ee ee       	ldi	r30, 0xEE	; 238
 740:	f1 e0       	ldi	r31, 0x01	; 1
 742:	20 81       	ld	r18, Z
 744:	31 81       	ldd	r19, Z+1	; 0x01
 746:	2f 5f       	subi	r18, 0xFF	; 255
 748:	3f 4f       	sbci	r19, 0xFF	; 255
 74a:	31 83       	std	Z+1, r19	; 0x01
 74c:	20 83       	st	Z, r18
 74e:	80 38       	cpi	r24, 0x80	; 128
 750:	91 05       	cpc	r25, r1
 752:	20 f0       	brcs	.+8      	; 0x75c <__vector_18+0x52>
 754:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <uart_buffer+0x83>
 758:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <uart_buffer+0x82>
 75c:	ff 91       	pop	r31
 75e:	ef 91       	pop	r30
 760:	bf 91       	pop	r27
 762:	af 91       	pop	r26
 764:	9f 91       	pop	r25
 766:	8f 91       	pop	r24
 768:	3f 91       	pop	r19
 76a:	2f 91       	pop	r18
 76c:	0f 90       	pop	r0
 76e:	0f be       	out	0x3f, r0	; 63
 770:	0f 90       	pop	r0
 772:	1f 90       	pop	r1
 774:	18 95       	reti

00000776 <__vector_20>:
 776:	1f 92       	push	r1
 778:	0f 92       	push	r0
 77a:	0f b6       	in	r0, 0x3f	; 63
 77c:	0f 92       	push	r0
 77e:	11 24       	eor	r1, r1
 780:	8f 93       	push	r24
 782:	81 e0       	ldi	r24, 0x01	; 1
 784:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <uart_tx_busy>
 788:	8f 91       	pop	r24
 78a:	0f 90       	pop	r0
 78c:	0f be       	out	0x3f, r0	; 63
 78e:	0f 90       	pop	r0
 790:	1f 90       	pop	r1
 792:	18 95       	reti

00000794 <uart_init>:

void uart_init(uint32_t baud){
	/*Set baud rate*/
	baud = F_CPU/(16*baud) - 1;
 794:	dc 01       	movw	r26, r24
 796:	cb 01       	movw	r24, r22
 798:	88 0f       	add	r24, r24
 79a:	99 1f       	adc	r25, r25
 79c:	aa 1f       	adc	r26, r26
 79e:	bb 1f       	adc	r27, r27
 7a0:	88 0f       	add	r24, r24
 7a2:	99 1f       	adc	r25, r25
 7a4:	aa 1f       	adc	r26, r26
 7a6:	bb 1f       	adc	r27, r27
 7a8:	9c 01       	movw	r18, r24
 7aa:	ad 01       	movw	r20, r26
 7ac:	22 0f       	add	r18, r18
 7ae:	33 1f       	adc	r19, r19
 7b0:	44 1f       	adc	r20, r20
 7b2:	55 1f       	adc	r21, r21
 7b4:	22 0f       	add	r18, r18
 7b6:	33 1f       	adc	r19, r19
 7b8:	44 1f       	adc	r20, r20
 7ba:	55 1f       	adc	r21, r21
 7bc:	60 e0       	ldi	r22, 0x00	; 0
 7be:	74 e2       	ldi	r23, 0x24	; 36
 7c0:	84 ef       	ldi	r24, 0xF4	; 244
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	0e 94 27 04 	call	0x84e	; 0x84e <__udivmodsi4>
 7c8:	ba 01       	movw	r22, r20
 7ca:	a9 01       	movw	r20, r18
 7cc:	41 50       	subi	r20, 0x01	; 1
 7ce:	51 09       	sbc	r21, r1
 7d0:	61 09       	sbc	r22, r1
 7d2:	71 09       	sbc	r23, r1
	UBRR0H = (baud & 0x0F00) >> 8;	// mask out the upper 4 bits
 7d4:	db 01       	movw	r26, r22
 7d6:	ca 01       	movw	r24, r20
 7d8:	88 27       	eor	r24, r24
 7da:	9f 70       	andi	r25, 0x0F	; 15
 7dc:	aa 27       	eor	r26, r26
 7de:	bb 27       	eor	r27, r27
 7e0:	89 2f       	mov	r24, r25
 7e2:	9a 2f       	mov	r25, r26
 7e4:	ab 2f       	mov	r26, r27
 7e6:	bb 27       	eor	r27, r27
 7e8:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (baud & 0x00FF);		// mask out the lower 8 bits
 7ec:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	/* Enable Rx and Tx as well as Rx and Rx complete interrupts*/
	UCSR0B |= (1<< RXEN0) | (1<<TXEN0) | (1<< RXCIE0) | (1 << TXCIE0);
 7f0:	e1 ec       	ldi	r30, 0xC1	; 193
 7f2:	f0 e0       	ldi	r31, 0x00	; 0
 7f4:	80 81       	ld	r24, Z
 7f6:	88 6d       	ori	r24, 0xD8	; 216
 7f8:	80 83       	st	Z, r24
	
	/* Initialize Objects */
	uart_buffer = (UARTBuffer){ .buffer = {0}, .head = 0, .tail = 0};		
 7fa:	ee e6       	ldi	r30, 0x6E	; 110
 7fc:	f1 e0       	ldi	r31, 0x01	; 1
 7fe:	86 e8       	ldi	r24, 0x86	; 134
 800:	df 01       	movw	r26, r30
 802:	1d 92       	st	X+, r1
 804:	8a 95       	dec	r24
 806:	e9 f7       	brne	.-6      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 808:	08 95       	ret

0000080a <uart_send_byte>:
}


void uart_send_byte(char data){
	while(uart_tx_busy == 0); // while UART is not transmitting
 80a:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <uart_tx_busy>
 80e:	99 23       	and	r25, r25
 810:	e1 f3       	breq	.-8      	; 0x80a <uart_send_byte>
	
	uart_tx_busy = 0; 
 812:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <uart_tx_busy>
	UDR0 = data;				// load byte passed into the function to the uart buffer
 816:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 81a:	08 95       	ret

0000081c <uart_send_string>:
}

void uart_send_string(char *arr) {
 81c:	0f 93       	push	r16
 81e:	1f 93       	push	r17
 820:	cf 93       	push	r28
 822:	df 93       	push	r29
 824:	8c 01       	movw	r16, r24
	uint16_t i = 0; 
 826:	c0 e0       	ldi	r28, 0x00	; 0
 828:	d0 e0       	ldi	r29, 0x00	; 0
	
	do {
		uart_send_byte(arr[i]);
 82a:	f8 01       	movw	r30, r16
 82c:	ec 0f       	add	r30, r28
 82e:	fd 1f       	adc	r31, r29
 830:	80 81       	ld	r24, Z
 832:	0e 94 05 04 	call	0x80a	; 0x80a <uart_send_byte>
		i++;
 836:	21 96       	adiw	r28, 0x01	; 1
	} while(arr[i] != '\0');
 838:	f8 01       	movw	r30, r16
 83a:	ec 0f       	add	r30, r28
 83c:	fd 1f       	adc	r31, r29
 83e:	80 81       	ld	r24, Z
 840:	81 11       	cpse	r24, r1
 842:	f3 cf       	rjmp	.-26     	; 0x82a <uart_send_string+0xe>
}
 844:	df 91       	pop	r29
 846:	cf 91       	pop	r28
 848:	1f 91       	pop	r17
 84a:	0f 91       	pop	r16
 84c:	08 95       	ret

0000084e <__udivmodsi4>:
 84e:	a1 e2       	ldi	r26, 0x21	; 33
 850:	1a 2e       	mov	r1, r26
 852:	aa 1b       	sub	r26, r26
 854:	bb 1b       	sub	r27, r27
 856:	fd 01       	movw	r30, r26
 858:	0d c0       	rjmp	.+26     	; 0x874 <__udivmodsi4_ep>

0000085a <__udivmodsi4_loop>:
 85a:	aa 1f       	adc	r26, r26
 85c:	bb 1f       	adc	r27, r27
 85e:	ee 1f       	adc	r30, r30
 860:	ff 1f       	adc	r31, r31
 862:	a2 17       	cp	r26, r18
 864:	b3 07       	cpc	r27, r19
 866:	e4 07       	cpc	r30, r20
 868:	f5 07       	cpc	r31, r21
 86a:	20 f0       	brcs	.+8      	; 0x874 <__udivmodsi4_ep>
 86c:	a2 1b       	sub	r26, r18
 86e:	b3 0b       	sbc	r27, r19
 870:	e4 0b       	sbc	r30, r20
 872:	f5 0b       	sbc	r31, r21

00000874 <__udivmodsi4_ep>:
 874:	66 1f       	adc	r22, r22
 876:	77 1f       	adc	r23, r23
 878:	88 1f       	adc	r24, r24
 87a:	99 1f       	adc	r25, r25
 87c:	1a 94       	dec	r1
 87e:	69 f7       	brne	.-38     	; 0x85a <__udivmodsi4_loop>
 880:	60 95       	com	r22
 882:	70 95       	com	r23
 884:	80 95       	com	r24
 886:	90 95       	com	r25
 888:	9b 01       	movw	r18, r22
 88a:	ac 01       	movw	r20, r24
 88c:	bd 01       	movw	r22, r26
 88e:	cf 01       	movw	r24, r30
 890:	08 95       	ret

00000892 <memcmp>:
 892:	fb 01       	movw	r30, r22
 894:	dc 01       	movw	r26, r24
 896:	04 c0       	rjmp	.+8      	; 0x8a0 <memcmp+0xe>
 898:	8d 91       	ld	r24, X+
 89a:	01 90       	ld	r0, Z+
 89c:	80 19       	sub	r24, r0
 89e:	21 f4       	brne	.+8      	; 0x8a8 <memcmp+0x16>
 8a0:	41 50       	subi	r20, 0x01	; 1
 8a2:	50 40       	sbci	r21, 0x00	; 0
 8a4:	c8 f7       	brcc	.-14     	; 0x898 <memcmp+0x6>
 8a6:	88 1b       	sub	r24, r24
 8a8:	99 0b       	sbc	r25, r25
 8aa:	08 95       	ret

000008ac <_exit>:
 8ac:	f8 94       	cli

000008ae <__stop_program>:
 8ae:	ff cf       	rjmp	.-2      	; 0x8ae <__stop_program>
