
Embedded-Final-Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  00000e6e  00000f02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000086  00800142  00800142  00000f44  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f44  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fa0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f9b  00000000  00000000  00001170  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e94  00000000  00000000  0000310b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000efc  00000000  00000000  00003f9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f0  00000000  00000000  00004e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000754  00000000  00000000  0000528c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001014  00000000  00000000  000059e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  000069f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 87 03 	jmp	0x70e	; 0x70e <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 bd 03 	jmp	0x77a	; 0x77a <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e6       	ldi	r30, 0x6E	; 110
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 34       	cpi	r26, 0x42	; 66
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e4       	ldi	r26, 0x42	; 66
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 3c       	cpi	r26, 0xC8	; 200
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ed 00 	call	0x1da	; 0x1da <main>
  9e:	0c 94 35 07 	jmp	0xe6a	; 0xe6a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	0e 94 a3 01 	call	0x346	; 0x346 <lcd_init>
  aa:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <spi_init>
  ae:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <mfrc522_init>
  b2:	60 e0       	ldi	r22, 0x00	; 0
  b4:	7b e4       	ldi	r23, 0x4B	; 75
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 cc 03 	call	0x798	; 0x798 <uart_init>
  be:	2f ef       	ldi	r18, 0xFF	; 255
  c0:	89 e6       	ldi	r24, 0x69	; 105
  c2:	98 e1       	ldi	r25, 0x18	; 24
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	80 40       	sbci	r24, 0x00	; 0
  c8:	90 40       	sbci	r25, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <init+0x1e>
  cc:	00 c0       	rjmp	.+0      	; 0xce <init+0x28>
  ce:	00 00       	nop
  d0:	08 95       	ret

000000d2 <printByte>:
  d2:	0f 93       	push	r16
  d4:	1f 93       	push	r17
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	00 d0       	rcall	.+0      	; 0xdc <printByte+0xa>
  dc:	1f 92       	push	r1
  de:	cd b7       	in	r28, 0x3d	; 61
  e0:	de b7       	in	r29, 0x3e	; 62
  e2:	1f 92       	push	r1
  e4:	8f 93       	push	r24
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	91 e0       	ldi	r25, 0x01	; 1
  ea:	9f 93       	push	r25
  ec:	8f 93       	push	r24
  ee:	8e 01       	movw	r16, r28
  f0:	0f 5f       	subi	r16, 0xFF	; 255
  f2:	1f 4f       	sbci	r17, 0xFF	; 255
  f4:	1f 93       	push	r17
  f6:	0f 93       	push	r16
  f8:	0e 94 4b 04 	call	0x896	; 0x896 <sprintf>
  fc:	c8 01       	movw	r24, r16
  fe:	0e 94 10 04 	call	0x820	; 0x820 <uart_send_string>
 102:	0f 90       	pop	r0
 104:	0f 90       	pop	r0
 106:	0f 90       	pop	r0
 108:	0f 90       	pop	r0
 10a:	0f 90       	pop	r0
 10c:	0f 90       	pop	r0
 10e:	0f 90       	pop	r0
 110:	0f 90       	pop	r0
 112:	0f 90       	pop	r0
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	1f 91       	pop	r17
 11a:	0f 91       	pop	r16
 11c:	08 95       	ret

0000011e <read_card>:
		_delay_ms(1000);

	}
}

void read_card(){
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	cd b7       	in	r28, 0x3d	; 61
 124:	de b7       	in	r29, 0x3e	; 62
 126:	60 97       	sbiw	r28, 0x10	; 16
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	f8 94       	cli
 12c:	de bf       	out	0x3e, r29	; 62
 12e:	0f be       	out	0x3f, r0	; 63
 130:	cd bf       	out	0x3d, r28	; 61
	uint8_t byte; 
	uint8_t str[MAX_LEN];
	
	byte = mfrc522_read(ComIEnReg);
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	0e 94 ce 01 	call	0x39c	; 0x39c <mfrc522_read>
	mfrc522_write(ComIEnReg,byte|0x20);
 138:	68 2f       	mov	r22, r24
 13a:	60 62       	ori	r22, 0x20	; 32
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	0e 94 bb 01 	call	0x376	; 0x376 <mfrc522_write>
	byte = mfrc522_read(DivIEnReg);
 142:	83 e0       	ldi	r24, 0x03	; 3
 144:	0e 94 ce 01 	call	0x39c	; 0x39c <mfrc522_read>
	mfrc522_write(DivIEnReg,byte|0x80);
 148:	68 2f       	mov	r22, r24
 14a:	60 68       	ori	r22, 0x80	; 128
 14c:	83 e0       	ldi	r24, 0x03	; 3
 14e:	0e 94 bb 01 	call	0x376	; 0x376 <mfrc522_write>
 152:	2f ef       	ldi	r18, 0xFF	; 255
 154:	8d e3       	ldi	r24, 0x3D	; 61
 156:	99 e4       	ldi	r25, 0x49	; 73
 158:	21 50       	subi	r18, 0x01	; 1
 15a:	80 40       	sbci	r24, 0x00	; 0
 15c:	90 40       	sbci	r25, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <read_card+0x3a>
 160:	00 c0       	rjmp	.+0      	; 0x162 <read_card+0x44>
 162:	00 00       	nop
	
	_delay_ms(1500);
	while(1){
		byte = mfrc522_request(PICC_REQALL, str);
 164:	be 01       	movw	r22, r28
 166:	6f 5f       	subi	r22, 0xFF	; 255
 168:	7f 4f       	sbci	r23, 0xFF	; 255
 16a:	82 e5       	ldi	r24, 0x52	; 82
 16c:	0e 94 09 03 	call	0x612	; 0x612 <mfrc522_request>
		
		if(byte == CARD_FOUND)
 170:	81 30       	cpi	r24, 0x01	; 1
 172:	49 f5       	brne	.+82     	; 0x1c6 <read_card+0xa8>
		{
			byte = mfrc522_get_card_serial(str);
 174:	ce 01       	movw	r24, r28
 176:	01 96       	adiw	r24, 0x01	; 1
 178:	0e 94 3e 03 	call	0x67c	; 0x67c <mfrc522_get_card_serial>
			if(byte == CARD_FOUND)
 17c:	81 30       	cpi	r24, 0x01	; 1
 17e:	f9 f4       	brne	.+62     	; 0x1be <read_card+0xa0>
 180:	0e c0       	rjmp	.+28     	; 0x19e <read_card+0x80>
			{
				for(byte=0;byte<8;byte++)
				{
					printByte(str[byte]);
 182:	e1 e0       	ldi	r30, 0x01	; 1
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	ec 0f       	add	r30, r28
 188:	fd 1f       	adc	r31, r29
 18a:	e1 0f       	add	r30, r17
 18c:	f1 1d       	adc	r31, r1
 18e:	80 81       	ld	r24, Z
 190:	0e 94 69 00 	call	0xd2	; 0xd2 <printByte>
					uart_send_byte(' ');
 194:	80 e2       	ldi	r24, 0x20	; 32
 196:	0e 94 07 04 	call	0x80e	; 0x80e <uart_send_byte>
		if(byte == CARD_FOUND)
		{
			byte = mfrc522_get_card_serial(str);
			if(byte == CARD_FOUND)
			{
				for(byte=0;byte<8;byte++)
 19a:	1f 5f       	subi	r17, 0xFF	; 255
 19c:	01 c0       	rjmp	.+2      	; 0x1a0 <read_card+0x82>
 19e:	10 e0       	ldi	r17, 0x00	; 0
 1a0:	18 30       	cpi	r17, 0x08	; 8
 1a2:	78 f3       	brcs	.-34     	; 0x182 <read_card+0x64>
				{
					printByte(str[byte]);
					uart_send_byte(' ');
				}
				uart_send_byte('\n');
 1a4:	8a e0       	ldi	r24, 0x0A	; 10
 1a6:	0e 94 07 04 	call	0x80e	; 0x80e <uart_send_byte>
 1aa:	2f ef       	ldi	r18, 0xFF	; 255
 1ac:	81 e1       	ldi	r24, 0x11	; 17
 1ae:	9a e7       	ldi	r25, 0x7A	; 122
 1b0:	21 50       	subi	r18, 0x01	; 1
 1b2:	80 40       	sbci	r24, 0x00	; 0
 1b4:	90 40       	sbci	r25, 0x00	; 0
 1b6:	e1 f7       	brne	.-8      	; 0x1b0 <read_card+0x92>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <read_card+0x9c>
 1ba:	00 00       	nop
 1bc:	04 c0       	rjmp	.+8      	; 0x1c6 <read_card+0xa8>
				_delay_ms(2500);
			}
			else
			{
				uart_send_string("error");
 1be:	8e e2       	ldi	r24, 0x2E	; 46
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	0e 94 10 04 	call	0x820	; 0x820 <uart_send_string>
 1c6:	2f ef       	ldi	r18, 0xFF	; 255
 1c8:	83 ed       	ldi	r24, 0xD3	; 211
 1ca:	90 e3       	ldi	r25, 0x30	; 48
 1cc:	21 50       	subi	r18, 0x01	; 1
 1ce:	80 40       	sbci	r24, 0x00	; 0
 1d0:	90 40       	sbci	r25, 0x00	; 0
 1d2:	e1 f7       	brne	.-8      	; 0x1cc <read_card+0xae>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <read_card+0xb8>
 1d6:	00 00       	nop
 1d8:	c5 cf       	rjmp	.-118    	; 0x164 <read_card+0x46>

000001da <main>:
 1da:	2f ef       	ldi	r18, 0xFF	; 255
 1dc:	80 e7       	ldi	r24, 0x70	; 112
 1de:	92 e0       	ldi	r25, 0x02	; 2
 1e0:	21 50       	subi	r18, 0x01	; 1
 1e2:	80 40       	sbci	r24, 0x00	; 0
 1e4:	90 40       	sbci	r25, 0x00	; 0
 1e6:	e1 f7       	brne	.-8      	; 0x1e0 <main+0x6>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <main+0x10>
 1ea:	00 00       	nop
}

int main()
{
	_delay_ms(50);
	init();
 1ec:	0e 94 53 00 	call	0xa6	; 0xa6 <init>
	sei();
 1f0:	78 94       	sei
	
	uart_send_string("RFID Reader\n");
 1f2:	84 e3       	ldi	r24, 0x34	; 52
 1f4:	91 e0       	ldi	r25, 0x01	; 1
 1f6:	0e 94 10 04 	call	0x820	; 0x820 <uart_send_string>

	//selfTest();
	
	read_card();
 1fa:	0e 94 8f 00 	call	0x11e	; 0x11e <read_card>

000001fe <hd44780_outnibble>:
/*
 * Send one nibble out to the LCD controller.
 */
static void hd44780_outnibble(uint8_t n, uint8_t rs)
{
  CLR(PORT, HD44780_RW);
 1fe:	9b b1       	in	r25, 0x0b	; 11
 200:	9f 7b       	andi	r25, 0xBF	; 191
 202:	9b b9       	out	0x0b, r25	; 11
  if (rs)
 204:	66 23       	and	r22, r22
 206:	21 f0       	breq	.+8      	; 0x210 <hd44780_outnibble+0x12>
    SET(PORT, HD44780_RS);
 208:	9b b1       	in	r25, 0x0b	; 11
 20a:	90 68       	ori	r25, 0x80	; 128
 20c:	9b b9       	out	0x0b, r25	; 11
 20e:	03 c0       	rjmp	.+6      	; 0x216 <hd44780_outnibble+0x18>
  else
    CLR(PORT, HD44780_RS);
 210:	9b b1       	in	r25, 0x0b	; 11
 212:	9f 77       	andi	r25, 0x7F	; 127
 214:	9b b9       	out	0x0b, r25	; 11
  ASSIGN(PORT, HD44780_D4, n);
 216:	2b b1       	in	r18, 0x0b	; 11
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	92 2f       	mov	r25, r18
 220:	91 7e       	andi	r25, 0xE1	; 225
 222:	89 2b       	or	r24, r25
 224:	8b b9       	out	0x0b, r24	; 11
static inline uint8_t hd44780_pulse_e(bool readback) __attribute__((always_inline));

static inline uint8_t hd44780_pulse_e(bool readback) {
  uint8_t x;

  SET(PORT, HD44780_E);
 226:	8b b1       	in	r24, 0x0b	; 11
 228:	80 62       	ori	r24, 0x20	; 32
 22a:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22c:	82 e0       	ldi	r24, 0x02	; 2
 22e:	8a 95       	dec	r24
 230:	f1 f7       	brne	.-4      	; 0x22e <hd44780_outnibble+0x30>
 232:	00 c0       	rjmp	.+0      	; 0x234 <hd44780_outnibble+0x36>
#endif
  if (readback)
    x = READ(PIN, HD44780_D4);
  else
    x = 0;
  CLR(PORT, HD44780_E);
 234:	8b b1       	in	r24, 0x0b	; 11
 236:	8f 7d       	andi	r24, 0xDF	; 223
 238:	8b b9       	out	0x0b, r24	; 11
 23a:	08 95       	ret

0000023c <hd44780_innibble>:
 */
static uint8_t hd44780_innibble(uint8_t rs)
{
  uint8_t x;

  SET(PORT, HD44780_RW);
 23c:	9b b1       	in	r25, 0x0b	; 11
 23e:	90 64       	ori	r25, 0x40	; 64
 240:	9b b9       	out	0x0b, r25	; 11
  ASSIGN(DDR, HD44780_D4, 0x00);
 242:	9a b1       	in	r25, 0x0a	; 10
 244:	91 7e       	andi	r25, 0xE1	; 225
 246:	9a b9       	out	0x0a, r25	; 10
  if (rs)
 248:	88 23       	and	r24, r24
 24a:	21 f0       	breq	.+8      	; 0x254 <hd44780_innibble+0x18>
    SET(PORT, HD44780_RS);
 24c:	8b b1       	in	r24, 0x0b	; 11
 24e:	80 68       	ori	r24, 0x80	; 128
 250:	8b b9       	out	0x0b, r24	; 11
 252:	03 c0       	rjmp	.+6      	; 0x25a <hd44780_innibble+0x1e>
  else
    CLR(PORT, HD44780_RS);
 254:	8b b1       	in	r24, 0x0b	; 11
 256:	8f 77       	andi	r24, 0x7F	; 127
 258:	8b b9       	out	0x0b, r24	; 11
static inline uint8_t hd44780_pulse_e(bool readback) __attribute__((always_inline));

static inline uint8_t hd44780_pulse_e(bool readback) {
  uint8_t x;

  SET(PORT, HD44780_E);
 25a:	8b b1       	in	r24, 0x0b	; 11
 25c:	80 62       	ori	r24, 0x20	; 32
 25e:	8b b9       	out	0x0b, r24	; 11
 260:	82 e0       	ldi	r24, 0x02	; 2
 262:	8a 95       	dec	r24
 264:	f1 f7       	brne	.-4      	; 0x262 <hd44780_innibble+0x26>
 266:	00 c0       	rjmp	.+0      	; 0x268 <hd44780_innibble+0x2c>
  __asm__ volatile("nop");
#    endif /* F_CPU > 2000000UL */
#  endif /* F_CPU > 1000000UL */
#endif
  if (readback)
    x = READ(PIN, HD44780_D4);
 268:	89 b1       	in	r24, 0x09	; 9
 26a:	8e 71       	andi	r24, 0x1E	; 30
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	95 95       	asr	r25
 270:	87 95       	ror	r24
  else
    x = 0;
  CLR(PORT, HD44780_E);
 272:	9b b1       	in	r25, 0x0b	; 11
 274:	9f 7d       	andi	r25, 0xDF	; 223
 276:	9b b9       	out	0x0b, r25	; 11
  if (rs)
    SET(PORT, HD44780_RS);
  else
    CLR(PORT, HD44780_RS);
  x = hd44780_pulse_e(true);
  ASSIGN(DDR, HD44780_D4, 0x0F);
 278:	9a b1       	in	r25, 0x0a	; 10
 27a:	9e 61       	ori	r25, 0x1E	; 30
 27c:	9a b9       	out	0x0a, r25	; 10
  CLR(PORT, HD44780_RW);
 27e:	9b b1       	in	r25, 0x0b	; 11
 280:	9f 7b       	andi	r25, 0xBF	; 191
 282:	9b b9       	out	0x0b, r25	; 11

  return x;
}
 284:	08 95       	ret

00000286 <hd44780_outbyte>:
/*
 * Send one byte to the LCD controller.  As we are in 4-bit mode, we
 * have to send two nibbles.
 */
void hd44780_outbyte(uint8_t b, uint8_t rs)
{
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	c8 2f       	mov	r28, r24
 28c:	d6 2f       	mov	r29, r22
  hd44780_outnibble(b >> 4, rs);
 28e:	82 95       	swap	r24
 290:	8f 70       	andi	r24, 0x0F	; 15
 292:	0e 94 ff 00 	call	0x1fe	; 0x1fe <hd44780_outnibble>
  hd44780_outnibble(b & 0xf, rs);
 296:	6d 2f       	mov	r22, r29
 298:	8c 2f       	mov	r24, r28
 29a:	8f 70       	andi	r24, 0x0F	; 15
 29c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <hd44780_outnibble>
}
 2a0:	df 91       	pop	r29
 2a2:	cf 91       	pop	r28
 2a4:	08 95       	ret

000002a6 <hd44780_inbyte>:

/*
 * Read one byte (i.e. two nibbles) from the LCD controller.
 */
uint8_t hd44780_inbyte(uint8_t rs)
{
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
 2aa:	c8 2f       	mov	r28, r24
  uint8_t x;

  x = hd44780_innibble(rs) << 4;
 2ac:	0e 94 1e 01 	call	0x23c	; 0x23c <hd44780_innibble>
 2b0:	d8 2f       	mov	r29, r24
 2b2:	d2 95       	swap	r29
 2b4:	d0 7f       	andi	r29, 0xF0	; 240
  x |= hd44780_innibble(rs);
 2b6:	8c 2f       	mov	r24, r28
 2b8:	0e 94 1e 01 	call	0x23c	; 0x23c <hd44780_innibble>

  return x;
}
 2bc:	8d 2b       	or	r24, r29
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	08 95       	ret

000002c4 <hd44780_wait_ready>:
 * Wait until the busy flag is cleared.
 */
void hd44780_wait_ready(bool longwait)
{
#if USE_BUSY_BIT
  while (hd44780_incmd() & HD44780_BUSYFLAG) ;
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <hd44780_inbyte>
 2ca:	88 23       	and	r24, r24
 2cc:	dc f3       	brlt	.-10     	; 0x2c4 <hd44780_wait_ready>
  if (longwait)
    _delay_ms(1.52);
  else
    _delay_us(37);
#endif
}
 2ce:	08 95       	ret

000002d0 <hd44780_init>:
{
  //SET(DDR, HD44780_RS);
  //SET(DDR, HD44780_RW);
  //SET(DDR, HD44780_E);
  //ASSIGN(DDR, HD44780_D4, 0x0F);
  DDRD |= 0b11111110;
 2d0:	8a b1       	in	r24, 0x0a	; 10
 2d2:	8e 6f       	ori	r24, 0xFE	; 254
 2d4:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d6:	8f e5       	ldi	r24, 0x5F	; 95
 2d8:	9a ee       	ldi	r25, 0xEA	; 234
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <hd44780_init+0xa>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <hd44780_init+0x10>
 2e0:	00 00       	nop

  _delay_ms(15);		/* 40 ms needed for Vcc = 2.7 V */
  hd44780_outnibble(HD44780_FNSET(1, 0, 0) >> 4, 0);
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	83 e0       	ldi	r24, 0x03	; 3
 2e6:	0e 94 ff 00 	call	0x1fe	; 0x1fe <hd44780_outnibble>
 2ea:	8f e0       	ldi	r24, 0x0F	; 15
 2ec:	90 e4       	ldi	r25, 0x40	; 64
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <hd44780_init+0x1e>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <hd44780_init+0x24>
 2f4:	00 00       	nop
  _delay_ms(4.1);
  hd44780_outnibble(HD44780_FNSET(1, 0, 0) >> 4, 0);
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	83 e0       	ldi	r24, 0x03	; 3
 2fa:	0e 94 ff 00 	call	0x1fe	; 0x1fe <hd44780_outnibble>
 2fe:	8f e8       	ldi	r24, 0x8F	; 143
 300:	91 e0       	ldi	r25, 0x01	; 1
 302:	01 97       	sbiw	r24, 0x01	; 1
 304:	f1 f7       	brne	.-4      	; 0x302 <hd44780_init+0x32>
 306:	00 c0       	rjmp	.+0      	; 0x308 <hd44780_init+0x38>
 308:	00 00       	nop
  _delay_ms(0.1);
  hd44780_outnibble(HD44780_FNSET(1, 0, 0) >> 4, 0);
 30a:	60 e0       	ldi	r22, 0x00	; 0
 30c:	83 e0       	ldi	r24, 0x03	; 3
 30e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <hd44780_outnibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 312:	95 ec       	ldi	r25, 0xC5	; 197
 314:	9a 95       	dec	r25
 316:	f1 f7       	brne	.-4      	; 0x314 <hd44780_init+0x44>
 318:	00 00       	nop
  _delay_us(37);

  hd44780_outnibble(HD44780_FNSET(0, 1, 0) >> 4, 0);
 31a:	60 e0       	ldi	r22, 0x00	; 0
 31c:	82 e0       	ldi	r24, 0x02	; 2
 31e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <hd44780_outnibble>
  hd44780_wait_ready(false);
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	0e 94 62 01 	call	0x2c4	; 0x2c4 <hd44780_wait_ready>
  hd44780_outcmd(HD44780_FNSET(0, 1, 0));
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	88 e2       	ldi	r24, 0x28	; 40
 32c:	0e 94 43 01 	call	0x286	; 0x286 <hd44780_outbyte>
  hd44780_wait_ready(false);
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	0e 94 62 01 	call	0x2c4	; 0x2c4 <hd44780_wait_ready>
  hd44780_outcmd(HD44780_DISPCTL(0, 0, 0));
 336:	60 e0       	ldi	r22, 0x00	; 0
 338:	88 e0       	ldi	r24, 0x08	; 8
 33a:	0e 94 43 01 	call	0x286	; 0x286 <hd44780_outbyte>
  hd44780_wait_ready(false);
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	0e 94 62 01 	call	0x2c4	; 0x2c4 <hd44780_wait_ready>
 344:	08 95       	ret

00000346 <lcd_init>:
 * Setup the LCD controller.  First, call the hardware initialization
 * function, then adjust the display attributes we want.
 */
void lcd_init(void) {

  hd44780_init();
 346:	0e 94 68 01 	call	0x2d0	; 0x2d0 <hd44780_init>

  /*
   * Clear the display.
   */
  hd44780_outcmd(HD44780_CLR);
 34a:	60 e0       	ldi	r22, 0x00	; 0
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	0e 94 43 01 	call	0x286	; 0x286 <hd44780_outbyte>
  hd44780_wait_ready(true);
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	0e 94 62 01 	call	0x2c4	; 0x2c4 <hd44780_wait_ready>

  /*
   * Entry mode: auto-increment address counter, no display shift in
   * effect.
   */
  hd44780_outcmd(HD44780_ENTMODE(1, 0));
 358:	60 e0       	ldi	r22, 0x00	; 0
 35a:	86 e0       	ldi	r24, 0x06	; 6
 35c:	0e 94 43 01 	call	0x286	; 0x286 <hd44780_outbyte>
  hd44780_wait_ready(false);
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	0e 94 62 01 	call	0x2c4	; 0x2c4 <hd44780_wait_ready>

  /*
   * Enable display, activate non-blinking cursor.
   */
  hd44780_outcmd(HD44780_DISPCTL(1, 1, 0));
 366:	60 e0       	ldi	r22, 0x00	; 0
 368:	8e e0       	ldi	r24, 0x0E	; 14
 36a:	0e 94 43 01 	call	0x286	; 0x286 <hd44780_outbyte>
  hd44780_wait_ready(false);
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	0e 94 62 01 	call	0x2c4	; 0x2c4 <hd44780_wait_ready>
 374:	08 95       	ret

00000376 <mfrc522_write>:
		mfrc522_write(TxControlReg,byte|0x03);
	}
}

void mfrc522_write(uint8_t reg, uint8_t data)
{
 376:	cf 93       	push	r28
 378:	c6 2f       	mov	r28, r22
	ENABLE_CHIP();
 37a:	95 b1       	in	r25, 0x05	; 5
 37c:	9b 7f       	andi	r25, 0xFB	; 251
 37e:	95 b9       	out	0x05, r25	; 5
	spi_transmit((reg<<1)&0x7E);
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	8e 77       	andi	r24, 0x7E	; 126
 388:	0e 94 81 03 	call	0x702	; 0x702 <spi_transmit>
	spi_transmit(data);
 38c:	8c 2f       	mov	r24, r28
 38e:	0e 94 81 03 	call	0x702	; 0x702 <spi_transmit>
	DISABLE_CHIP();
 392:	85 b1       	in	r24, 0x05	; 5
 394:	84 60       	ori	r24, 0x04	; 4
 396:	85 b9       	out	0x05, r24	; 5
}
 398:	cf 91       	pop	r28
 39a:	08 95       	ret

0000039c <mfrc522_read>:

uint8_t mfrc522_read(uint8_t reg)
{
	uint8_t data;	
	ENABLE_CHIP();
 39c:	95 b1       	in	r25, 0x05	; 5
 39e:	9b 7f       	andi	r25, 0xFB	; 251
 3a0:	95 b9       	out	0x05, r25	; 5
	spi_transmit(((reg<<1)&0x7E)|0x80);
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	88 0f       	add	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	8e 77       	andi	r24, 0x7E	; 126
 3aa:	80 68       	ori	r24, 0x80	; 128
 3ac:	0e 94 81 03 	call	0x702	; 0x702 <spi_transmit>
	data = spi_transmit(0x00);
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	0e 94 81 03 	call	0x702	; 0x702 <spi_transmit>
	DISABLE_CHIP();
 3b6:	95 b1       	in	r25, 0x05	; 5
 3b8:	94 60       	ori	r25, 0x04	; 4
 3ba:	95 b9       	out	0x05, r25	; 5
	return data;
}
 3bc:	08 95       	ret

000003be <mfrc522_reset>:

void mfrc522_reset()
{
	mfrc522_write(CommandReg, SoftReset_CMD);
 3be:	6f e0       	ldi	r22, 0x0F	; 15
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	0e 94 bb 01 	call	0x376	; 0x376 <mfrc522_write>
 3c6:	08 95       	ret

000003c8 <mfrc522_init>:
#include "spi.h"

void mfrc522_init()
{
	uint8_t byte;
	mfrc522_reset();
 3c8:	0e 94 df 01 	call	0x3be	; 0x3be <mfrc522_reset>
	
	mfrc522_write(TModeReg, 0x8D);
 3cc:	6d e8       	ldi	r22, 0x8D	; 141
 3ce:	8a e2       	ldi	r24, 0x2A	; 42
 3d0:	0e 94 bb 01 	call	0x376	; 0x376 <mfrc522_write>
    mfrc522_write(TPrescalerReg, 0x3E);
 3d4:	6e e3       	ldi	r22, 0x3E	; 62
 3d6:	8b e2       	ldi	r24, 0x2B	; 43
 3d8:	0e 94 bb 01 	call	0x376	; 0x376 <mfrc522_write>
    mfrc522_write(TReloadReg_1, 30);   
 3dc:	6e e1       	ldi	r22, 0x1E	; 30
 3de:	8c e2       	ldi	r24, 0x2C	; 44
 3e0:	0e 94 bb 01 	call	0x376	; 0x376 <mfrc522_write>
    mfrc522_write(TReloadReg_2, 0);	
 3e4:	60 e0       	ldi	r22, 0x00	; 0
 3e6:	8d e2       	ldi	r24, 0x2D	; 45
 3e8:	0e 94 bb 01 	call	0x376	; 0x376 <mfrc522_write>
	mfrc522_write(TxASKReg, 0x40);	
 3ec:	60 e4       	ldi	r22, 0x40	; 64
 3ee:	85 e1       	ldi	r24, 0x15	; 21
 3f0:	0e 94 bb 01 	call	0x376	; 0x376 <mfrc522_write>
	mfrc522_write(ModeReg, 0x3D);
 3f4:	6d e3       	ldi	r22, 0x3D	; 61
 3f6:	81 e1       	ldi	r24, 0x11	; 17
 3f8:	0e 94 bb 01 	call	0x376	; 0x376 <mfrc522_write>
	
	byte = mfrc522_read(TxControlReg);
 3fc:	84 e1       	ldi	r24, 0x14	; 20
 3fe:	0e 94 ce 01 	call	0x39c	; 0x39c <mfrc522_read>
	if(!(byte&0x03))
 402:	98 2f       	mov	r25, r24
 404:	93 70       	andi	r25, 0x03	; 3
 406:	29 f4       	brne	.+10     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
	{
		mfrc522_write(TxControlReg,byte|0x03);
 408:	68 2f       	mov	r22, r24
 40a:	63 60       	ori	r22, 0x03	; 3
 40c:	84 e1       	ldi	r24, 0x14	; 20
 40e:	0e 94 bb 01 	call	0x376	; 0x376 <mfrc522_write>
 412:	08 95       	ret

00000414 <mfrc522_to_card>:
   
	return status;
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
 414:	4f 92       	push	r4
 416:	5f 92       	push	r5
 418:	6f 92       	push	r6
 41a:	7f 92       	push	r7
 41c:	8f 92       	push	r8
 41e:	9f 92       	push	r9
 420:	af 92       	push	r10
 422:	bf 92       	push	r11
 424:	cf 92       	push	r12
 426:	df 92       	push	r13
 428:	ef 92       	push	r14
 42a:	ff 92       	push	r15
 42c:	0f 93       	push	r16
 42e:	1f 93       	push	r17
 430:	cf 93       	push	r28
 432:	df 93       	push	r29
 434:	d8 2f       	mov	r29, r24
 436:	7b 01       	movw	r14, r22
 438:	c4 2f       	mov	r28, r20
 43a:	59 01       	movw	r10, r18
    uint8_t lastBits;
    uint8_t n;
    uint8_t	tmp;
    uint32_t i;

    switch (cmd)
 43c:	8c 30       	cpi	r24, 0x0C	; 12
 43e:	29 f0       	breq	.+10     	; 0x44a <mfrc522_to_card+0x36>
 440:	8e 30       	cpi	r24, 0x0E	; 14
 442:	61 f0       	breq	.+24     	; 0x45c <mfrc522_to_card+0x48>

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
    uint8_t irqEn = 0x00;
    uint8_t waitIRq = 0x00;
 444:	91 2c       	mov	r9, r1
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
    uint8_t irqEn = 0x00;
 446:	81 2c       	mov	r8, r1
 448:	10 c0       	rjmp	.+32     	; 0x46a <mfrc522_to_card+0x56>
			break;
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
			waitIRq = 0x30;
 44a:	0f 2e       	mov	r0, r31
 44c:	f0 e3       	ldi	r31, 0x30	; 48
 44e:	9f 2e       	mov	r9, r31
 450:	f0 2d       	mov	r31, r0
			waitIRq = 0x10;
			break;
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
 452:	0f 2e       	mov	r0, r31
 454:	f7 e7       	ldi	r31, 0x77	; 119
 456:	8f 2e       	mov	r8, r31
 458:	f0 2d       	mov	r31, r0
			waitIRq = 0x30;
			break;
 45a:	07 c0       	rjmp	.+14     	; 0x46a <mfrc522_to_card+0x56>
    switch (cmd)
    {
        case MFAuthent_CMD:		//Certification cards close
		{
			irqEn = 0x12;
			waitIRq = 0x10;
 45c:	68 94       	set
 45e:	99 24       	eor	r9, r9
 460:	94 f8       	bld	r9, 4

    switch (cmd)
    {
        case MFAuthent_CMD:		//Certification cards close
		{
			irqEn = 0x12;
 462:	0f 2e       	mov	r0, r31
 464:	f2 e1       	ldi	r31, 0x12	; 18
 466:	8f 2e       	mov	r8, r31
 468:	f0 2d       	mov	r31, r0
		default:
			break;
    }
   
    //mfrc522_write(ComIEnReg, irqEn|0x80);	//Interrupt request
    n=mfrc522_read(ComIrqReg);
 46a:	84 e0       	ldi	r24, 0x04	; 4
 46c:	0e 94 ce 01 	call	0x39c	; 0x39c <mfrc522_read>
    mfrc522_write(ComIrqReg,n&(~0x80));//clear all interrupt bits
 470:	68 2f       	mov	r22, r24
 472:	6f 77       	andi	r22, 0x7F	; 127
 474:	84 e0       	ldi	r24, 0x04	; 4
 476:	0e 94 bb 01 	call	0x376	; 0x376 <mfrc522_write>
    n=mfrc522_read(FIFOLevelReg);
 47a:	8a e0       	ldi	r24, 0x0A	; 10
 47c:	0e 94 ce 01 	call	0x39c	; 0x39c <mfrc522_read>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
 480:	68 2f       	mov	r22, r24
 482:	60 68       	ori	r22, 0x80	; 128
 484:	8a e0       	ldi	r24, 0x0A	; 10
 486:	0e 94 bb 01 	call	0x376	; 0x376 <mfrc522_write>
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???
 48a:	60 e0       	ldi	r22, 0x00	; 0
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	0e 94 bb 01 	call	0x376	; 0x376 <mfrc522_write>

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
 492:	41 2c       	mov	r4, r1
 494:	51 2c       	mov	r5, r1
 496:	32 01       	movw	r6, r4
 498:	0c c0       	rjmp	.+24     	; 0x4b2 <mfrc522_to_card+0x9e>
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
 49a:	f7 01       	movw	r30, r14
 49c:	e4 0d       	add	r30, r4
 49e:	f5 1d       	adc	r31, r5
 4a0:	60 81       	ld	r22, Z
 4a2:	89 e0       	ldi	r24, 0x09	; 9
 4a4:	0e 94 bb 01 	call	0x376	; 0x376 <mfrc522_write>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
 4a8:	8f ef       	ldi	r24, 0xFF	; 255
 4aa:	48 1a       	sub	r4, r24
 4ac:	58 0a       	sbc	r5, r24
 4ae:	68 0a       	sbc	r6, r24
 4b0:	78 0a       	sbc	r7, r24
 4b2:	8c 2f       	mov	r24, r28
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	a0 e0       	ldi	r26, 0x00	; 0
 4b8:	b0 e0       	ldi	r27, 0x00	; 0
 4ba:	48 16       	cp	r4, r24
 4bc:	59 06       	cpc	r5, r25
 4be:	6a 06       	cpc	r6, r26
 4c0:	7b 06       	cpc	r7, r27
 4c2:	58 f3       	brcs	.-42     	; 0x49a <mfrc522_to_card+0x86>
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
	}

	//Execute the cmd
	mfrc522_write(CommandReg, cmd);
 4c4:	6d 2f       	mov	r22, r29
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	0e 94 bb 01 	call	0x376	; 0x376 <mfrc522_write>
    if (cmd == Transceive_CMD)
 4cc:	dc 30       	cpi	r29, 0x0C	; 12
 4ce:	41 f4       	brne	.+16     	; 0x4e0 <mfrc522_to_card+0xcc>
    {    
		n=mfrc522_read(BitFramingReg);
 4d0:	8d e0       	ldi	r24, 0x0D	; 13
 4d2:	0e 94 ce 01 	call	0x39c	; 0x39c <mfrc522_read>
		mfrc522_write(BitFramingReg,n|0x80);  
 4d6:	68 2f       	mov	r22, r24
 4d8:	60 68       	ori	r22, 0x80	; 128
 4da:	8d e0       	ldi	r24, 0x0D	; 13
 4dc:	0e 94 bb 01 	call	0x376	; 0x376 <mfrc522_write>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
 4e0:	0f 2e       	mov	r0, r31
 4e2:	f0 ed       	ldi	r31, 0xD0	; 208
 4e4:	cf 2e       	mov	r12, r31
 4e6:	f7 e0       	ldi	r31, 0x07	; 7
 4e8:	df 2e       	mov	r13, r31
 4ea:	e1 2c       	mov	r14, r1
 4ec:	f1 2c       	mov	r15, r1
 4ee:	f0 2d       	mov	r31, r0
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = mfrc522_read(ComIrqReg);
 4f0:	84 e0       	ldi	r24, 0x04	; 4
 4f2:	0e 94 ce 01 	call	0x39c	; 0x39c <mfrc522_read>
 4f6:	c8 2f       	mov	r28, r24
        i--;
 4f8:	e1 e0       	ldi	r30, 0x01	; 1
 4fa:	ce 1a       	sub	r12, r30
 4fc:	d1 08       	sbc	r13, r1
 4fe:	e1 08       	sbc	r14, r1
 500:	f1 08       	sbc	r15, r1
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 502:	29 f0       	breq	.+10     	; 0x50e <mfrc522_to_card+0xfa>
 504:	80 fd       	sbrc	r24, 0
 506:	03 c0       	rjmp	.+6      	; 0x50e <mfrc522_to_card+0xfa>
 508:	89 2d       	mov	r24, r9
 50a:	8c 23       	and	r24, r28
 50c:	89 f3       	breq	.-30     	; 0x4f0 <mfrc522_to_card+0xdc>

	tmp=mfrc522_read(BitFramingReg);
 50e:	8d e0       	ldi	r24, 0x0D	; 13
 510:	0e 94 ce 01 	call	0x39c	; 0x39c <mfrc522_read>
	mfrc522_write(BitFramingReg,tmp&(~0x80));
 514:	68 2f       	mov	r22, r24
 516:	6f 77       	andi	r22, 0x7F	; 127
 518:	8d e0       	ldi	r24, 0x0D	; 13
 51a:	0e 94 bb 01 	call	0x376	; 0x376 <mfrc522_write>
	
    if (i != 0)
 51e:	cd 28       	or	r12, r13
 520:	ce 28       	or	r12, r14
 522:	cf 28       	or	r12, r15
 524:	09 f4       	brne	.+2      	; 0x528 <mfrc522_to_card+0x114>
 526:	60 c0       	rjmp	.+192    	; 0x5e8 <mfrc522_to_card+0x1d4>
    {    
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 528:	86 e0       	ldi	r24, 0x06	; 6
 52a:	0e 94 ce 01 	call	0x39c	; 0x39c <mfrc522_read>
 52e:	8b 71       	andi	r24, 0x1B	; 27
 530:	09 f0       	breq	.+2      	; 0x534 <mfrc522_to_card+0x120>
 532:	5c c0       	rjmp	.+184    	; 0x5ec <mfrc522_to_card+0x1d8>
        {
            status = CARD_FOUND;
            if (n & irqEn & 0x01)
 534:	c8 21       	and	r28, r8
 536:	c0 fd       	sbrc	r28, 0
 538:	02 c0       	rjmp	.+4      	; 0x53e <mfrc522_to_card+0x12a>
	
    if (i != 0)
    {    
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
        {
            status = CARD_FOUND;
 53a:	c1 e0       	ldi	r28, 0x01	; 1
 53c:	01 c0       	rjmp	.+2      	; 0x540 <mfrc522_to_card+0x12c>
            if (n & irqEn & 0x01)
            {   
				status = CARD_NOT_FOUND;			//??   
 53e:	c2 e0       	ldi	r28, 0x02	; 2
			}

            if (cmd == Transceive_CMD)
 540:	dc 30       	cpi	r29, 0x0C	; 12
 542:	09 f0       	breq	.+2      	; 0x546 <mfrc522_to_card+0x132>
 544:	54 c0       	rjmp	.+168    	; 0x5ee <mfrc522_to_card+0x1da>
            {
               	n = mfrc522_read(FIFOLevelReg);
 546:	8a e0       	ldi	r24, 0x0A	; 10
 548:	0e 94 ce 01 	call	0x39c	; 0x39c <mfrc522_read>
 54c:	d8 2f       	mov	r29, r24
              	lastBits = mfrc522_read(ControlReg) & 0x07;
 54e:	8c e0       	ldi	r24, 0x0C	; 12
 550:	0e 94 ce 01 	call	0x39c	; 0x39c <mfrc522_read>
 554:	28 2f       	mov	r18, r24
 556:	27 70       	andi	r18, 0x07	; 7
                if (lastBits)
 558:	a9 f0       	breq	.+42     	; 0x584 <mfrc522_to_card+0x170>
                {   
					*back_data_len = (n-1)*8 + lastBits;   
 55a:	8d 2f       	mov	r24, r29
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	01 97       	sbiw	r24, 0x01	; 1
 560:	88 0f       	add	r24, r24
 562:	99 1f       	adc	r25, r25
 564:	88 0f       	add	r24, r24
 566:	99 1f       	adc	r25, r25
 568:	88 0f       	add	r24, r24
 56a:	99 1f       	adc	r25, r25
 56c:	82 0f       	add	r24, r18
 56e:	91 1d       	adc	r25, r1
 570:	09 2e       	mov	r0, r25
 572:	00 0c       	add	r0, r0
 574:	aa 0b       	sbc	r26, r26
 576:	bb 0b       	sbc	r27, r27
 578:	f8 01       	movw	r30, r16
 57a:	80 83       	st	Z, r24
 57c:	91 83       	std	Z+1, r25	; 0x01
 57e:	a2 83       	std	Z+2, r26	; 0x02
 580:	b3 83       	std	Z+3, r27	; 0x03
 582:	11 c0       	rjmp	.+34     	; 0x5a6 <mfrc522_to_card+0x192>
				}
                else
                {   
					*back_data_len = n*8;   
 584:	8d 2f       	mov	r24, r29
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	88 0f       	add	r24, r24
 58a:	99 1f       	adc	r25, r25
 58c:	88 0f       	add	r24, r24
 58e:	99 1f       	adc	r25, r25
 590:	88 0f       	add	r24, r24
 592:	99 1f       	adc	r25, r25
 594:	09 2e       	mov	r0, r25
 596:	00 0c       	add	r0, r0
 598:	aa 0b       	sbc	r26, r26
 59a:	bb 0b       	sbc	r27, r27
 59c:	f8 01       	movw	r30, r16
 59e:	80 83       	st	Z, r24
 5a0:	91 83       	std	Z+1, r25	; 0x01
 5a2:	a2 83       	std	Z+2, r26	; 0x02
 5a4:	b3 83       	std	Z+3, r27	; 0x03
				}

                if (n == 0)
 5a6:	d1 11       	cpse	r29, r1
 5a8:	01 c0       	rjmp	.+2      	; 0x5ac <mfrc522_to_card+0x198>
                {   
					n = 1;    
 5aa:	d1 e0       	ldi	r29, 0x01	; 1
				}
                if (n > MAX_LEN)
 5ac:	d1 31       	cpi	r29, 0x11	; 17
 5ae:	08 f0       	brcs	.+2      	; 0x5b2 <mfrc522_to_card+0x19e>
                {   
					n = MAX_LEN;   
 5b0:	d0 e1       	ldi	r29, 0x10	; 16
				}
				
				//Reading the received data in FIFO
                for (i=0; i<n; i++)
 5b2:	c1 2c       	mov	r12, r1
 5b4:	d1 2c       	mov	r13, r1
 5b6:	76 01       	movw	r14, r12
 5b8:	0d c0       	rjmp	.+26     	; 0x5d4 <mfrc522_to_card+0x1c0>
                {   
					back_data[i] = mfrc522_read(FIFODataReg);    
 5ba:	85 01       	movw	r16, r10
 5bc:	0c 0d       	add	r16, r12
 5be:	1d 1d       	adc	r17, r13
 5c0:	89 e0       	ldi	r24, 0x09	; 9
 5c2:	0e 94 ce 01 	call	0x39c	; 0x39c <mfrc522_read>
 5c6:	f8 01       	movw	r30, r16
 5c8:	80 83       	st	Z, r24
                {   
					n = MAX_LEN;   
				}
				
				//Reading the received data in FIFO
                for (i=0; i<n; i++)
 5ca:	ff ef       	ldi	r31, 0xFF	; 255
 5cc:	cf 1a       	sub	r12, r31
 5ce:	df 0a       	sbc	r13, r31
 5d0:	ef 0a       	sbc	r14, r31
 5d2:	ff 0a       	sbc	r15, r31
 5d4:	8d 2f       	mov	r24, r29
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	a0 e0       	ldi	r26, 0x00	; 0
 5da:	b0 e0       	ldi	r27, 0x00	; 0
 5dc:	c8 16       	cp	r12, r24
 5de:	d9 06       	cpc	r13, r25
 5e0:	ea 06       	cpc	r14, r26
 5e2:	fb 06       	cpc	r15, r27
 5e4:	50 f3       	brcs	.-44     	; 0x5ba <mfrc522_to_card+0x1a6>
 5e6:	03 c0       	rjmp	.+6      	; 0x5ee <mfrc522_to_card+0x1da>
	return status;
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
 5e8:	c3 e0       	ldi	r28, 0x03	; 3
 5ea:	01 c0       	rjmp	.+2      	; 0x5ee <mfrc522_to_card+0x1da>
				}
            }
        }
        else
        {   
			status = ERROR;  
 5ec:	c3 e0       	ldi	r28, 0x03	; 3
	
    //SetBitMask(ControlReg,0x80);           //timer stops
    //mfrc522_write(cmdReg, PCD_IDLE); 

    return status;
}
 5ee:	8c 2f       	mov	r24, r28
 5f0:	df 91       	pop	r29
 5f2:	cf 91       	pop	r28
 5f4:	1f 91       	pop	r17
 5f6:	0f 91       	pop	r16
 5f8:	ff 90       	pop	r15
 5fa:	ef 90       	pop	r14
 5fc:	df 90       	pop	r13
 5fe:	cf 90       	pop	r12
 600:	bf 90       	pop	r11
 602:	af 90       	pop	r10
 604:	9f 90       	pop	r9
 606:	8f 90       	pop	r8
 608:	7f 90       	pop	r7
 60a:	6f 90       	pop	r6
 60c:	5f 90       	pop	r5
 60e:	4f 90       	pop	r4
 610:	08 95       	ret

00000612 <mfrc522_request>:
{
	mfrc522_write(CommandReg, SoftReset_CMD);
}

uint8_t	mfrc522_request(uint8_t req_mode, uint8_t * tag_type)
{
 612:	ef 92       	push	r14
 614:	ff 92       	push	r15
 616:	0f 93       	push	r16
 618:	1f 93       	push	r17
 61a:	cf 93       	push	r28
 61c:	df 93       	push	r29
 61e:	00 d0       	rcall	.+0      	; 0x620 <mfrc522_request+0xe>
 620:	00 d0       	rcall	.+0      	; 0x622 <mfrc522_request+0x10>
 622:	cd b7       	in	r28, 0x3d	; 61
 624:	de b7       	in	r29, 0x3e	; 62
 626:	18 2f       	mov	r17, r24
 628:	7b 01       	movw	r14, r22
	uint8_t  status;  
	uint32_t backBits;//The received data bits

	mfrc522_write(BitFramingReg, 0x07);//TxLastBists = BitFramingReg[2..0]	???
 62a:	67 e0       	ldi	r22, 0x07	; 7
 62c:	8d e0       	ldi	r24, 0x0D	; 13
 62e:	0e 94 bb 01 	call	0x376	; 0x376 <mfrc522_write>
	
	tag_type[0] = req_mode;
 632:	f7 01       	movw	r30, r14
 634:	10 83       	st	Z, r17
	status = mfrc522_to_card(Transceive_CMD, tag_type, 1, tag_type, &backBits);
 636:	8e 01       	movw	r16, r28
 638:	0f 5f       	subi	r16, 0xFF	; 255
 63a:	1f 4f       	sbci	r17, 0xFF	; 255
 63c:	97 01       	movw	r18, r14
 63e:	41 e0       	ldi	r20, 0x01	; 1
 640:	b7 01       	movw	r22, r14
 642:	8c e0       	ldi	r24, 0x0C	; 12
 644:	0e 94 0a 02 	call	0x414	; 0x414 <mfrc522_to_card>

	if ((status != CARD_FOUND) || (backBits != 0x10))
 648:	81 30       	cpi	r24, 0x01	; 1
 64a:	51 f4       	brne	.+20     	; 0x660 <mfrc522_request+0x4e>
 64c:	49 81       	ldd	r20, Y+1	; 0x01
 64e:	5a 81       	ldd	r21, Y+2	; 0x02
 650:	6b 81       	ldd	r22, Y+3	; 0x03
 652:	7c 81       	ldd	r23, Y+4	; 0x04
 654:	40 31       	cpi	r20, 0x10	; 16
 656:	51 05       	cpc	r21, r1
 658:	61 05       	cpc	r22, r1
 65a:	71 05       	cpc	r23, r1
 65c:	19 f4       	brne	.+6      	; 0x664 <mfrc522_request+0x52>
 65e:	03 c0       	rjmp	.+6      	; 0x666 <mfrc522_request+0x54>
	{    
		status = ERROR;
 660:	83 e0       	ldi	r24, 0x03	; 3
 662:	01 c0       	rjmp	.+2      	; 0x666 <mfrc522_request+0x54>
 664:	83 e0       	ldi	r24, 0x03	; 3
	}
   
	return status;
}
 666:	0f 90       	pop	r0
 668:	0f 90       	pop	r0
 66a:	0f 90       	pop	r0
 66c:	0f 90       	pop	r0
 66e:	df 91       	pop	r29
 670:	cf 91       	pop	r28
 672:	1f 91       	pop	r17
 674:	0f 91       	pop	r16
 676:	ff 90       	pop	r15
 678:	ef 90       	pop	r14
 67a:	08 95       	ret

0000067c <mfrc522_get_card_serial>:
    return status;
}


uint8_t mfrc522_get_card_serial(uint8_t * serial_out)
{
 67c:	ef 92       	push	r14
 67e:	ff 92       	push	r15
 680:	0f 93       	push	r16
 682:	1f 93       	push	r17
 684:	cf 93       	push	r28
 686:	df 93       	push	r29
 688:	00 d0       	rcall	.+0      	; 0x68a <mfrc522_get_card_serial+0xe>
 68a:	00 d0       	rcall	.+0      	; 0x68c <mfrc522_get_card_serial+0x10>
 68c:	cd b7       	in	r28, 0x3d	; 61
 68e:	de b7       	in	r29, 0x3e	; 62
 690:	7c 01       	movw	r14, r24
	uint8_t status;
    uint8_t i;
	uint8_t serNumCheck=0;
    uint32_t unLen;
    
	mfrc522_write(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 692:	60 e0       	ldi	r22, 0x00	; 0
 694:	8d e0       	ldi	r24, 0x0D	; 13
 696:	0e 94 bb 01 	call	0x376	; 0x376 <mfrc522_write>
 
    serial_out[0] = PICC_ANTICOLL;
 69a:	83 e9       	ldi	r24, 0x93	; 147
 69c:	f7 01       	movw	r30, r14
 69e:	80 83       	st	Z, r24
    serial_out[1] = 0x20;
 6a0:	80 e2       	ldi	r24, 0x20	; 32
 6a2:	81 83       	std	Z+1, r24	; 0x01
    status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);
 6a4:	8e 01       	movw	r16, r28
 6a6:	0f 5f       	subi	r16, 0xFF	; 255
 6a8:	1f 4f       	sbci	r17, 0xFF	; 255
 6aa:	97 01       	movw	r18, r14
 6ac:	42 e0       	ldi	r20, 0x02	; 2
 6ae:	b7 01       	movw	r22, r14
 6b0:	8c e0       	ldi	r24, 0x0C	; 12
 6b2:	0e 94 0a 02 	call	0x414	; 0x414 <mfrc522_to_card>

    if (status == CARD_FOUND)
 6b6:	81 30       	cpi	r24, 0x01	; 1
 6b8:	91 f4       	brne	.+36     	; 0x6de <mfrc522_get_card_serial+0x62>
 6ba:	07 c0       	rjmp	.+14     	; 0x6ca <mfrc522_get_card_serial+0x4e>
	{
		//Check card serial number
		for (i=0; i<4; i++)
		{   
		 	serNumCheck ^= serial_out[i];
 6bc:	f7 01       	movw	r30, r14
 6be:	e9 0f       	add	r30, r25
 6c0:	f1 1d       	adc	r31, r1
 6c2:	30 81       	ld	r19, Z
 6c4:	23 27       	eor	r18, r19
    status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);

    if (status == CARD_FOUND)
	{
		//Check card serial number
		for (i=0; i<4; i++)
 6c6:	9f 5f       	subi	r25, 0xFF	; 255
 6c8:	02 c0       	rjmp	.+4      	; 0x6ce <mfrc522_get_card_serial+0x52>
 6ca:	20 e0       	ldi	r18, 0x00	; 0
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	94 30       	cpi	r25, 0x04	; 4
 6d0:	a8 f3       	brcs	.-22     	; 0x6bc <mfrc522_get_card_serial+0x40>
		{   
		 	serNumCheck ^= serial_out[i];
		}
		if (serNumCheck != serial_out[i])
 6d2:	f7 01       	movw	r30, r14
 6d4:	e9 0f       	add	r30, r25
 6d6:	f1 1d       	adc	r31, r1
 6d8:	90 81       	ld	r25, Z
 6da:	29 13       	cpse	r18, r25
		{   
			status = ERROR;    
 6dc:	83 e0       	ldi	r24, 0x03	; 3
		}
    }
    return status;
}
 6de:	0f 90       	pop	r0
 6e0:	0f 90       	pop	r0
 6e2:	0f 90       	pop	r0
 6e4:	0f 90       	pop	r0
 6e6:	df 91       	pop	r29
 6e8:	cf 91       	pop	r28
 6ea:	1f 91       	pop	r17
 6ec:	0f 91       	pop	r16
 6ee:	ff 90       	pop	r15
 6f0:	ef 90       	pop	r14
 6f2:	08 95       	ret

000006f4 <spi_init>:
#include "spi.h"

#if SPI_CONFIG_AS_MASTER
void spi_init()
{
	SPI_DDR |= (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS);
 6f4:	84 b1       	in	r24, 0x04	; 4
 6f6:	8c 62       	ori	r24, 0x2C	; 44
 6f8:	84 b9       	out	0x04, r24	; 4
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0); //prescaler 16
 6fa:	8c b5       	in	r24, 0x2c	; 44
 6fc:	81 65       	ori	r24, 0x51	; 81
 6fe:	8c bd       	out	0x2c, r24	; 44
 700:	08 95       	ret

00000702 <spi_transmit>:
}


uint8_t spi_transmit(uint8_t data)
{
	SPDR = data;
 702:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
 704:	0d b4       	in	r0, 0x2d	; 45
 706:	07 fe       	sbrs	r0, 7
 708:	fd cf       	rjmp	.-6      	; 0x704 <spi_transmit+0x2>
	
	return SPDR;
 70a:	8e b5       	in	r24, 0x2e	; 46
}
 70c:	08 95       	ret

0000070e <__vector_18>:
	uart_tx_busy = 1;
}

uint8_t uart_string_complete(){
	return uart_fetch_complete;
}
 70e:	1f 92       	push	r1
 710:	0f 92       	push	r0
 712:	0f b6       	in	r0, 0x3f	; 63
 714:	0f 92       	push	r0
 716:	11 24       	eor	r1, r1
 718:	2f 93       	push	r18
 71a:	3f 93       	push	r19
 71c:	8f 93       	push	r24
 71e:	9f 93       	push	r25
 720:	af 93       	push	r26
 722:	bf 93       	push	r27
 724:	ef 93       	push	r30
 726:	ff 93       	push	r31
 728:	e4 ec       	ldi	r30, 0xC4	; 196
 72a:	f1 e0       	ldi	r31, 0x01	; 1
 72c:	80 81       	ld	r24, Z
 72e:	91 81       	ldd	r25, Z+1	; 0x01
 730:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 734:	dc 01       	movw	r26, r24
 736:	ae 5b       	subi	r26, 0xBE	; 190
 738:	be 4f       	sbci	r27, 0xFE	; 254
 73a:	2c 93       	st	X, r18
 73c:	01 96       	adiw	r24, 0x01	; 1
 73e:	91 83       	std	Z+1, r25	; 0x01
 740:	80 83       	st	Z, r24
 742:	e2 ec       	ldi	r30, 0xC2	; 194
 744:	f1 e0       	ldi	r31, 0x01	; 1
 746:	20 81       	ld	r18, Z
 748:	31 81       	ldd	r19, Z+1	; 0x01
 74a:	2f 5f       	subi	r18, 0xFF	; 255
 74c:	3f 4f       	sbci	r19, 0xFF	; 255
 74e:	31 83       	std	Z+1, r19	; 0x01
 750:	20 83       	st	Z, r18
 752:	80 38       	cpi	r24, 0x80	; 128
 754:	91 05       	cpc	r25, r1
 756:	20 f0       	brcs	.+8      	; 0x760 <__vector_18+0x52>
 758:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <__data_end+0x83>
 75c:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <__data_end+0x82>
 760:	ff 91       	pop	r31
 762:	ef 91       	pop	r30
 764:	bf 91       	pop	r27
 766:	af 91       	pop	r26
 768:	9f 91       	pop	r25
 76a:	8f 91       	pop	r24
 76c:	3f 91       	pop	r19
 76e:	2f 91       	pop	r18
 770:	0f 90       	pop	r0
 772:	0f be       	out	0x3f, r0	; 63
 774:	0f 90       	pop	r0
 776:	1f 90       	pop	r1
 778:	18 95       	reti

0000077a <__vector_20>:
 77a:	1f 92       	push	r1
 77c:	0f 92       	push	r0
 77e:	0f b6       	in	r0, 0x3f	; 63
 780:	0f 92       	push	r0
 782:	11 24       	eor	r1, r1
 784:	8f 93       	push	r24
 786:	81 e0       	ldi	r24, 0x01	; 1
 788:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 78c:	8f 91       	pop	r24
 78e:	0f 90       	pop	r0
 790:	0f be       	out	0x3f, r0	; 63
 792:	0f 90       	pop	r0
 794:	1f 90       	pop	r1
 796:	18 95       	reti

00000798 <uart_init>:

void uart_init(uint32_t baud){
	/*Set baud rate*/
	baud = F_CPU/(16*baud) - 1;
 798:	dc 01       	movw	r26, r24
 79a:	cb 01       	movw	r24, r22
 79c:	88 0f       	add	r24, r24
 79e:	99 1f       	adc	r25, r25
 7a0:	aa 1f       	adc	r26, r26
 7a2:	bb 1f       	adc	r27, r27
 7a4:	88 0f       	add	r24, r24
 7a6:	99 1f       	adc	r25, r25
 7a8:	aa 1f       	adc	r26, r26
 7aa:	bb 1f       	adc	r27, r27
 7ac:	9c 01       	movw	r18, r24
 7ae:	ad 01       	movw	r20, r26
 7b0:	22 0f       	add	r18, r18
 7b2:	33 1f       	adc	r19, r19
 7b4:	44 1f       	adc	r20, r20
 7b6:	55 1f       	adc	r21, r21
 7b8:	22 0f       	add	r18, r18
 7ba:	33 1f       	adc	r19, r19
 7bc:	44 1f       	adc	r20, r20
 7be:	55 1f       	adc	r21, r21
 7c0:	60 e0       	ldi	r22, 0x00	; 0
 7c2:	74 e2       	ldi	r23, 0x24	; 36
 7c4:	84 ef       	ldi	r24, 0xF4	; 244
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	0e 94 29 04 	call	0x852	; 0x852 <__udivmodsi4>
 7cc:	ba 01       	movw	r22, r20
 7ce:	a9 01       	movw	r20, r18
 7d0:	41 50       	subi	r20, 0x01	; 1
 7d2:	51 09       	sbc	r21, r1
 7d4:	61 09       	sbc	r22, r1
 7d6:	71 09       	sbc	r23, r1
	UBRR0H = (baud & 0x0F00) >> 8;	// mask out the upper 4 bits
 7d8:	db 01       	movw	r26, r22
 7da:	ca 01       	movw	r24, r20
 7dc:	88 27       	eor	r24, r24
 7de:	9f 70       	andi	r25, 0x0F	; 15
 7e0:	aa 27       	eor	r26, r26
 7e2:	bb 27       	eor	r27, r27
 7e4:	89 2f       	mov	r24, r25
 7e6:	9a 2f       	mov	r25, r26
 7e8:	ab 2f       	mov	r26, r27
 7ea:	bb 27       	eor	r27, r27
 7ec:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (baud & 0x00FF);		// mask out the lower 8 bits
 7f0:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	/* Enable Rx and Tx as well as Rx and Rx complete interrupts*/
	UCSR0B |= (1<< RXEN0) | (1<<TXEN0) | (1<< RXCIE0) | (1 << TXCIE0);
 7f4:	e1 ec       	ldi	r30, 0xC1	; 193
 7f6:	f0 e0       	ldi	r31, 0x00	; 0
 7f8:	80 81       	ld	r24, Z
 7fa:	88 6d       	ori	r24, 0xD8	; 216
 7fc:	80 83       	st	Z, r24
	
	/* Initialize Objects */
	uart_buffer = (UARTBuffer){ .buffer = {0}, .head = 0, .tail = 0};		
 7fe:	e2 e4       	ldi	r30, 0x42	; 66
 800:	f1 e0       	ldi	r31, 0x01	; 1
 802:	86 e8       	ldi	r24, 0x86	; 134
 804:	df 01       	movw	r26, r30
 806:	1d 92       	st	X+, r1
 808:	8a 95       	dec	r24
 80a:	e9 f7       	brne	.-6      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 80c:	08 95       	ret

0000080e <uart_send_byte>:
}


void uart_send_byte(char data){
	while(uart_tx_busy == 0); // while UART is not transmitting
 80e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 812:	99 23       	and	r25, r25
 814:	e1 f3       	breq	.-8      	; 0x80e <uart_send_byte>
	
	uart_tx_busy = 0; 
 816:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	UDR0 = data;				// load byte passed into the function to the uart buffer
 81a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 81e:	08 95       	ret

00000820 <uart_send_string>:
}

void uart_send_string(char *arr) {
 820:	0f 93       	push	r16
 822:	1f 93       	push	r17
 824:	cf 93       	push	r28
 826:	df 93       	push	r29
 828:	8c 01       	movw	r16, r24
	uint16_t i = 0; 
 82a:	c0 e0       	ldi	r28, 0x00	; 0
 82c:	d0 e0       	ldi	r29, 0x00	; 0
	
	do {
		uart_send_byte(arr[i]);
 82e:	f8 01       	movw	r30, r16
 830:	ec 0f       	add	r30, r28
 832:	fd 1f       	adc	r31, r29
 834:	80 81       	ld	r24, Z
 836:	0e 94 07 04 	call	0x80e	; 0x80e <uart_send_byte>
		i++;
 83a:	21 96       	adiw	r28, 0x01	; 1
	} while(arr[i] != '\0');
 83c:	f8 01       	movw	r30, r16
 83e:	ec 0f       	add	r30, r28
 840:	fd 1f       	adc	r31, r29
 842:	80 81       	ld	r24, Z
 844:	81 11       	cpse	r24, r1
 846:	f3 cf       	rjmp	.-26     	; 0x82e <uart_send_string+0xe>
}
 848:	df 91       	pop	r29
 84a:	cf 91       	pop	r28
 84c:	1f 91       	pop	r17
 84e:	0f 91       	pop	r16
 850:	08 95       	ret

00000852 <__udivmodsi4>:
 852:	a1 e2       	ldi	r26, 0x21	; 33
 854:	1a 2e       	mov	r1, r26
 856:	aa 1b       	sub	r26, r26
 858:	bb 1b       	sub	r27, r27
 85a:	fd 01       	movw	r30, r26
 85c:	0d c0       	rjmp	.+26     	; 0x878 <__udivmodsi4_ep>

0000085e <__udivmodsi4_loop>:
 85e:	aa 1f       	adc	r26, r26
 860:	bb 1f       	adc	r27, r27
 862:	ee 1f       	adc	r30, r30
 864:	ff 1f       	adc	r31, r31
 866:	a2 17       	cp	r26, r18
 868:	b3 07       	cpc	r27, r19
 86a:	e4 07       	cpc	r30, r20
 86c:	f5 07       	cpc	r31, r21
 86e:	20 f0       	brcs	.+8      	; 0x878 <__udivmodsi4_ep>
 870:	a2 1b       	sub	r26, r18
 872:	b3 0b       	sbc	r27, r19
 874:	e4 0b       	sbc	r30, r20
 876:	f5 0b       	sbc	r31, r21

00000878 <__udivmodsi4_ep>:
 878:	66 1f       	adc	r22, r22
 87a:	77 1f       	adc	r23, r23
 87c:	88 1f       	adc	r24, r24
 87e:	99 1f       	adc	r25, r25
 880:	1a 94       	dec	r1
 882:	69 f7       	brne	.-38     	; 0x85e <__udivmodsi4_loop>
 884:	60 95       	com	r22
 886:	70 95       	com	r23
 888:	80 95       	com	r24
 88a:	90 95       	com	r25
 88c:	9b 01       	movw	r18, r22
 88e:	ac 01       	movw	r20, r24
 890:	bd 01       	movw	r22, r26
 892:	cf 01       	movw	r24, r30
 894:	08 95       	ret

00000896 <sprintf>:
 896:	ae e0       	ldi	r26, 0x0E	; 14
 898:	b0 e0       	ldi	r27, 0x00	; 0
 89a:	e1 e5       	ldi	r30, 0x51	; 81
 89c:	f4 e0       	ldi	r31, 0x04	; 4
 89e:	0c 94 0c 07 	jmp	0xe18	; 0xe18 <__prologue_saves__+0x1c>
 8a2:	0d 89       	ldd	r16, Y+21	; 0x15
 8a4:	1e 89       	ldd	r17, Y+22	; 0x16
 8a6:	86 e0       	ldi	r24, 0x06	; 6
 8a8:	8c 83       	std	Y+4, r24	; 0x04
 8aa:	1a 83       	std	Y+2, r17	; 0x02
 8ac:	09 83       	std	Y+1, r16	; 0x01
 8ae:	8f ef       	ldi	r24, 0xFF	; 255
 8b0:	9f e7       	ldi	r25, 0x7F	; 127
 8b2:	9e 83       	std	Y+6, r25	; 0x06
 8b4:	8d 83       	std	Y+5, r24	; 0x05
 8b6:	ae 01       	movw	r20, r28
 8b8:	47 5e       	subi	r20, 0xE7	; 231
 8ba:	5f 4f       	sbci	r21, 0xFF	; 255
 8bc:	6f 89       	ldd	r22, Y+23	; 0x17
 8be:	78 8d       	ldd	r23, Y+24	; 0x18
 8c0:	ce 01       	movw	r24, r28
 8c2:	01 96       	adiw	r24, 0x01	; 1
 8c4:	0e 94 6d 04 	call	0x8da	; 0x8da <vfprintf>
 8c8:	ef 81       	ldd	r30, Y+7	; 0x07
 8ca:	f8 85       	ldd	r31, Y+8	; 0x08
 8cc:	e0 0f       	add	r30, r16
 8ce:	f1 1f       	adc	r31, r17
 8d0:	10 82       	st	Z, r1
 8d2:	2e 96       	adiw	r28, 0x0e	; 14
 8d4:	e4 e0       	ldi	r30, 0x04	; 4
 8d6:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__epilogue_restores__+0x1c>

000008da <vfprintf>:
 8da:	ab e0       	ldi	r26, 0x0B	; 11
 8dc:	b0 e0       	ldi	r27, 0x00	; 0
 8de:	e3 e7       	ldi	r30, 0x73	; 115
 8e0:	f4 e0       	ldi	r31, 0x04	; 4
 8e2:	0c 94 fe 06 	jmp	0xdfc	; 0xdfc <__prologue_saves__>
 8e6:	6c 01       	movw	r12, r24
 8e8:	7b 01       	movw	r14, r22
 8ea:	8a 01       	movw	r16, r20
 8ec:	fc 01       	movw	r30, r24
 8ee:	17 82       	std	Z+7, r1	; 0x07
 8f0:	16 82       	std	Z+6, r1	; 0x06
 8f2:	83 81       	ldd	r24, Z+3	; 0x03
 8f4:	81 ff       	sbrs	r24, 1
 8f6:	cc c1       	rjmp	.+920    	; 0xc90 <__stack+0x391>
 8f8:	ce 01       	movw	r24, r28
 8fa:	01 96       	adiw	r24, 0x01	; 1
 8fc:	3c 01       	movw	r6, r24
 8fe:	f6 01       	movw	r30, r12
 900:	93 81       	ldd	r25, Z+3	; 0x03
 902:	f7 01       	movw	r30, r14
 904:	93 fd       	sbrc	r25, 3
 906:	85 91       	lpm	r24, Z+
 908:	93 ff       	sbrs	r25, 3
 90a:	81 91       	ld	r24, Z+
 90c:	7f 01       	movw	r14, r30
 90e:	88 23       	and	r24, r24
 910:	09 f4       	brne	.+2      	; 0x914 <__stack+0x15>
 912:	ba c1       	rjmp	.+884    	; 0xc88 <__stack+0x389>
 914:	85 32       	cpi	r24, 0x25	; 37
 916:	39 f4       	brne	.+14     	; 0x926 <__stack+0x27>
 918:	93 fd       	sbrc	r25, 3
 91a:	85 91       	lpm	r24, Z+
 91c:	93 ff       	sbrs	r25, 3
 91e:	81 91       	ld	r24, Z+
 920:	7f 01       	movw	r14, r30
 922:	85 32       	cpi	r24, 0x25	; 37
 924:	29 f4       	brne	.+10     	; 0x930 <__stack+0x31>
 926:	b6 01       	movw	r22, r12
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	0e 94 64 06 	call	0xcc8	; 0xcc8 <fputc>
 92e:	e7 cf       	rjmp	.-50     	; 0x8fe <vfprintf+0x24>
 930:	91 2c       	mov	r9, r1
 932:	21 2c       	mov	r2, r1
 934:	31 2c       	mov	r3, r1
 936:	ff e1       	ldi	r31, 0x1F	; 31
 938:	f3 15       	cp	r31, r3
 93a:	d8 f0       	brcs	.+54     	; 0x972 <__stack+0x73>
 93c:	8b 32       	cpi	r24, 0x2B	; 43
 93e:	79 f0       	breq	.+30     	; 0x95e <__stack+0x5f>
 940:	38 f4       	brcc	.+14     	; 0x950 <__stack+0x51>
 942:	80 32       	cpi	r24, 0x20	; 32
 944:	79 f0       	breq	.+30     	; 0x964 <__stack+0x65>
 946:	83 32       	cpi	r24, 0x23	; 35
 948:	a1 f4       	brne	.+40     	; 0x972 <__stack+0x73>
 94a:	23 2d       	mov	r18, r3
 94c:	20 61       	ori	r18, 0x10	; 16
 94e:	1d c0       	rjmp	.+58     	; 0x98a <__stack+0x8b>
 950:	8d 32       	cpi	r24, 0x2D	; 45
 952:	61 f0       	breq	.+24     	; 0x96c <__stack+0x6d>
 954:	80 33       	cpi	r24, 0x30	; 48
 956:	69 f4       	brne	.+26     	; 0x972 <__stack+0x73>
 958:	23 2d       	mov	r18, r3
 95a:	21 60       	ori	r18, 0x01	; 1
 95c:	16 c0       	rjmp	.+44     	; 0x98a <__stack+0x8b>
 95e:	83 2d       	mov	r24, r3
 960:	82 60       	ori	r24, 0x02	; 2
 962:	38 2e       	mov	r3, r24
 964:	e3 2d       	mov	r30, r3
 966:	e4 60       	ori	r30, 0x04	; 4
 968:	3e 2e       	mov	r3, r30
 96a:	2a c0       	rjmp	.+84     	; 0x9c0 <__stack+0xc1>
 96c:	f3 2d       	mov	r31, r3
 96e:	f8 60       	ori	r31, 0x08	; 8
 970:	1d c0       	rjmp	.+58     	; 0x9ac <__stack+0xad>
 972:	37 fc       	sbrc	r3, 7
 974:	2d c0       	rjmp	.+90     	; 0x9d0 <__stack+0xd1>
 976:	20 ed       	ldi	r18, 0xD0	; 208
 978:	28 0f       	add	r18, r24
 97a:	2a 30       	cpi	r18, 0x0A	; 10
 97c:	40 f0       	brcs	.+16     	; 0x98e <__stack+0x8f>
 97e:	8e 32       	cpi	r24, 0x2E	; 46
 980:	b9 f4       	brne	.+46     	; 0x9b0 <__stack+0xb1>
 982:	36 fc       	sbrc	r3, 6
 984:	81 c1       	rjmp	.+770    	; 0xc88 <__stack+0x389>
 986:	23 2d       	mov	r18, r3
 988:	20 64       	ori	r18, 0x40	; 64
 98a:	32 2e       	mov	r3, r18
 98c:	19 c0       	rjmp	.+50     	; 0x9c0 <__stack+0xc1>
 98e:	36 fe       	sbrs	r3, 6
 990:	06 c0       	rjmp	.+12     	; 0x99e <__stack+0x9f>
 992:	8a e0       	ldi	r24, 0x0A	; 10
 994:	98 9e       	mul	r9, r24
 996:	20 0d       	add	r18, r0
 998:	11 24       	eor	r1, r1
 99a:	92 2e       	mov	r9, r18
 99c:	11 c0       	rjmp	.+34     	; 0x9c0 <__stack+0xc1>
 99e:	ea e0       	ldi	r30, 0x0A	; 10
 9a0:	2e 9e       	mul	r2, r30
 9a2:	20 0d       	add	r18, r0
 9a4:	11 24       	eor	r1, r1
 9a6:	22 2e       	mov	r2, r18
 9a8:	f3 2d       	mov	r31, r3
 9aa:	f0 62       	ori	r31, 0x20	; 32
 9ac:	3f 2e       	mov	r3, r31
 9ae:	08 c0       	rjmp	.+16     	; 0x9c0 <__stack+0xc1>
 9b0:	8c 36       	cpi	r24, 0x6C	; 108
 9b2:	21 f4       	brne	.+8      	; 0x9bc <__stack+0xbd>
 9b4:	83 2d       	mov	r24, r3
 9b6:	80 68       	ori	r24, 0x80	; 128
 9b8:	38 2e       	mov	r3, r24
 9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <__stack+0xc1>
 9bc:	88 36       	cpi	r24, 0x68	; 104
 9be:	41 f4       	brne	.+16     	; 0x9d0 <__stack+0xd1>
 9c0:	f7 01       	movw	r30, r14
 9c2:	93 fd       	sbrc	r25, 3
 9c4:	85 91       	lpm	r24, Z+
 9c6:	93 ff       	sbrs	r25, 3
 9c8:	81 91       	ld	r24, Z+
 9ca:	7f 01       	movw	r14, r30
 9cc:	81 11       	cpse	r24, r1
 9ce:	b3 cf       	rjmp	.-154    	; 0x936 <__stack+0x37>
 9d0:	98 2f       	mov	r25, r24
 9d2:	9f 7d       	andi	r25, 0xDF	; 223
 9d4:	95 54       	subi	r25, 0x45	; 69
 9d6:	93 30       	cpi	r25, 0x03	; 3
 9d8:	28 f4       	brcc	.+10     	; 0x9e4 <__stack+0xe5>
 9da:	0c 5f       	subi	r16, 0xFC	; 252
 9dc:	1f 4f       	sbci	r17, 0xFF	; 255
 9de:	9f e3       	ldi	r25, 0x3F	; 63
 9e0:	99 83       	std	Y+1, r25	; 0x01
 9e2:	0d c0       	rjmp	.+26     	; 0x9fe <__stack+0xff>
 9e4:	83 36       	cpi	r24, 0x63	; 99
 9e6:	31 f0       	breq	.+12     	; 0x9f4 <__stack+0xf5>
 9e8:	83 37       	cpi	r24, 0x73	; 115
 9ea:	71 f0       	breq	.+28     	; 0xa08 <__stack+0x109>
 9ec:	83 35       	cpi	r24, 0x53	; 83
 9ee:	09 f0       	breq	.+2      	; 0x9f2 <__stack+0xf3>
 9f0:	59 c0       	rjmp	.+178    	; 0xaa4 <__stack+0x1a5>
 9f2:	21 c0       	rjmp	.+66     	; 0xa36 <__stack+0x137>
 9f4:	f8 01       	movw	r30, r16
 9f6:	80 81       	ld	r24, Z
 9f8:	89 83       	std	Y+1, r24	; 0x01
 9fa:	0e 5f       	subi	r16, 0xFE	; 254
 9fc:	1f 4f       	sbci	r17, 0xFF	; 255
 9fe:	88 24       	eor	r8, r8
 a00:	83 94       	inc	r8
 a02:	91 2c       	mov	r9, r1
 a04:	53 01       	movw	r10, r6
 a06:	13 c0       	rjmp	.+38     	; 0xa2e <__stack+0x12f>
 a08:	28 01       	movw	r4, r16
 a0a:	f2 e0       	ldi	r31, 0x02	; 2
 a0c:	4f 0e       	add	r4, r31
 a0e:	51 1c       	adc	r5, r1
 a10:	f8 01       	movw	r30, r16
 a12:	a0 80       	ld	r10, Z
 a14:	b1 80       	ldd	r11, Z+1	; 0x01
 a16:	36 fe       	sbrs	r3, 6
 a18:	03 c0       	rjmp	.+6      	; 0xa20 <__stack+0x121>
 a1a:	69 2d       	mov	r22, r9
 a1c:	70 e0       	ldi	r23, 0x00	; 0
 a1e:	02 c0       	rjmp	.+4      	; 0xa24 <__stack+0x125>
 a20:	6f ef       	ldi	r22, 0xFF	; 255
 a22:	7f ef       	ldi	r23, 0xFF	; 255
 a24:	c5 01       	movw	r24, r10
 a26:	0e 94 59 06 	call	0xcb2	; 0xcb2 <strnlen>
 a2a:	4c 01       	movw	r8, r24
 a2c:	82 01       	movw	r16, r4
 a2e:	f3 2d       	mov	r31, r3
 a30:	ff 77       	andi	r31, 0x7F	; 127
 a32:	3f 2e       	mov	r3, r31
 a34:	16 c0       	rjmp	.+44     	; 0xa62 <__stack+0x163>
 a36:	28 01       	movw	r4, r16
 a38:	22 e0       	ldi	r18, 0x02	; 2
 a3a:	42 0e       	add	r4, r18
 a3c:	51 1c       	adc	r5, r1
 a3e:	f8 01       	movw	r30, r16
 a40:	a0 80       	ld	r10, Z
 a42:	b1 80       	ldd	r11, Z+1	; 0x01
 a44:	36 fe       	sbrs	r3, 6
 a46:	03 c0       	rjmp	.+6      	; 0xa4e <__stack+0x14f>
 a48:	69 2d       	mov	r22, r9
 a4a:	70 e0       	ldi	r23, 0x00	; 0
 a4c:	02 c0       	rjmp	.+4      	; 0xa52 <__stack+0x153>
 a4e:	6f ef       	ldi	r22, 0xFF	; 255
 a50:	7f ef       	ldi	r23, 0xFF	; 255
 a52:	c5 01       	movw	r24, r10
 a54:	0e 94 4e 06 	call	0xc9c	; 0xc9c <strnlen_P>
 a58:	4c 01       	movw	r8, r24
 a5a:	f3 2d       	mov	r31, r3
 a5c:	f0 68       	ori	r31, 0x80	; 128
 a5e:	3f 2e       	mov	r3, r31
 a60:	82 01       	movw	r16, r4
 a62:	33 fc       	sbrc	r3, 3
 a64:	1b c0       	rjmp	.+54     	; 0xa9c <__stack+0x19d>
 a66:	82 2d       	mov	r24, r2
 a68:	90 e0       	ldi	r25, 0x00	; 0
 a6a:	88 16       	cp	r8, r24
 a6c:	99 06       	cpc	r9, r25
 a6e:	b0 f4       	brcc	.+44     	; 0xa9c <__stack+0x19d>
 a70:	b6 01       	movw	r22, r12
 a72:	80 e2       	ldi	r24, 0x20	; 32
 a74:	90 e0       	ldi	r25, 0x00	; 0
 a76:	0e 94 64 06 	call	0xcc8	; 0xcc8 <fputc>
 a7a:	2a 94       	dec	r2
 a7c:	f4 cf       	rjmp	.-24     	; 0xa66 <__stack+0x167>
 a7e:	f5 01       	movw	r30, r10
 a80:	37 fc       	sbrc	r3, 7
 a82:	85 91       	lpm	r24, Z+
 a84:	37 fe       	sbrs	r3, 7
 a86:	81 91       	ld	r24, Z+
 a88:	5f 01       	movw	r10, r30
 a8a:	b6 01       	movw	r22, r12
 a8c:	90 e0       	ldi	r25, 0x00	; 0
 a8e:	0e 94 64 06 	call	0xcc8	; 0xcc8 <fputc>
 a92:	21 10       	cpse	r2, r1
 a94:	2a 94       	dec	r2
 a96:	21 e0       	ldi	r18, 0x01	; 1
 a98:	82 1a       	sub	r8, r18
 a9a:	91 08       	sbc	r9, r1
 a9c:	81 14       	cp	r8, r1
 a9e:	91 04       	cpc	r9, r1
 aa0:	71 f7       	brne	.-36     	; 0xa7e <__stack+0x17f>
 aa2:	e8 c0       	rjmp	.+464    	; 0xc74 <__stack+0x375>
 aa4:	84 36       	cpi	r24, 0x64	; 100
 aa6:	11 f0       	breq	.+4      	; 0xaac <__stack+0x1ad>
 aa8:	89 36       	cpi	r24, 0x69	; 105
 aaa:	41 f5       	brne	.+80     	; 0xafc <__stack+0x1fd>
 aac:	f8 01       	movw	r30, r16
 aae:	37 fe       	sbrs	r3, 7
 ab0:	07 c0       	rjmp	.+14     	; 0xac0 <__stack+0x1c1>
 ab2:	60 81       	ld	r22, Z
 ab4:	71 81       	ldd	r23, Z+1	; 0x01
 ab6:	82 81       	ldd	r24, Z+2	; 0x02
 ab8:	93 81       	ldd	r25, Z+3	; 0x03
 aba:	0c 5f       	subi	r16, 0xFC	; 252
 abc:	1f 4f       	sbci	r17, 0xFF	; 255
 abe:	08 c0       	rjmp	.+16     	; 0xad0 <__stack+0x1d1>
 ac0:	60 81       	ld	r22, Z
 ac2:	71 81       	ldd	r23, Z+1	; 0x01
 ac4:	07 2e       	mov	r0, r23
 ac6:	00 0c       	add	r0, r0
 ac8:	88 0b       	sbc	r24, r24
 aca:	99 0b       	sbc	r25, r25
 acc:	0e 5f       	subi	r16, 0xFE	; 254
 ace:	1f 4f       	sbci	r17, 0xFF	; 255
 ad0:	f3 2d       	mov	r31, r3
 ad2:	ff 76       	andi	r31, 0x6F	; 111
 ad4:	3f 2e       	mov	r3, r31
 ad6:	97 ff       	sbrs	r25, 7
 ad8:	09 c0       	rjmp	.+18     	; 0xaec <__stack+0x1ed>
 ada:	90 95       	com	r25
 adc:	80 95       	com	r24
 ade:	70 95       	com	r23
 ae0:	61 95       	neg	r22
 ae2:	7f 4f       	sbci	r23, 0xFF	; 255
 ae4:	8f 4f       	sbci	r24, 0xFF	; 255
 ae6:	9f 4f       	sbci	r25, 0xFF	; 255
 ae8:	f0 68       	ori	r31, 0x80	; 128
 aea:	3f 2e       	mov	r3, r31
 aec:	2a e0       	ldi	r18, 0x0A	; 10
 aee:	30 e0       	ldi	r19, 0x00	; 0
 af0:	a3 01       	movw	r20, r6
 af2:	0e 94 a0 06 	call	0xd40	; 0xd40 <__ultoa_invert>
 af6:	88 2e       	mov	r8, r24
 af8:	86 18       	sub	r8, r6
 afa:	45 c0       	rjmp	.+138    	; 0xb86 <__stack+0x287>
 afc:	85 37       	cpi	r24, 0x75	; 117
 afe:	31 f4       	brne	.+12     	; 0xb0c <__stack+0x20d>
 b00:	23 2d       	mov	r18, r3
 b02:	2f 7e       	andi	r18, 0xEF	; 239
 b04:	b2 2e       	mov	r11, r18
 b06:	2a e0       	ldi	r18, 0x0A	; 10
 b08:	30 e0       	ldi	r19, 0x00	; 0
 b0a:	25 c0       	rjmp	.+74     	; 0xb56 <__stack+0x257>
 b0c:	93 2d       	mov	r25, r3
 b0e:	99 7f       	andi	r25, 0xF9	; 249
 b10:	b9 2e       	mov	r11, r25
 b12:	8f 36       	cpi	r24, 0x6F	; 111
 b14:	c1 f0       	breq	.+48     	; 0xb46 <__stack+0x247>
 b16:	18 f4       	brcc	.+6      	; 0xb1e <__stack+0x21f>
 b18:	88 35       	cpi	r24, 0x58	; 88
 b1a:	79 f0       	breq	.+30     	; 0xb3a <__stack+0x23b>
 b1c:	b5 c0       	rjmp	.+362    	; 0xc88 <__stack+0x389>
 b1e:	80 37       	cpi	r24, 0x70	; 112
 b20:	19 f0       	breq	.+6      	; 0xb28 <__stack+0x229>
 b22:	88 37       	cpi	r24, 0x78	; 120
 b24:	21 f0       	breq	.+8      	; 0xb2e <__stack+0x22f>
 b26:	b0 c0       	rjmp	.+352    	; 0xc88 <__stack+0x389>
 b28:	e9 2f       	mov	r30, r25
 b2a:	e0 61       	ori	r30, 0x10	; 16
 b2c:	be 2e       	mov	r11, r30
 b2e:	b4 fe       	sbrs	r11, 4
 b30:	0d c0       	rjmp	.+26     	; 0xb4c <__stack+0x24d>
 b32:	fb 2d       	mov	r31, r11
 b34:	f4 60       	ori	r31, 0x04	; 4
 b36:	bf 2e       	mov	r11, r31
 b38:	09 c0       	rjmp	.+18     	; 0xb4c <__stack+0x24d>
 b3a:	34 fe       	sbrs	r3, 4
 b3c:	0a c0       	rjmp	.+20     	; 0xb52 <__stack+0x253>
 b3e:	29 2f       	mov	r18, r25
 b40:	26 60       	ori	r18, 0x06	; 6
 b42:	b2 2e       	mov	r11, r18
 b44:	06 c0       	rjmp	.+12     	; 0xb52 <__stack+0x253>
 b46:	28 e0       	ldi	r18, 0x08	; 8
 b48:	30 e0       	ldi	r19, 0x00	; 0
 b4a:	05 c0       	rjmp	.+10     	; 0xb56 <__stack+0x257>
 b4c:	20 e1       	ldi	r18, 0x10	; 16
 b4e:	30 e0       	ldi	r19, 0x00	; 0
 b50:	02 c0       	rjmp	.+4      	; 0xb56 <__stack+0x257>
 b52:	20 e1       	ldi	r18, 0x10	; 16
 b54:	32 e0       	ldi	r19, 0x02	; 2
 b56:	f8 01       	movw	r30, r16
 b58:	b7 fe       	sbrs	r11, 7
 b5a:	07 c0       	rjmp	.+14     	; 0xb6a <__stack+0x26b>
 b5c:	60 81       	ld	r22, Z
 b5e:	71 81       	ldd	r23, Z+1	; 0x01
 b60:	82 81       	ldd	r24, Z+2	; 0x02
 b62:	93 81       	ldd	r25, Z+3	; 0x03
 b64:	0c 5f       	subi	r16, 0xFC	; 252
 b66:	1f 4f       	sbci	r17, 0xFF	; 255
 b68:	06 c0       	rjmp	.+12     	; 0xb76 <__stack+0x277>
 b6a:	60 81       	ld	r22, Z
 b6c:	71 81       	ldd	r23, Z+1	; 0x01
 b6e:	80 e0       	ldi	r24, 0x00	; 0
 b70:	90 e0       	ldi	r25, 0x00	; 0
 b72:	0e 5f       	subi	r16, 0xFE	; 254
 b74:	1f 4f       	sbci	r17, 0xFF	; 255
 b76:	a3 01       	movw	r20, r6
 b78:	0e 94 a0 06 	call	0xd40	; 0xd40 <__ultoa_invert>
 b7c:	88 2e       	mov	r8, r24
 b7e:	86 18       	sub	r8, r6
 b80:	fb 2d       	mov	r31, r11
 b82:	ff 77       	andi	r31, 0x7F	; 127
 b84:	3f 2e       	mov	r3, r31
 b86:	36 fe       	sbrs	r3, 6
 b88:	0d c0       	rjmp	.+26     	; 0xba4 <__stack+0x2a5>
 b8a:	23 2d       	mov	r18, r3
 b8c:	2e 7f       	andi	r18, 0xFE	; 254
 b8e:	a2 2e       	mov	r10, r18
 b90:	89 14       	cp	r8, r9
 b92:	58 f4       	brcc	.+22     	; 0xbaa <__stack+0x2ab>
 b94:	34 fe       	sbrs	r3, 4
 b96:	0b c0       	rjmp	.+22     	; 0xbae <__stack+0x2af>
 b98:	32 fc       	sbrc	r3, 2
 b9a:	09 c0       	rjmp	.+18     	; 0xbae <__stack+0x2af>
 b9c:	83 2d       	mov	r24, r3
 b9e:	8e 7e       	andi	r24, 0xEE	; 238
 ba0:	a8 2e       	mov	r10, r24
 ba2:	05 c0       	rjmp	.+10     	; 0xbae <__stack+0x2af>
 ba4:	b8 2c       	mov	r11, r8
 ba6:	a3 2c       	mov	r10, r3
 ba8:	03 c0       	rjmp	.+6      	; 0xbb0 <__stack+0x2b1>
 baa:	b8 2c       	mov	r11, r8
 bac:	01 c0       	rjmp	.+2      	; 0xbb0 <__stack+0x2b1>
 bae:	b9 2c       	mov	r11, r9
 bb0:	a4 fe       	sbrs	r10, 4
 bb2:	0f c0       	rjmp	.+30     	; 0xbd2 <__stack+0x2d3>
 bb4:	fe 01       	movw	r30, r28
 bb6:	e8 0d       	add	r30, r8
 bb8:	f1 1d       	adc	r31, r1
 bba:	80 81       	ld	r24, Z
 bbc:	80 33       	cpi	r24, 0x30	; 48
 bbe:	21 f4       	brne	.+8      	; 0xbc8 <__stack+0x2c9>
 bc0:	9a 2d       	mov	r25, r10
 bc2:	99 7e       	andi	r25, 0xE9	; 233
 bc4:	a9 2e       	mov	r10, r25
 bc6:	09 c0       	rjmp	.+18     	; 0xbda <__stack+0x2db>
 bc8:	a2 fe       	sbrs	r10, 2
 bca:	06 c0       	rjmp	.+12     	; 0xbd8 <__stack+0x2d9>
 bcc:	b3 94       	inc	r11
 bce:	b3 94       	inc	r11
 bd0:	04 c0       	rjmp	.+8      	; 0xbda <__stack+0x2db>
 bd2:	8a 2d       	mov	r24, r10
 bd4:	86 78       	andi	r24, 0x86	; 134
 bd6:	09 f0       	breq	.+2      	; 0xbda <__stack+0x2db>
 bd8:	b3 94       	inc	r11
 bda:	a3 fc       	sbrc	r10, 3
 bdc:	11 c0       	rjmp	.+34     	; 0xc00 <__stack+0x301>
 bde:	a0 fe       	sbrs	r10, 0
 be0:	06 c0       	rjmp	.+12     	; 0xbee <__stack+0x2ef>
 be2:	b2 14       	cp	r11, r2
 be4:	88 f4       	brcc	.+34     	; 0xc08 <__stack+0x309>
 be6:	28 0c       	add	r2, r8
 be8:	92 2c       	mov	r9, r2
 bea:	9b 18       	sub	r9, r11
 bec:	0e c0       	rjmp	.+28     	; 0xc0a <__stack+0x30b>
 bee:	b2 14       	cp	r11, r2
 bf0:	60 f4       	brcc	.+24     	; 0xc0a <__stack+0x30b>
 bf2:	b6 01       	movw	r22, r12
 bf4:	80 e2       	ldi	r24, 0x20	; 32
 bf6:	90 e0       	ldi	r25, 0x00	; 0
 bf8:	0e 94 64 06 	call	0xcc8	; 0xcc8 <fputc>
 bfc:	b3 94       	inc	r11
 bfe:	f7 cf       	rjmp	.-18     	; 0xbee <__stack+0x2ef>
 c00:	b2 14       	cp	r11, r2
 c02:	18 f4       	brcc	.+6      	; 0xc0a <__stack+0x30b>
 c04:	2b 18       	sub	r2, r11
 c06:	02 c0       	rjmp	.+4      	; 0xc0c <__stack+0x30d>
 c08:	98 2c       	mov	r9, r8
 c0a:	21 2c       	mov	r2, r1
 c0c:	a4 fe       	sbrs	r10, 4
 c0e:	10 c0       	rjmp	.+32     	; 0xc30 <__stack+0x331>
 c10:	b6 01       	movw	r22, r12
 c12:	80 e3       	ldi	r24, 0x30	; 48
 c14:	90 e0       	ldi	r25, 0x00	; 0
 c16:	0e 94 64 06 	call	0xcc8	; 0xcc8 <fputc>
 c1a:	a2 fe       	sbrs	r10, 2
 c1c:	17 c0       	rjmp	.+46     	; 0xc4c <__stack+0x34d>
 c1e:	a1 fc       	sbrc	r10, 1
 c20:	03 c0       	rjmp	.+6      	; 0xc28 <__stack+0x329>
 c22:	88 e7       	ldi	r24, 0x78	; 120
 c24:	90 e0       	ldi	r25, 0x00	; 0
 c26:	02 c0       	rjmp	.+4      	; 0xc2c <__stack+0x32d>
 c28:	88 e5       	ldi	r24, 0x58	; 88
 c2a:	90 e0       	ldi	r25, 0x00	; 0
 c2c:	b6 01       	movw	r22, r12
 c2e:	0c c0       	rjmp	.+24     	; 0xc48 <__stack+0x349>
 c30:	8a 2d       	mov	r24, r10
 c32:	86 78       	andi	r24, 0x86	; 134
 c34:	59 f0       	breq	.+22     	; 0xc4c <__stack+0x34d>
 c36:	a1 fe       	sbrs	r10, 1
 c38:	02 c0       	rjmp	.+4      	; 0xc3e <__stack+0x33f>
 c3a:	8b e2       	ldi	r24, 0x2B	; 43
 c3c:	01 c0       	rjmp	.+2      	; 0xc40 <__stack+0x341>
 c3e:	80 e2       	ldi	r24, 0x20	; 32
 c40:	a7 fc       	sbrc	r10, 7
 c42:	8d e2       	ldi	r24, 0x2D	; 45
 c44:	b6 01       	movw	r22, r12
 c46:	90 e0       	ldi	r25, 0x00	; 0
 c48:	0e 94 64 06 	call	0xcc8	; 0xcc8 <fputc>
 c4c:	89 14       	cp	r8, r9
 c4e:	38 f4       	brcc	.+14     	; 0xc5e <__stack+0x35f>
 c50:	b6 01       	movw	r22, r12
 c52:	80 e3       	ldi	r24, 0x30	; 48
 c54:	90 e0       	ldi	r25, 0x00	; 0
 c56:	0e 94 64 06 	call	0xcc8	; 0xcc8 <fputc>
 c5a:	9a 94       	dec	r9
 c5c:	f7 cf       	rjmp	.-18     	; 0xc4c <__stack+0x34d>
 c5e:	8a 94       	dec	r8
 c60:	f3 01       	movw	r30, r6
 c62:	e8 0d       	add	r30, r8
 c64:	f1 1d       	adc	r31, r1
 c66:	80 81       	ld	r24, Z
 c68:	b6 01       	movw	r22, r12
 c6a:	90 e0       	ldi	r25, 0x00	; 0
 c6c:	0e 94 64 06 	call	0xcc8	; 0xcc8 <fputc>
 c70:	81 10       	cpse	r8, r1
 c72:	f5 cf       	rjmp	.-22     	; 0xc5e <__stack+0x35f>
 c74:	22 20       	and	r2, r2
 c76:	09 f4       	brne	.+2      	; 0xc7a <__stack+0x37b>
 c78:	42 ce       	rjmp	.-892    	; 0x8fe <vfprintf+0x24>
 c7a:	b6 01       	movw	r22, r12
 c7c:	80 e2       	ldi	r24, 0x20	; 32
 c7e:	90 e0       	ldi	r25, 0x00	; 0
 c80:	0e 94 64 06 	call	0xcc8	; 0xcc8 <fputc>
 c84:	2a 94       	dec	r2
 c86:	f6 cf       	rjmp	.-20     	; 0xc74 <__stack+0x375>
 c88:	f6 01       	movw	r30, r12
 c8a:	86 81       	ldd	r24, Z+6	; 0x06
 c8c:	97 81       	ldd	r25, Z+7	; 0x07
 c8e:	02 c0       	rjmp	.+4      	; 0xc94 <__stack+0x395>
 c90:	8f ef       	ldi	r24, 0xFF	; 255
 c92:	9f ef       	ldi	r25, 0xFF	; 255
 c94:	2b 96       	adiw	r28, 0x0b	; 11
 c96:	e2 e1       	ldi	r30, 0x12	; 18
 c98:	0c 94 1a 07 	jmp	0xe34	; 0xe34 <__epilogue_restores__>

00000c9c <strnlen_P>:
 c9c:	fc 01       	movw	r30, r24
 c9e:	05 90       	lpm	r0, Z+
 ca0:	61 50       	subi	r22, 0x01	; 1
 ca2:	70 40       	sbci	r23, 0x00	; 0
 ca4:	01 10       	cpse	r0, r1
 ca6:	d8 f7       	brcc	.-10     	; 0xc9e <strnlen_P+0x2>
 ca8:	80 95       	com	r24
 caa:	90 95       	com	r25
 cac:	8e 0f       	add	r24, r30
 cae:	9f 1f       	adc	r25, r31
 cb0:	08 95       	ret

00000cb2 <strnlen>:
 cb2:	fc 01       	movw	r30, r24
 cb4:	61 50       	subi	r22, 0x01	; 1
 cb6:	70 40       	sbci	r23, 0x00	; 0
 cb8:	01 90       	ld	r0, Z+
 cba:	01 10       	cpse	r0, r1
 cbc:	d8 f7       	brcc	.-10     	; 0xcb4 <strnlen+0x2>
 cbe:	80 95       	com	r24
 cc0:	90 95       	com	r25
 cc2:	8e 0f       	add	r24, r30
 cc4:	9f 1f       	adc	r25, r31
 cc6:	08 95       	ret

00000cc8 <fputc>:
 cc8:	0f 93       	push	r16
 cca:	1f 93       	push	r17
 ccc:	cf 93       	push	r28
 cce:	df 93       	push	r29
 cd0:	fb 01       	movw	r30, r22
 cd2:	23 81       	ldd	r18, Z+3	; 0x03
 cd4:	21 fd       	sbrc	r18, 1
 cd6:	03 c0       	rjmp	.+6      	; 0xcde <fputc+0x16>
 cd8:	8f ef       	ldi	r24, 0xFF	; 255
 cda:	9f ef       	ldi	r25, 0xFF	; 255
 cdc:	2c c0       	rjmp	.+88     	; 0xd36 <fputc+0x6e>
 cde:	22 ff       	sbrs	r18, 2
 ce0:	16 c0       	rjmp	.+44     	; 0xd0e <fputc+0x46>
 ce2:	46 81       	ldd	r20, Z+6	; 0x06
 ce4:	57 81       	ldd	r21, Z+7	; 0x07
 ce6:	24 81       	ldd	r18, Z+4	; 0x04
 ce8:	35 81       	ldd	r19, Z+5	; 0x05
 cea:	42 17       	cp	r20, r18
 cec:	53 07       	cpc	r21, r19
 cee:	44 f4       	brge	.+16     	; 0xd00 <fputc+0x38>
 cf0:	a0 81       	ld	r26, Z
 cf2:	b1 81       	ldd	r27, Z+1	; 0x01
 cf4:	9d 01       	movw	r18, r26
 cf6:	2f 5f       	subi	r18, 0xFF	; 255
 cf8:	3f 4f       	sbci	r19, 0xFF	; 255
 cfa:	31 83       	std	Z+1, r19	; 0x01
 cfc:	20 83       	st	Z, r18
 cfe:	8c 93       	st	X, r24
 d00:	26 81       	ldd	r18, Z+6	; 0x06
 d02:	37 81       	ldd	r19, Z+7	; 0x07
 d04:	2f 5f       	subi	r18, 0xFF	; 255
 d06:	3f 4f       	sbci	r19, 0xFF	; 255
 d08:	37 83       	std	Z+7, r19	; 0x07
 d0a:	26 83       	std	Z+6, r18	; 0x06
 d0c:	14 c0       	rjmp	.+40     	; 0xd36 <fputc+0x6e>
 d0e:	8b 01       	movw	r16, r22
 d10:	ec 01       	movw	r28, r24
 d12:	fb 01       	movw	r30, r22
 d14:	00 84       	ldd	r0, Z+8	; 0x08
 d16:	f1 85       	ldd	r31, Z+9	; 0x09
 d18:	e0 2d       	mov	r30, r0
 d1a:	09 95       	icall
 d1c:	89 2b       	or	r24, r25
 d1e:	e1 f6       	brne	.-72     	; 0xcd8 <fputc+0x10>
 d20:	d8 01       	movw	r26, r16
 d22:	16 96       	adiw	r26, 0x06	; 6
 d24:	8d 91       	ld	r24, X+
 d26:	9c 91       	ld	r25, X
 d28:	17 97       	sbiw	r26, 0x07	; 7
 d2a:	01 96       	adiw	r24, 0x01	; 1
 d2c:	17 96       	adiw	r26, 0x07	; 7
 d2e:	9c 93       	st	X, r25
 d30:	8e 93       	st	-X, r24
 d32:	16 97       	sbiw	r26, 0x06	; 6
 d34:	ce 01       	movw	r24, r28
 d36:	df 91       	pop	r29
 d38:	cf 91       	pop	r28
 d3a:	1f 91       	pop	r17
 d3c:	0f 91       	pop	r16
 d3e:	08 95       	ret

00000d40 <__ultoa_invert>:
 d40:	fa 01       	movw	r30, r20
 d42:	aa 27       	eor	r26, r26
 d44:	28 30       	cpi	r18, 0x08	; 8
 d46:	51 f1       	breq	.+84     	; 0xd9c <__ultoa_invert+0x5c>
 d48:	20 31       	cpi	r18, 0x10	; 16
 d4a:	81 f1       	breq	.+96     	; 0xdac <__ultoa_invert+0x6c>
 d4c:	e8 94       	clt
 d4e:	6f 93       	push	r22
 d50:	6e 7f       	andi	r22, 0xFE	; 254
 d52:	6e 5f       	subi	r22, 0xFE	; 254
 d54:	7f 4f       	sbci	r23, 0xFF	; 255
 d56:	8f 4f       	sbci	r24, 0xFF	; 255
 d58:	9f 4f       	sbci	r25, 0xFF	; 255
 d5a:	af 4f       	sbci	r26, 0xFF	; 255
 d5c:	b1 e0       	ldi	r27, 0x01	; 1
 d5e:	3e d0       	rcall	.+124    	; 0xddc <__ultoa_invert+0x9c>
 d60:	b4 e0       	ldi	r27, 0x04	; 4
 d62:	3c d0       	rcall	.+120    	; 0xddc <__ultoa_invert+0x9c>
 d64:	67 0f       	add	r22, r23
 d66:	78 1f       	adc	r23, r24
 d68:	89 1f       	adc	r24, r25
 d6a:	9a 1f       	adc	r25, r26
 d6c:	a1 1d       	adc	r26, r1
 d6e:	68 0f       	add	r22, r24
 d70:	79 1f       	adc	r23, r25
 d72:	8a 1f       	adc	r24, r26
 d74:	91 1d       	adc	r25, r1
 d76:	a1 1d       	adc	r26, r1
 d78:	6a 0f       	add	r22, r26
 d7a:	71 1d       	adc	r23, r1
 d7c:	81 1d       	adc	r24, r1
 d7e:	91 1d       	adc	r25, r1
 d80:	a1 1d       	adc	r26, r1
 d82:	20 d0       	rcall	.+64     	; 0xdc4 <__ultoa_invert+0x84>
 d84:	09 f4       	brne	.+2      	; 0xd88 <__ultoa_invert+0x48>
 d86:	68 94       	set
 d88:	3f 91       	pop	r19
 d8a:	2a e0       	ldi	r18, 0x0A	; 10
 d8c:	26 9f       	mul	r18, r22
 d8e:	11 24       	eor	r1, r1
 d90:	30 19       	sub	r19, r0
 d92:	30 5d       	subi	r19, 0xD0	; 208
 d94:	31 93       	st	Z+, r19
 d96:	de f6       	brtc	.-74     	; 0xd4e <__ultoa_invert+0xe>
 d98:	cf 01       	movw	r24, r30
 d9a:	08 95       	ret
 d9c:	46 2f       	mov	r20, r22
 d9e:	47 70       	andi	r20, 0x07	; 7
 da0:	40 5d       	subi	r20, 0xD0	; 208
 da2:	41 93       	st	Z+, r20
 da4:	b3 e0       	ldi	r27, 0x03	; 3
 da6:	0f d0       	rcall	.+30     	; 0xdc6 <__ultoa_invert+0x86>
 da8:	c9 f7       	brne	.-14     	; 0xd9c <__ultoa_invert+0x5c>
 daa:	f6 cf       	rjmp	.-20     	; 0xd98 <__ultoa_invert+0x58>
 dac:	46 2f       	mov	r20, r22
 dae:	4f 70       	andi	r20, 0x0F	; 15
 db0:	40 5d       	subi	r20, 0xD0	; 208
 db2:	4a 33       	cpi	r20, 0x3A	; 58
 db4:	18 f0       	brcs	.+6      	; 0xdbc <__ultoa_invert+0x7c>
 db6:	49 5d       	subi	r20, 0xD9	; 217
 db8:	31 fd       	sbrc	r19, 1
 dba:	40 52       	subi	r20, 0x20	; 32
 dbc:	41 93       	st	Z+, r20
 dbe:	02 d0       	rcall	.+4      	; 0xdc4 <__ultoa_invert+0x84>
 dc0:	a9 f7       	brne	.-22     	; 0xdac <__ultoa_invert+0x6c>
 dc2:	ea cf       	rjmp	.-44     	; 0xd98 <__ultoa_invert+0x58>
 dc4:	b4 e0       	ldi	r27, 0x04	; 4
 dc6:	a6 95       	lsr	r26
 dc8:	97 95       	ror	r25
 dca:	87 95       	ror	r24
 dcc:	77 95       	ror	r23
 dce:	67 95       	ror	r22
 dd0:	ba 95       	dec	r27
 dd2:	c9 f7       	brne	.-14     	; 0xdc6 <__ultoa_invert+0x86>
 dd4:	00 97       	sbiw	r24, 0x00	; 0
 dd6:	61 05       	cpc	r22, r1
 dd8:	71 05       	cpc	r23, r1
 dda:	08 95       	ret
 ddc:	9b 01       	movw	r18, r22
 dde:	ac 01       	movw	r20, r24
 de0:	0a 2e       	mov	r0, r26
 de2:	06 94       	lsr	r0
 de4:	57 95       	ror	r21
 de6:	47 95       	ror	r20
 de8:	37 95       	ror	r19
 dea:	27 95       	ror	r18
 dec:	ba 95       	dec	r27
 dee:	c9 f7       	brne	.-14     	; 0xde2 <__ultoa_invert+0xa2>
 df0:	62 0f       	add	r22, r18
 df2:	73 1f       	adc	r23, r19
 df4:	84 1f       	adc	r24, r20
 df6:	95 1f       	adc	r25, r21
 df8:	a0 1d       	adc	r26, r0
 dfa:	08 95       	ret

00000dfc <__prologue_saves__>:
 dfc:	2f 92       	push	r2
 dfe:	3f 92       	push	r3
 e00:	4f 92       	push	r4
 e02:	5f 92       	push	r5
 e04:	6f 92       	push	r6
 e06:	7f 92       	push	r7
 e08:	8f 92       	push	r8
 e0a:	9f 92       	push	r9
 e0c:	af 92       	push	r10
 e0e:	bf 92       	push	r11
 e10:	cf 92       	push	r12
 e12:	df 92       	push	r13
 e14:	ef 92       	push	r14
 e16:	ff 92       	push	r15
 e18:	0f 93       	push	r16
 e1a:	1f 93       	push	r17
 e1c:	cf 93       	push	r28
 e1e:	df 93       	push	r29
 e20:	cd b7       	in	r28, 0x3d	; 61
 e22:	de b7       	in	r29, 0x3e	; 62
 e24:	ca 1b       	sub	r28, r26
 e26:	db 0b       	sbc	r29, r27
 e28:	0f b6       	in	r0, 0x3f	; 63
 e2a:	f8 94       	cli
 e2c:	de bf       	out	0x3e, r29	; 62
 e2e:	0f be       	out	0x3f, r0	; 63
 e30:	cd bf       	out	0x3d, r28	; 61
 e32:	09 94       	ijmp

00000e34 <__epilogue_restores__>:
 e34:	2a 88       	ldd	r2, Y+18	; 0x12
 e36:	39 88       	ldd	r3, Y+17	; 0x11
 e38:	48 88       	ldd	r4, Y+16	; 0x10
 e3a:	5f 84       	ldd	r5, Y+15	; 0x0f
 e3c:	6e 84       	ldd	r6, Y+14	; 0x0e
 e3e:	7d 84       	ldd	r7, Y+13	; 0x0d
 e40:	8c 84       	ldd	r8, Y+12	; 0x0c
 e42:	9b 84       	ldd	r9, Y+11	; 0x0b
 e44:	aa 84       	ldd	r10, Y+10	; 0x0a
 e46:	b9 84       	ldd	r11, Y+9	; 0x09
 e48:	c8 84       	ldd	r12, Y+8	; 0x08
 e4a:	df 80       	ldd	r13, Y+7	; 0x07
 e4c:	ee 80       	ldd	r14, Y+6	; 0x06
 e4e:	fd 80       	ldd	r15, Y+5	; 0x05
 e50:	0c 81       	ldd	r16, Y+4	; 0x04
 e52:	1b 81       	ldd	r17, Y+3	; 0x03
 e54:	aa 81       	ldd	r26, Y+2	; 0x02
 e56:	b9 81       	ldd	r27, Y+1	; 0x01
 e58:	ce 0f       	add	r28, r30
 e5a:	d1 1d       	adc	r29, r1
 e5c:	0f b6       	in	r0, 0x3f	; 63
 e5e:	f8 94       	cli
 e60:	de bf       	out	0x3e, r29	; 62
 e62:	0f be       	out	0x3f, r0	; 63
 e64:	cd bf       	out	0x3d, r28	; 61
 e66:	ed 01       	movw	r28, r26
 e68:	08 95       	ret

00000e6a <_exit>:
 e6a:	f8 94       	cli

00000e6c <__stop_program>:
 e6c:	ff cf       	rjmp	.-2      	; 0xe6c <__stop_program>
